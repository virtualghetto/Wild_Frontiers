#textdomain wesnoth-Wild_Frontiers
# Macros for Wild Frontiers

# ----- Utility Macros ---------------------------------------------------
# The following macros are convenience macros used in subsequent definitions

#define ASSIGN_VAR_IF_NULL VAR VALUE
    [if]
        {VARIABLE_CONDITIONAL {VAR} equals $null}
        [then]
            [set_variable]
                name={VAR}
                value={VALUE}
            [/set_variable]
        [/then]
    [/if]
#enddef

#define ASSIGN_VARS_IF_NULL VAR VALUE
    [if]
        [variable]
            name={VAR}.length
            less_than=1
        [/variable]
        [then]
            [set_variables]
                name={VAR}
                mode=replace
                {VALUE}
            [/set_variables]
        [/then]
    [/if]
#enddef

#define RANDOM_VAR VAR RANGE
    # I use lots of temporary random variables, so putting them all
    # in $random doesn't work for me. I promise to be good and clear them
    # when done
    [set_variable]
        name={VAR}
        rand={RANGE}
    [/set_variable]
#enddef

#define DIFFICULTY_VAR VAR EASY_VALUE NORMAL_VALUE HARD_VALUE
    # Assigns a variable a particular value depending on the difficulty level
    [set_variable]
        name={VAR}
        {QUANTITY value {EASY_VALUE} {NORMAL_VALUE} {HARD_VALUE}}
    [/set_variable]
#enddef

#define FIRE_EVENT NAME
    # Quick syntactic shortcut to fire an event. Used to call tutorial
    # messages and project events
    [fire_event]
        name={NAME}
    [/fire_event]
#enddef

#define STORE_GOLD
    [store_gold]
        side=1
        variable=wf_vars.side1_gold
    [/store_gold]
    #{VARIABLE projects_cost 0}
    #[foreach]
    #    array=projects.proj_list
    #    [do]
    #        {VARIABLE_OP projects_cost add $this_item.cost}
    #    [/do]
    #[/foreach]
    #{VARIABLE wf_vars.gold_cost "$(300 + ceil( 0.5 * ($wf_vars.side1_gold + $projects_cost)))"}
    #{CLEAR_VARIABLE projects_cost}
#enddef

#define CHECK_GOLD AMOUNT
    # Checks to see if the player has enough gold to embark on the proposed
    # project. Use inside an [if] block. Must be preceded by STORE_GOLD
    [variable]
        name=wf_vars.side1_gold
        greater_than_equal_to={AMOUNT}
    [/variable]
#enddef

#define PAY_GOLD AMOUNT
    {VARIABLE gold_amount {AMOUNT}}
    [if]
        {VARIABLE_CONDITIONAL gold_amount greater_than 0}
        [then]
            [sound]
                name="gold.ogg"
            [/sound]
            [gold]
                side=1
                amount=-{AMOUNT}
            [/gold]
            {STORE_GOLD}
            [if]
                {VARIABLE_CONDITIONAL wf_vars.side1_gold less_than 100}
                [then]
                    {FIRE_EVENT low_gold}
                [/then]
            [/if]
        [/then]
    [/if]
    {CLEAR_VARIABLE gold_amount}
#enddef

#define REFUND_GOLD AMOUNT
    {VARIABLE gold_amount {AMOUNT}}
    [if]
        {VARIABLE_CONDITIONAL gold_amount greater_than 0}
        [then]
            [gold]
                side=1
                amount={AMOUNT}
            [/gold]
            [sound]
                name="gold.ogg"
            [/sound]
        [/then]
    [/if]
    {CLEAR_VARIABLE gold_amount}
#enddef

#define LOW_GOLD_WARNINGS
    # This recruit event is separate from low_gold so the latter only runs once
    [event]
        name=recruit
        id=recruit_low_gold
        first_time_only=no
        [filter]
            side=1
        [/filter]
        {STORE_GOLD}
        [if]
            {VARIABLE_CONDITIONAL wf_vars.side1_gold less_than 100}
            [then]
                {FIRE_EVENT low_gold}
            [/then]
        [/if]
    [/event]
    # Other low gold checks are made in the PAY_GOLD macro above (for buildings, etc.)
    # and for negative income in the CAMPAIGN_VICTORY macro below
    [event]
        name=low_gold
        first_time_only=yes
        {ADVISOR_SAYS _"Milord, the treasury is beginning to look rather bare. Might I suggest directing the Peasant Workers to build new farms with the remaining gold, or perhaps taking some of our men off active duty?"}
        {TUTORIAL low_gold_warning _"Your gold reserves have fallen below 100. While this is common, particularly early in the game when you are building at a rapid pace but have few villages, you should keep a close eye on your income. If your income is positive, you are likely fine and your treasury will recover shortly. If your income is negative, avoid recruiting more units and make sure any Peasant Workers you have are building farms to boost your income.

If you have more than one Peasant Workers unit, consider having them or other unnecessary units stand down by moving them and $wf_vars.hero_name to your keep and right-clicking on the unit. This will reduce your upkeep costs. Also consider halting any non-farm projects you are currently working on (right-click on the Peasant Workers and select 'Project status') to recoup the initial cost."}
    [/event]
#enddef

#define COUNT_VILLAGES VAR
    # Counts all villages, including any that happen to be outlaw-occupied
    #[store_villages]
    #    variable=temp
    #[/store_villages]
    [store_locations]
        variable=temp
        terrain=*^V*,*^Ygy
    [/store_locations]
    {VARIABLE {VAR} $temp.length}
    {CLEAR_VARIABLE temp}
#enddef

#define NOT_FILTER
    #In a location filter, an empty [filter] tag means "match only locations with units on them", so an empty [filter] tag in a [not] tag inverts that to "match only locations with no unit on them". -- Celtic_Minstrel
    [not]
        [filter]
        [/filter]
    [/not]
#enddef

#define NOT_FILTER_ADJACENT
    [not]
        [filter_adjacent_location]
            [filter]
            [/filter]
        [/filter_adjacent_location]
    [/not]
#enddef

#define ASSIGN_UNIT_VARIABLE X Y VAR VALUE
    # Add a variable VAR to the unit WML, which can later be filtered for.
    # At the moment, this is only used in relic-inflicted curses to
    # avoid overwriting unit [roles].
    [store_unit]
        variable=unit_store
        kill=yes
        mode=always_clear
        [filter]
            x,y={X},{Y}
        [/filter]
    [/store_unit]
    {VARIABLE unit_store.variables.{VAR} {VALUE}}
    [unstore_unit]
        variable=unit_store
        find_vacant=no
    [/unstore_unit]
    {CLEAR_VARIABLE unit_store}
#enddef

#define REMOVE_UNIT_VARIABLE X Y VAR
    [store_unit]
        variable=unit_store
        kill=yes
        mode=always_clear
        [filter]
            x,y={X},{Y}
        [/filter]
    [/store_unit]
    {CLEAR_VARIABLE unit_store.variables.{VAR}}
    [unstore_unit]
        variable=unit_store
        find_vacant=no
    [/unstore_unit]
    {CLEAR_VARIABLE unit_store}
#enddef

#define ASSIGN_UNIT_STATUS X Y VAR
    # Add a variable VAR to the unit WML, which can later be filtered for.
    # At the moment, this is only used in relic-inflicted curses to
    # avoid overwriting unit [roles].
    [modify_unit]
        [filter]
            x,y={X},{Y}
        [/filter]
        #{VARIABLE unit_store.status.{VAR} yes}
        [effect]
            apply_to=status
            add={VAR}
        [/effect]
    [/modify_unit]
#enddef

#define REMOVE_UNIT_STATUS X Y VAR
    [modify_unit]
        [filter]
            x,y={X},{Y}
        [/filter]
        #{VARIABLE unit_store.status.{VAR} no}
        #{CLEAR_VARIABLE unit_store.status.{VAR}}
        [effect]
            apply_to=status
            remove={VAR}
        [/effect]
    [/modify_unit]
#enddef

#define IS_LAST
    #[variables]
    #	last=yes
    #[/variables]
    [status]
        last=yes
    [/status]
#enddef

#define FILTER_FOR_LAST
    #[filter_wml]
    #	{IS_LAST}
    #[/filter_wml]
    status=last
    #formula="wml_vars.last=1"
#enddef

#define STORE_LAST_UNIT
    [store_unit]
        variable=last_unit
        kill=no
        mode=always_clear
        [filter]
            {FILTER_FOR_LAST}
        [/filter]
    [/store_unit]
#enddef

#define CLEAR_LAST_UNIT
    [modify_unit]
        [filter]
            {FILTER_FOR_LAST}
        [/filter]
        [effect]
            apply_to=status
            remove=last
        [/effect]
    [/modify_unit]
    {CLEAR_VARIABLE last_unit}
    #[store_unit]
    #	[filter]
    #		{FILTER_FOR_LAST}
    #	[/filter]
    #	kill=yes
    #	variable=unit_store
    #	mode=always_clear
    #[/store_unit]
    #[foreach]
    #	array=unit_store
    #	[do]
    #		{CLEAR_VARIABLE this_item.variables.last}
    #		[unstore_unit]
    #			variable=this_item
    #			find_vacant=no
    #		[/unstore_unit]
    #	[/do]
    #[/foreach]
    #{CLEAR_VARIABLE unit_store}
#enddef

#define IS_CRONIES
    #[variables]
    #	cronies=yes
    #[/variables]
    [status]
        cronies=yes
    [/status]
#enddef

#define FILTER_FOR_CRONIES
    #[filter_wml]
    #	{IS_CRONIES}
    #[/filter_wml]
    status=cronies
    #formula="wml_vars.cronies=1"
#enddef

#define REMOVE_AUTO_ADVANCE_CRONIES GSIDE
    [modify_unit]
        [filter]
            side={GSIDE}
            {FILTER_FOR_CRONIES}
        [/filter]
        [effect]
            apply_to=status
            remove=cronies
        [/effect]
    [/modify_unit]
    #[store_unit]
    #	[filter]
    #		side={GSIDE}
    #		{FILTER_FOR_CRONIES}
    #	[/filter]
    #	kill=yes
    #	variable=unit_store
    #	mode=always_clear
    #[/store_unit]
    #[foreach]
    #	array=unit_store
    #	[do]
    #		{CLEAR_VARIABLE this_item.variables.cronies}
    #		[unstore_unit]
    #			variable=this_item
    #			find_vacant=no
    #		[/unstore_unit]
    #	[/do]
    #[/foreach]
    #{CLEAR_VARIABLE unit_store}
#enddef

#define AUTO_ADV_SIDE SIDE
    # Auto-Advance spawned group
#ifdef EASY
    {RANDOM_VAR autoadv (no,no,no,no,no,no,no,yes)}
#endif
#ifdef NORMAL
    {RANDOM_VAR autoadv (no,no,no,yes)}
#endif
#ifdef HARD
    {RANDOM_VAR autoadv (no,no,yes)}
#endif
    [if]
        [and]
            {VARIABLE_CONDITIONAL autoadv boolean_equals yes}
            {VARIABLE_CONDITIONAL wf_vars.season greater_than_equal_to 4}
        [/and]
        [then]
            [store_unit]
                [filter]
                    side={SIDE}
                    {FILTER_FOR_CRONIES}
                [/filter]
                kill=no
                variable=unit_store
                mode=always_clear
            [/store_unit]
            [foreach]
                array=unit_store
                [do]
                    {RANDOM_VAR autoadv (yes,no)}
                    [if]
                        {VARIABLE_CONDITIONAL autoadv boolean_equals yes}
                        [then]
                            [modify_unit]
                                [filter]
                                    id=$this_item.id
                                [/filter]
                                experience = "$($this_unit.max_experience)"
                                #[effect]
                                #	apply_to=experience
                                #	set="$($this_unit.max_experience)"
                                #[/effect]
                            [/modify_unit]
                        [/then]
                    [/if]
                [/do]
            [/foreach]
            {CLEAR_VARIABLE unit_store}
        [/then]
    [/if]
    {REMOVE_AUTO_ADVANCE_CRONIES {SIDE}}
    {CLEAR_VARIABLE autoadv}
#enddef

#define VALUE1 KEY1 ITEM1
    # syntactic shortcut to make a long array definition more compact
    [value]
        {KEY1}={ITEM1}
    [/value]
#enddef

#define VALUE2 KEY1 ITEM1 KEY2 ITEM2
    # syntactic shortcut to make a long array definition more compact
    [value]
        {KEY1}={ITEM1}
        {KEY2}={ITEM2}
    [/value]
#enddef

# ----- Scenario Macros -------------------------------------------------=
# These are used in setting up and cleaning up each scenario

#define YOU_ARE_SIDE1 FOG_YES_NO
    [side]
        side=1
        controller=human
        team_name=settlers
        user_team_name=_"Settlers"
        fog={FOG_YES_NO}
        shroud=yes
        {FLAG_VARIANT loyalist}
        recruit= #Peasant_no_Advance,Woodsman_no_Advance,Ruffian_no_Advance,Peasant Workers
        gold=0					# side gold set in first scenario
        income=-2				# cancel out the base_income
        save_id=Hero
        persistent=yes
        no_leader=yes
        defeat_condition=no_leader_left
    [/side]
#enddef

#define DISPLAY_YEAR_AND SEASON
    [print]
        #text={SEASON} + _", $year YW"
        text=$wf_vars.year_str
        size=36
        red,green,blue=255,255,255
        duration=175 # about 5 seconds
    [/print]
#enddef

#define STORE_MAP_AND_UNITS
    [modify_side]
        side=1
        shroud=yes
    [/modify_side]
    [save_map]
        variable=map_store
    [/save_map]
    # This is identical to side_store.shroud_data.
    [store_shroud]
        side=1
        variable=shroud_store
    [/store_shroud]
    [store_side]
        variable=side_store
        side=1
    [/store_side]
    [gold]
        side=1
        amount=$side_store.income
    [/gold]
    [store_villages]
        variable=village_store
        # store all villages
    [/store_villages]
    [store_gold]
        side=2
        variable=gold_store2
    [/store_gold]
    [store_gold]
        side=3
        variable=gold_store3
    [/store_gold]
    [store_gold]
        side=4
        variable=gold_store4
    [/store_gold]
    [store_gold]
        side=5
        variable=gold_store5
    [/store_gold]
    [store_gold]
        side=6
        variable=gold_store6
    [/store_gold]
    [store_gold]
        side=7
        variable=gold_store7
    [/store_gold]
    [store_gold]
        side=8
        variable=gold_store8
    [/store_gold]
    [store_gold]
        side=9
        variable=gold_store9
    [/store_gold]
    [store_unit]
        variable=unit_store
        mode=always_clear
        kill=yes # otherwise they will also appear on recall list
        [filter]
            # everything on the map, ignore recall list
            x,y=1-{MAP_WIDTH},1-{MAP_HEIGHT}
        [/filter]
    [/store_unit]
    # Bump season counter for each on-map unit
    [for]
        array=unit_store
        reverse=yes
        [do]
            {VARIABLE_OP unit_store[$i].variables.seasons add 1}
        [/do]
    [/for]
#enddef

#define RESTORE_MAP_AND_UNITS
    # Get the map and shroud from the end of the previous scenario, overwrite map
    [load_map]
        variable=map_store
    [/load_map]
    {CLEAR_VARIABLE map_store}	# no need to lug this around
    [if]
        {VARIABLE_CONDITIONAL side_store.shroud equals yes}
        [then]
            [set_shroud]
                side=1
                shroud_data=$shroud_store
            [/set_shroud]
        [/then]
    [/if]
    {CLEAR_VARIABLE shroud_store}

    [if]
        {VARIABLE_CONDITIONAL wf_vars.no_fog boolean_equals yes}
        [then]
            [modify_side]
                side=1
                fog=no
                shroud=no
            [/modify_side]
        [/then]
    [/if]

    # Restore the units from the end of the last scenario
    [for]
        array=unit_store
        reverse=yes
        [do]
            [if]
                {VARIABLE_CONDITIONAL unit_store[$i].moves numerical_equals $unit_store[$i].max_moves}
                [then]
                    {VARIABLE unit_store[$i].resting yes}
                [/then]
                [else]
                    {VARIABLE unit_store[$i].moves $unit_store[$i].max_moves}
                [/else]
            [/if]
            {VARIABLE unit_store[$i].attacks_left 1}
            [unstore_unit]
                variable=unit_store[$i]
                find_vacant=no
            [/unstore_unit]
        [/do]
    [/for]
    {CLEAR_VARIABLE unit_store}

    # Return villages to their rightful owners
    [for]
        array=village_store
        reverse=yes
        [do]
            [if]
                {VARIABLE_CONDITIONAL village_store[$i].owner_side not_equals 0}
                [then]
                    [capture_village]
                        side=$village_store[$i].owner_side
                        x=$village_store[$i].x
                        y=$village_store[$i].y
                        fire_event=no
                    [/capture_village]
                [/then]
            [/if]
        [/do]
    [/for]
    {CLEAR_VARIABLE village_store}

    # Set the side parameters the same as at the end of last scenario
    #[gold]
    #	side=1
    #	amount=$side_store.income
    #[/gold]
    #[modify_side]
    #	side=1
    #	gold="$($side_store.gold + $side_store.income)"
    #	recruit=$side_store.recruit
    #[/modify_side]
    [if]
        #{VARIABLE_CONDITIONAL buildings.tavern greater_than 0}
        [have_location]
            terrain=*^Yt
            #count=1-99999
        [/have_location]
        [then]
            [modify_side]
                side=1
                income=0
            [/modify_side]
        [/then]
        [else]
            [modify_side]
                side=1
                income=-2
            [/modify_side]
        [/else]
    [/if]
    {CLEAR_VARIABLE side_store}
    [gold]
        side=2
        amount=$gold_store2
    [/gold]
    {CLEAR_VARIABLE gold_store2}
    [gold]
        side=3
        amount=$gold_store3
    [/gold]
    {CLEAR_VARIABLE gold_store3}
    [gold]
        side=4
        amount=$gold_store4
    [/gold]
    {CLEAR_VARIABLE gold_store4}
    [gold]
        side=5
        amount=$gold_store5
    [/gold]
    {CLEAR_VARIABLE gold_store5}
    [gold]
        side=6
        amount=$gold_store6
    [/gold]
    {CLEAR_VARIABLE gold_store6}
    [gold]
        side=7
        amount=$gold_store7
    [/gold]
    {CLEAR_VARIABLE gold_store7}
    [gold]
        side=8
        amount=$gold_store8
    [/gold]
    {CLEAR_VARIABLE gold_store8}
    [gold]
        side=9
        amount=$gold_store9
    [/gold]
    {CLEAR_VARIABLE gold_store9}
    [for]
        array=runes.rune_list
        reverse=yes
        [do]
            # I don't trust remove_item image=
            [switch]
                variable=runes.rune_list[$i].image
                [case]
                    value=1
                    {PLACE_IMAGE scenery/rune1-glow.png $runes.rune_list[$i].x $runes.rune_list[$i].y}
                [/case]
                [case]
                    value=2
                    {PLACE_IMAGE scenery/rune2-glow.png $runes.rune_list[$i].x $runes.rune_list[$i].y}
                [/case]
                [case]
                    value=3
                    {PLACE_IMAGE scenery/rune3-glow.png $runes.rune_list[$i].x $runes.rune_list[$i].y}
                [/case]
                [case]
                    value=4
                    {PLACE_IMAGE scenery/rune4-glow.png $runes.rune_list[$i].x $runes.rune_list[$i].y}
                [/case]
                [case]
                    value=5
                    {PLACE_IMAGE scenery/rune5-glow.png $runes.rune_list[$i].x $runes.rune_list[$i].y}
                [/case]
                [case]
                    value=6
                    {PLACE_IMAGE scenery/rune6-glow.png $runes.rune_list[$i].x $runes.rune_list[$i].y}
                [/case]
            [/switch]

            #[event]
            #    name=moveto
            #    first_time_only=yes
            #    delayed_variable_substitution=no
            #    [filter]
            #        x,y=$runes.rune_list[$i].x,$runes.rune_list[$i].y
            #        [filter_side]
            #            [enemy_of]
            #                side=$runes.rune_list[$i].side
            #            [/enemy_of]
            #        [/filter_side]
            #    [/filter]
            #    #{WF_CALL_FUNCTION "rune" do,x,y="burn",$runes.rune_list[$i].x,$runes.rune_list[$i].y}
            #    [set_variables]
            #        mode=insert
            #        name=param[0]
            #        [value]
            #            do="burn"
            #            x=$runes.rune_list[$i].x
            #            y=$runes.rune_list[$i].y
            #        [/value]
            #    [/set_variables]
            #    [fire_event]
            #        name=rune
            #        [primary_unit]
            #            x=$runes.rune_list[$i].x
            #            y=$runes.rune_list[$i].y
            #        [/primary_unit]
            #    [/fire_event]
            #    [clear_variable]
            #        name=param[0]
            #    [/clear_variable]
            #[/event]
        [/do]
    [/for]
    [foreach]
        array=traps.spike
        reverse=yes
        [do]
            {PLACE_IMAGE "items/burial.png" $this_item.x $this_item.y}
        [/do]
    [/foreach]
    [foreach]
        array=traps.slow
        reverse=yes
        [do]
            {PLACE_IMAGE "projectiles/web.png" $this_item.x $this_item.y}
        [/do]
    [/foreach]

    [event]
        #name=side 1 turn 1 refresh
        name=refresh_season_side1
        id=refresh_season_side1
        first_time_only=yes

#ifver WESNOTH_VERSION < 1.15.0
        {FAKE_REFRESH (side=1)}
#endif
        [heal_unit]
            [filter]
                side=1
            [/filter]
            amount=0
            moves=full
            restore_attacks=yes
            restore_statuses=yes
            animate=no
        [/heal_unit]
        [clear_variable]
            name=heal_amount
        [/clear_variable]
        {MODIFY_UNIT ({FILTER_FOR_WORKER}) moves 0}
        {MODIFY_UNIT ({FILTER_FOR_WORKER}) resting no}
        {MODIFY_UNIT ({FILTER_FOR_WORKER}) attacks_left 0}
    [/event]

    [event]
        #name=side 9 turn 1 refresh
        name=refresh_season_side9
        id=refresh_season_side9
        first_time_only=yes

#ifver WESNOTH_VERSION < 1.15.0
        {FAKE_REFRESH (side=9)}
#endif
        [heal_unit]
            [filter]
                side=9
            [/filter]
            amount=0
            moves=full
            restore_attacks=yes
            restore_statuses=yes
            animate=no
        [/heal_unit]
        [clear_variable]
            name=heal_amount
        [/clear_variable]
    [/event]
#enddef

#define FAKE_REFRESH FILTER
    [heal_unit]
        [filter]
            {FILTER}
        [/filter]
        amount=2
        moves=full
        restore_attacks=yes
        restore_statuses=yes
        animate=no
    [/heal_unit]
    [heal_unit]
        [filter]
            {FILTER}
            [and]
                [filter_location]
                    terrain=*^V*,*^Yt*
                [/filter_location]
                [or]
                    ability=regenerates
                [/or]
            [/and]
        [/filter]
        amount=8
        animate=yes
    [/heal_unit]
    [heal_unit]
        [filter]
            {FILTER}
            [and]
                [not]
                    [filter_location]
                        terrain=*^V*,*^Yt*
                    [/filter_location]
                    [or]
                        ability=regenerates
                    [/or]
                [/not]
                [and]
                    [filter_adjacent]
                        ability=healing
                        is_enemy=no
                    [/filter_adjacent]
                    [not]
                        [filter_adjacent]
                            ability=curing
                            is_enemy=no
                        [/filter_adjacent]
                    [/not]
                [/and]
            [/and]
        [/filter]
        amount=4
        animate=yes
    [/heal_unit]
    [heal_unit]
        [filter]
            {FILTER}
            [and]
                [not]
                    [filter_location]
                        terrain=*^V*,*^Yt*
                    [/filter_location]
                    [or]
                        ability=regenerates
                    [/or]
                [/not]
                [and]
                    [filter_adjacent]
                        ability=curing
                        is_enemy=no
                    [/filter_adjacent]
                [/and]
            [/and]
        [/filter]
        amount=8
        animate=yes
    [/heal_unit]
    [clear_variable]
        name=heal_amount
    [/clear_variable]
#enddef

#define SWITCH_VILLAGE_BASE OLD_BASE NEW_BASE
    # Used to switch between terrain bases underneath buildings
    [terrain]
        terrain={NEW_BASE}
        layer=base
        [and]
            terrain={OLD_BASE}^V*
        [/and]
    [/terrain]
#enddef

#define SWITCH_BUILDING_BASE OLD_BASE NEW_BASE
    # Used to switch between terrain bases underneath buildings
    [terrain]
        terrain={NEW_BASE}
        layer=base
        [and]
            terrain={OLD_BASE}^Y*
        [/and]
    [/terrain]
#enddef

#define SWITCH_TERRAIN_BASE OLD NEW
    # Used to switch between terrain types as the seasons change
    [terrain]
        terrain={NEW}
        layer=base
        [and]
            terrain={OLD}^*
        [/and]
    [/terrain]
#enddef

#define SWITCH_TERRAIN_OVERLAY OLD NEW
    # Used to switch between terrain types as the seasons change
    [terrain]
        terrain=^{NEW}
        layer=overlay
        [and]
            terrain=*^{OLD}
        [/and]
    [/terrain]
#enddef

#define SWITCH_TERRAIN OLD NEW
    # Used to switch between terrain types as the seasons change
    [terrain]
        terrain={NEW}
        [and]
            terrain={OLD}^*
        [/and]
    [/terrain]
#enddef

# ----- Recruiting Macros ------------------------------------------------

#define ALLOW_RECRUIT TYPE
    [set_variables]
        name=tmp_recruit
        mode=replace
        [split]
            list={TYPE}
            key=type
            separator=,
            remove_empty=yes
        [/split]
    [/set_variables]

    {VARIABLE has_list no}
    [foreach]
        array=tmp_recruit
        [do]
            {VARIABLE has_list yes}
            {VARIABLE has_recruit no}
            [for]
                array=recruit_array.list
                reverse=yes
                [do]
                    [if]
                        {VARIABLE_CONDITIONAL recruit_array.list[$i].type equals $this_item.type}
                        [then]
                            {VARIABLE has_recruit yes}
                            {VARIABLE recruit_array.list[$i].allow yes}
                        [/then]
                    [/if]
                [/do]
            [/for]

            [if]
                {VARIABLE_CONDITIONAL has_recruit equals no}
                [then]
                    [store_unit_type]
                        type=$this_item.type
                        variable=recruit_type
                        mode=always_clear
                    [/store_unit_type]

                    [set_variables]
                        name=recruit_array.list
                        mode=append
                        [value]
                            label=$recruit_type.name
                            image=$recruit_type.image
                            type=$this_item.type
                            allow=yes
                            enable=yes
                            side=1
                        [/value]
                    [/set_variables]
                    {CLEAR_VARIABLE recruit_type}
                [/then]
            [/if]
            {CLEAR_VARIABLE has_recruit}
        [/do]
    [/foreach]
    {CLEAR_VARIABLE tmp_recruit}

    [if]
        {VARIABLE_CONDITIONAL has_list equals yes}
        [then]
            [allow_recruit]
                side=1
                type={TYPE}
            [/allow_recruit]
        [/then]
    [/if]
    {CLEAR_VARIABLE has_list}
#enddef

#define DISALLOW_RECRUIT TYPE
    [set_variables]
        name=tmp_recruit
        mode=replace
        [split]
            list={TYPE}
            key=type
            separator=,
            remove_empty=yes
        [/split]
    [/set_variables]

    {VARIABLE has_list no}
    [foreach]
        array=tmp_recruit
        [do]
            {VARIABLE has_list yes}
            [for]
                array=recruit_array.list
                reverse=yes
                [do]
                    [if]
                        {VARIABLE_CONDITIONAL recruit_array.list[$i].type equals $this_item.type}
                        [then]
                            #{VARIABLE recruit_array.list[$i].allow no}
                            {CLEAR_VARIABLE recruit_array.list[$i]}
                        [/then]
                    [/if]
                [/do]
            [/for]
        [/do]
    [/foreach]
    {CLEAR_VARIABLE tmp_recruit}

    [if]
        {VARIABLE_CONDITIONAL has_list equals yes}
        [then]
            [disallow_recruit]
                side=1
                type={TYPE}
            [/disallow_recruit]
        [/then]
    [/if]
    {CLEAR_VARIABLE has_list}
#enddef

#define HEAL_RECALL
    [event]
        # This doesn't actually work yet
        #name=side 1 turn refresh
        name=heal_recall_list
        id=heal_recall_list
        first_time_only=no

        [store_unit]
            [filter]
                side=1
                x,y=recall,recall
                formula="self.hitpoints < self.max_hitpoints"
            [/filter]
            variable=recall_store
            mode=always_clear
            kill=yes
        [/store_unit]
        [for]
            array=recall_store
            reverse=yes
            [do]
                {VARIABLE_OP recall_store[$i].hitpoints add 4}
                [if]
                    {VARIABLE_CONDITIONAL recall_store[$i].hitpoints greater_than $recall_store[$i].max_hitpoints}
                    [then]
                        {VARIABLE recall_store[$i].hitpoints $recall_store[$i].max_hitpoints}
                    [/then]
                [/if]
                [unstore_unit]
                    variable=recall_store[$i]
                    x,y=recall,recall
                [/unstore_unit]
            [/do]
        [/for]
        {CLEAR_VARIABLE recall_store}
    [/event]
#enddef

#define ALLOW_UNRECRUIT
    # Two parts: sets the menu item that causes units to be moved to the recall
    # list, and heals units on the recall list 2 hp per turn (so units moved
    # to the recall list many turns ago are not injured upon their return).
    [set_menu_item]
        id=menu_stand_down
        [filter_location]
            terrain=C*,C*^*,K*,K*^*
            [filter]
                side=1
                [not]
                    id=Hero
                [/not]
            [/filter]
            [and]
                [filter]
                    side=1
                    canrecruit=yes
                    [filter_location]
                        terrain=K*,K*^*
                    [/filter_location]
                [/filter]
                radius=9999
                [filter_radius]
                    terrain=C*,C*^*,K*,K*^*
                [/filter_radius]
            [/and]
        [/filter_location]
        description=_"Stand down"
        #image=""
        [command]
            [store_unit]
                [filter]
                    x,y=$x1,$y1
                [/filter]
                variable=temp_unit
            [/store_unit]
            [if]
                # Unit is loyal, mock the player
                {VARIABLE_CONDITIONAL temp_unit[0].status.norecall boolean_equals yes}
                #[and]
                ##{VARIABLE_CONDITIONAL temp_unit[0].modifications.trait[0].id equals loyal}
                #{VARIABLE_CONDITIONAL temp_unit[0].type equals Caravan}
                #[or]
                #{VARIABLE_CONDITIONAL temp_unit[0].id equals loyal_adept}
                #[/or]
                #[/and]
                [then]
                    [message]
                        id=$temp_unit.id
                        message=_"Eh? Are you trying to get rid of me, boss?

Unfortunately for you, my loyalties are to your father. You're stuck with me, kid."
                    [/message]
                    [message]
                        id=$temp_unit.id
                        message={ASIDE _"What an ungrateful little brat!"}
                    [/message]
                [/then]
                [else]
                    [message]
                        speaker=$temp_unit.id
                        message=_"Are you sure, milord?"
                        [option]
                            label=_"Yes, stand down."
                            default=yes
                            [command]
                                {STOP_PROJECT $x1 $y1}
                                [modify_unit]
                                    [filter]
                                        x,y=$x1,$y1
                                        status=training
                                    [/filter]
                                    [effect]
                                        apply_to=status
                                        remove=training
                                    [/effect]
                                [/modify_unit]
                                [heal_unit]
                                    [filter]
                                        x,y=$x1,$y1
                                    [/filter]
                                    amount=0
                                    moves=full
                                    restore_attacks=yes
                                    restore_statuses=yes
                                    animate=no
                                [/heal_unit]
                                [clear_variable]
                                    name=heal_amount
                                [/clear_variable]
                                [store_unit]
                                    [filter]
                                        x,y=$x1,$y1
                                    [/filter]
                                    variable=recalls.unit_list
                                    mode=append
                                    kill=yes
                                [/store_unit]
                                #[put_to_recall_list]
                                #	id=$temp_unit.id
                                #	heal=no
                                #[/put_to_recall_list]
                                [fire_event]
                                    name=unrecruit
                                    [primary_unit]
                                        id=$temp_unit.id
                                    [/primary_unit]
                                [/fire_event]
                            [/command]
                        [/option]
                        [option]
                            label=_"No, stay here."
                            [command] [/command]
                        [/option]
                    [/message]
                [/else]
            [/if]
            {CLEAR_VARIABLE temp_unit}
        [/command]
    [/set_menu_item]

    [event]
        name=place_recall_list
        id=place_recall_list
        first_time_only=no
        [for]
            array=recalls.unit_list
            reverse=yes
            [do]
                {VARIABLE recalls.unit_list[$i].x recall}
                {VARIABLE recalls.unit_list[$i].y recall}
                {VARIABLE_OP recalls.unit_list[$i].hitpoints add 2}
                [if]
                    {VARIABLE_CONDITIONAL recalls.unit_list[$i].hitpoints greater_than $recalls.unit_list[$i].max_hitpoints}
                    [then]
                        {VARIABLE recalls.unit_list[$i].hitpoints $recalls.unit_list[$i].max_hitpoints}
                    [/then]
                [/if]
                [unstore_unit]
                    variable=recalls.unit_list[$i]
                    x,y=recall,recall
                [/unstore_unit]
            [/do]
        [/for]
        {CLEAR_VARIABLE recalls.unit_list}
        {CLEAR_VARIABLE recalls}
    [/event]

    {HEAL_RECALL}
#enddef

# ----- Map-related macros -----------------------------------------------
# Signs exist near the north, west, south, and east edges of the map, towards
# the middle, representing natural pathways in and out of the area

#define NOT_MAP_SIGNS
    [not]
        [and]
            x=$map_signs[0].x
            y=$map_signs[0].y
            radius=1
        [/and]
    [/not]
    [not]
        [and]
            x=$map_signs[1].x
            y=$map_signs[1].y
            radius=1
        [/and]
    [/not]
    [not]
        [and]
            x=$map_signs[2].x
            y=$map_signs[2].y
            radius=1
        [/and]
    [/not]
    [not]
        [and]
            x=$map_signs[3].x
            y=$map_signs[3].y
            radius=1
        [/and]
    [/not]
#enddef

#define FIND_SIGN_SITE_NEAR X Y DIR
    # store a sign site near a strip centered at X,Y in the variable map_signs
    # dir must be 'x' or 'y'
    {VARIABLE radius_x 0}
    {VARIABLE radius_y 0}
    [while]
        {VARIABLE_CONDITIONAL plains_store.length less_than 1}
        [do]
            [store_locations]
                variable=plains_store
                terrain=G*,R*
                x="$({X}-$radius_x)"-"$({X}+$radius_x)"
                y="$({Y}-$radius_y)"-"$({Y}+$radius_y)"
            [/store_locations]
            {VARIABLE_OP radius_{DIR} add 1}
        [/do]
    [/while]
    {RANDOM_VAR rnd_i 0.."$($plains_store.length-1)"}
    [set_variables]
        name=map_signs
        mode=append
        [value]
            x=$plains_store[$rnd_i].x
            y=$plains_store[$rnd_i].y
            seen=no
        [/value]
    [/set_variables]
    {CLEAR_VARIABLE radius_x}
    {CLEAR_VARIABLE radius_y}
    {CLEAR_VARIABLE plains_store}
    {CLEAR_VARIABLE rnd_i}
#enddef

#define SET_MAP_SIGNS
    {SET_MAP_SIGN 0 (_"From the east will come orcs, traversing the great northern plains in search of easy targets for their raids.")}

    {SET_MAP_SIGN 1 (_"From the north will come orcs, sweeping down from the ragged Heart mountains, filled with a lust for battle.")}

    {SET_MAP_SIGN 2 (_"Little is known of the lands near Wesmere forest. Certainly elves live there, but the Treaty has forbidden raids on human settlements for hundreds of years.")}

    {SET_MAP_SIGN 3 (_"Necromancers and other unsavory scum expelled from the more civilized regions of Wesnoth occasionally approach from the south. Giving them refuge would mean turning your back on the laws of the King.")}
#enddef

#define SET_MAP_SIGN INDEX TUT_MESSAGE
    {PLACE_IMAGE "scenery/signpost.png" $map_signs[{INDEX}].x $map_signs[{INDEX}].y}
    [if]
        {VARIABLE_CONDITIONAL map_signs[{INDEX}].seen boolean_equals no}
        [then]	# Create a (fake) "sighted" event for the signpost
            [event]
                name=moveto
                id=moveto_sign_{INDEX}
                first_time_only=no
                [filter]
                    side=1
                    [filter_location]
                        x,y=$map_signs[{INDEX}].x,$map_signs[{INDEX}].y
                        radius=2 # signpost should be in sight for almost any unit by now
                    [/filter_location]
                [/filter]
                [if]
                    {VARIABLE_CONDITIONAL map_signs[{INDEX}].seen boolean_equals no}
                    [then]
                        {VARIABLE map_signs[{INDEX}].seen yes}
                        {HIGHLIGHT_IMAGE $map_signs[{INDEX}].x $map_signs[{INDEX}].y "scenery/signpost.png" ()}
                        {UNIT_SAYS _"I can see for leagues from here. This is obviously a natural route into this territory."}
                        {TUTORIAL map_signs_any _"On each side of the map you will find a signpost indicating an easy route into and out of your territory. Travelers bearing you either good or ill may may arrive near these signposts. You may find it helpful to station a guard near such areas to give you ample warning of visitors."}
                        {TUTORIAL map_signs{INDEX} {TUT_MESSAGE}}
                    [/then]
                [/if]
            [/event]
        [/then]
    [/if]
#enddef

#define SET_MAP_LABELS
    # Re-place any map labels from the previous scenario on the map
    [for]
        array=labels.map_labels
        reverse=yes
        [do]
            [label]
                x=$labels.map_labels[$i].x
                y=$labels.map_labels[$i].y
                text=$labels.map_labels[$i].text
            [/label]
        [/do]
    [/for]
#enddef

#define ADD_MAP_LABEL X Y TEXT
    # Add the label to the current map
    [label]
        x,y={X},{Y}
        text={TEXT}
    [/label]
    # And store the data so it can be placed on future maps
    [set_variables]
        name=labels.map_labels
        mode=append
        [value]
            x,y={X},{Y}
            text={TEXT}
        [/value]
    [/set_variables]
#enddef

#define CLEAR_MAP_LABEL X Y
    [for]
        array=labels.map_labels
        reverse=yes
        [do]
            [if]
                [and]
                    {VARIABLE_CONDITIONAL labels.map_labels[$i].x numerical_equals {X}}
                    {VARIABLE_CONDITIONAL labels.map_labels[$i].y numerical_equals {Y}}
                [/and]
                [then]
                    [label]
                        x,y={X},{Y}
                        text=""
                    [/label]
                    {CLEAR_VARIABLE labels.map_labels[$i]}
                [/then]
            [/if]
        [/do]
    [/for]
#enddef

#define RESET_TREES_HILLS
    [if]
        {VARIABLE_CONDITIONAL relations.trees less_than 0}
        [then]
            {VARIABLE relations.trees 0}
        [/then]
    [/if]
    [if]
        {VARIABLE_CONDITIONAL relations.hills less_than 0}
        [then]
            {VARIABLE relations.hills 0}
        [/then]
    [/if]
    [if]
        {VARIABLE_CONDITIONAL wf_vars.law_book greater_than 0}
        [then]
            {VARIABLE relations.trees 0}
            {VARIABLE relations.hills 0}
        [/then]
    [/if]
#enddef

#define RESET_SIDES_GOLD
    {VARIABLE i 9}
    [while]
        {VARIABLE_CONDITIONAL i greater_than 1}
        [do]
            [store_gold]
                side=$i
                variable=gold_store
            [/store_gold]
            {VARIABLE_OP gold_store multiply -1}
            [gold]
                side=$i
                amount=$gold_store
            [/gold]
            {VARIABLE_OP i sub 1}
        [/do]
    [/while]

    {CLEAR_VARIABLE gold_store}
    {CLEAR_VARIABLE i}
#enddef

#define RESET_GOLD SIDE
    [store_gold]
        side={SIDE}
        variable=gold_store
    [/store_gold]
    {VARIABLE_OP gold_store multiply -1}
    [gold]
        side={SIDE}
        amount=$gold_store
    [/gold]
    {CLEAR_VARIABLE gold_store}
#enddef

#define OBJECT_LOYAL
    # To avoid taking up a trait slot
    [object]
        #filter is implicit
        [effect]
            apply_to=loyal
        [/effect]
    [/object]
#enddef

#define OBJECT_LOYAL_OVERLAY
    [object]
        #filter is implicit
        [effect]
            apply_to=loyal
            # Same effect as this line in [unit]
            #upkeep=loyal
        [/effect]
        [effect]
            apply_to=overlay
            add="misc/loyal-icon.png"
            # Same effect as this line in [unit]
            #overlays="misc/loyal-icon.png"
        [/effect]
    [/object]
#enddef

#define MOD_OBJECT_LOYAL
    [modifications]
        {OBJECT_LOYAL}
    [/modifications]
#enddef

#define MOD_OBJECT_LOYAL_OVERLAY
    [modifications]
        {OBJECT_LOYAL_OVERLAY}
    [/modifications]
#enddef

#define AMLA_EXTRA
    [event]
        name=start

        [store_unit]
            [filter]
                side=1
                [not]
                    type=Peasant_no_Advance,Woodsman_no_Advance,Ruffian_no_Advance,WF_Lighthouse,WF_Lighthouse_Off,Caravan
                [/not]
                [filter_wml]
                    advances_to=""
                [/filter_wml]
            [/filter]
            variable=amla_extra_start
            kill=no
            mode=always_clear
        [/store_unit]
        [foreach]
            array=amla_extra_start
            [do]
                [fire_event]
                    name=amla_extra_event
                    [primary_unit]
                        id=$this_item.id
                    [/primary_unit]
                [/fire_event]
            [/do]
        [/foreach]
        {CLEAR_VARIABLE amla_extra_start}
    [/event]

    [event]
        name=post advance,recruit,recall,amla_extra_event
        id=amla_post_advance
        first_time_only=no

        [filter]
            side=1
            [not]
                type=Peasant_no_Advance,Woodsman_no_Advance,Ruffian_no_Advance,WF_Lighthouse,WF_Lighthouse_Off,Caravan
            [/not]
            [filter_wml]
                advances_to=""
            [/filter_wml]
        [/filter]

        #[set_variables]
        #    name=amla_canrecruit
        #    mode=replace
        #    [literal]
        #        {AMLA_EXTRA_CANRECRUIT}
        #    [/literal]
        #[/set_variables]
        #[set_variables]
        #    name=amla_loyal
        #    mode=replace
        #    [literal]
        #        {AMLA_EXTRA_LOYAL}
        #    [/literal]
        #[/set_variables]
        #[set_variables]
        #    name=amla_damage
        #    mode=replace
        #    [literal]
        #        {AMLA_EXTRA_DAMAGE}
        #    [/literal]
        #[/set_variables]
        #[set_variables]
        #    name=amla_strike
        #    mode=replace
        #    [literal]
        #        {AMLA_EXTRA_STRIKE}
        #    [/literal]
        #[/set_variables]
        #[set_variables]
        #    name=amla_movement
        #    mode=replace
        #    [literal]
        #        {AMLA_EXTRA_MOVEMENT}
        #    [/literal]
        #[/set_variables]
        #[set_variables]
        #    name=amla_hitpoints
        #    mode=replace
        #    [literal]
        #        {AMLA_EXTRA_HITPOINTS}
        #    [/literal]
        #[/set_variables]

        {VARIABLE remove_canrecruit no}
        {VARIABLE remove_loyal no}
        {VARIABLE has_canrecruit no}
        {VARIABLE has_loyal no}
        {VARIABLE has_damage no}
        {VARIABLE has_strike no}
        {VARIABLE has_movement no}
        {VARIABLE has_hitpoints no}

        [if]
            {VARIABLE_CONDITIONAL unit.upkeep equals loyal}
            [then]
                {VARIABLE remove_canrecruit yes}
                {VARIABLE remove_loyal yes}
            [/then]
        [/if]

        [if]
            {VARIABLE_CONDITIONAL unit.upkeep equals free}
            [then]
                {VARIABLE remove_canrecruit yes}
                {VARIABLE remove_loyal yes}
            [/then]
        [/if]

        [if]
            {VARIABLE_CONDITIONAL unit.canrecruit equals yes}
            [then]
                {VARIABLE remove_canrecruit yes}
                {VARIABLE remove_loyal yes}
            [/then]
        [/if]

        [for]
            array=unit.modifications.advancement
            [do]
                [if]
                    {VARIABLE_CONDITIONAL unit.modifications.advancement[$i].id equals amla_loyal}
                    [then]
                        {VARIABLE remove_loyal no}
                    [/then]
                [/if]
                [if]
                    {VARIABLE_CONDITIONAL unit.modifications.advancement[$i].id equals amla_canrecruit}
                    [then]
                        {VARIABLE remove_canrecruit no}
                    [/then]
                [/if]
            [/do]
        [/for]

        [for]
            array=unit.advancement
            [do]
                [if]
                    {VARIABLE_CONDITIONAL unit.advancement[$i].id equals amla_canrecruit}
                    [then]
                        {VARIABLE has_canrecruit yes}
                    [/then]
                [/if]
                [if]
                    {VARIABLE_CONDITIONAL unit.advancement[$i].id equals amla_loyal}
                    [then]
                        {VARIABLE has_loyal yes}
                    [/then]
                [/if]
                [if]
                    {VARIABLE_CONDITIONAL unit.advancement[$i].id equals amla_damage}
                    [then]
                        {VARIABLE has_damage yes}
                    [/then]
                [/if]
                [if]
                    {VARIABLE_CONDITIONAL unit.advancement[$i].id equals amla_strike}
                    [then]
                        {VARIABLE has_strike yes}
                    [/then]
                [/if]
                [if]
                    {VARIABLE_CONDITIONAL unit.advancement[$i].id equals amla_movement}
                    [then]
                        {VARIABLE has_movement yes}
                    [/then]
                [/if]
                [if]
                    {VARIABLE_CONDITIONAL unit.advancement[$i].id equals amla_hitpoints}
                    [then]
                        {VARIABLE has_hitpoints yes}
                    [/then]
                [/if]
            [/do]
        [/for]

        [if]
            {VARIABLE_CONDITIONAL has_canrecruit equals no}
            {VARIABLE_CONDITIONAL remove_canrecruit equals no}
            [then]
                #insert canrecruit
                #[set_variables]
                #    name=unit.advancement
                #    mode=append
                #    to_variable=amla_canrecruit.advancement
                #[/set_variables]
                [object]
                    [effect]
                        apply_to=new_advancement
                        {AMLA_EXTRA_CANRECRUIT}
                    [/effect]
                [/object]
            [/then]
        [/if]
        [if]
            {VARIABLE_CONDITIONAL has_loyal equals no}
            {VARIABLE_CONDITIONAL remove_loyal equals no}
            [then]
                #insert loyal
                #[set_variables]
                #    name=unit.advancement
                #    mode=append
                #    to_variable=amla_loyal.advancement
                #[/set_variables]
                [object]
                    [effect]
                        apply_to=new_advancement
                        {AMLA_EXTRA_LOYAL}
                    [/effect]
                [/object]
            [/then]
        [/if]
        [if]
            {VARIABLE_CONDITIONAL has_damage equals no}
            [then]
                #insert damage
                #[set_variables]
                #    name=unit.advancement
                #    mode=append
                #    to_variable=amla_damage.advancement
                #[/set_variables]
                [object]
                    [effect]
                        apply_to=new_advancement
                        {AMLA_EXTRA_DAMAGE}
                    [/effect]
                [/object]
            [/then]
        [/if]
        [if]
            {VARIABLE_CONDITIONAL has_strike equals no}
            [then]
                #insert strike
                #[set_variables]
                #    name=unit.advancement
                #    mode=append
                #    to_variable=amla_strike.advancement
                #[/set_variables]
                [object]
                    [effect]
                        apply_to=new_advancement
                        {AMLA_EXTRA_STRIKE}
                    [/effect]
                [/object]
            [/then]
        [/if]
        [if]
            {VARIABLE_CONDITIONAL has_movement equals no}
            [then]
                #insert movement
                #[set_variables]
                #    name=unit.advancement
                #    mode=append
                #    to_variable=amla_movement.advancement
                #[/set_variables]
                [object]
                    [effect]
                        apply_to=new_advancement
                        {AMLA_EXTRA_MOVEMENT}
                    [/effect]
                [/object]
            [/then]
        [/if]
        [if]
            {VARIABLE_CONDITIONAL has_hitpoints equals no}
            [then]
                #insert hitpoints
                #[set_variables]
                #    name=unit.advancement
                #    mode=append
                #    to_variable=amla_hitpoints.advancement
                #[/set_variables]
                [object]
                    [effect]
                        apply_to=new_advancement
                        {AMLA_EXTRA_HITPOINTS}
                    [/effect]
                [/object]
            [/then]
        [/if]

        [if]
            {VARIABLE_CONDITIONAL remove_canrecruit equals yes}
            [then]
                {VARIABLE do_remove_canrecruit no}
                [for]
                    array=unit.advancement
                    reverse=yes
                    [do]
                        [if]
                            {VARIABLE_CONDITIONAL unit.advancement[$i].id equals amla_canrecruit}
                            [then]
                                {VARIABLE do_remove_canrecruit yes}
                                #{CLEAR_VARIABLE unit.advancement[$i]}
                            [/then]
                        [/if]
                    [/do]
                [/for]
                [if]
                    {VARIABLE_CONDITIONAL do_remove_canrecruit boolean_equals yes}
                    [then]
                        [object]
                            [effect]
                                apply_to=remove_advancement
                                amlas=amla_canrecruit
                            [/effect]
                        [/object]
                    [/then]
                [/if]
                {CLEAR_VARIABLE do_remove_canrecruit}
            [/then]
        [/if]
        [if]
            {VARIABLE_CONDITIONAL remove_loyal equals yes}
            [then]
                {VARIABLE do_remove_loyal no}
                [for]
                    array=unit.advancement
                    reverse=yes
                    [do]
                        [if]
                            {VARIABLE_CONDITIONAL unit.advancement[$i].id equals amla_loyal}
                            [then]
                                {VARIABLE do_remove_loyal yes}
                                #{CLEAR_VARIABLE unit.advancement[$i]}
                            [/then]
                        [/if]
                    [/do]
                [/for]
                [if]
                    {VARIABLE_CONDITIONAL do_remove_loyal boolean_equals yes}
                    [then]
                        [object]
                            [effect]
                                apply_to=remove_advancement
                                amlas=amla_loyal
                            [/effect]
                        [/object]
                    [/then]
                [/if]
                {CLEAR_VARIABLE do_remove_loyal}
            [/then]
        [/if]

        # [unstore_unit]
        #     variable=unit
        #     find_vacant=no
        # [/unstore_unit]

        {CLEAR_VARIABLE remove_canrecruit}
        {CLEAR_VARIABLE remove_loyal}
        {CLEAR_VARIABLE has_canrecruit}
        {CLEAR_VARIABLE has_loyal}
        {CLEAR_VARIABLE has_damage}
        {CLEAR_VARIABLE has_strike}
        {CLEAR_VARIABLE has_movement}
        {CLEAR_VARIABLE has_hitpoints}
        #{CLEAR_VARIABLE amla_canrecruit}
        #{CLEAR_VARIABLE amla_loyal}
        #{CLEAR_VARIABLE amla_damage}
        #{CLEAR_VARIABLE amla_strike}
        #{CLEAR_VARIABLE amla_movement}
        #{CLEAR_VARIABLE amla_hitpoints}
    [/event]
#enddef

#define LOYAL_AMLA
    {AMLA_EXTRA}

    {TUT_EVENT ardonna_advance (
        [event]
            name=post advance
            id=ardonna_advance
            first_time_only=yes
            [filter]
                side=1
                id=loyal_adept
                level=3
                #[filter_wml]
                #	advances_to=""
                #[/filter_wml]
            [/filter]

            {VARIABLE tutorial.ardonna_advance yes}
            [remove_event]
                id=remove_ardonna_event
            [/remove_event]

            [event]
                name=side 9 turn end
                [filter_condition]
                    [have_unit]
                        side=1
                        id=loyal_adept
                        search_recall_list=no
                    [/have_unit]
                [/filter_condition]

                [store_unit]
                    variable=ardonna_unit
                    kill=no
                    mode=always_clear
                    [filter]
                        side=1
                        id=loyal_adept
                    [/filter]
                [/store_unit]
                {STOP_PROJECT $ardonna_unit.x $ardonna_unit.y}

                {SPEAKER_SAYS loyal_adept _"At last, I have gathered enough power for my grand magic. ARISE MINIONS!"}
                [store_locations]
                    variable=zombie_village
                    terrain=*^V*
                [/store_locations]
                [foreach]
                    array=zombie_village
                    [do]
                        {RANDOM_VAR undead_type ("Dark Adept","Ghost","Ghoul","Skeleton","Skeleton Archer","Walking Corpse","Soulless")}
                        [unit]
                            animate=yes
                            passable=yes
                            placement=map
                            random_traits=yes
                            side=1
                            type=$undead_type
                            x=$this_item.x
                            y=$this_item.y
                            role=ardonna_army
                        [/unit]
                        {CLEAR_VARIABLE undead_type}
                    [/do]
                [/foreach]
                {CLEAR_VARIABLE zombie_village}
                {FOOL_SAYS _"Eek! The undead! They are everywhere!"}
                {CYNIC_SAYS _"T-this is impossible! How did you set up such a huge magic ritual without our notice?"}
                {SPEAKER_SAYS loyal_adept _"I was sent to this distant land while guarded only by philistines without the slightest knowledge of magic. Was it really any surprise that none of you noticed?"}
                [if]
                    [have_unit]
                        side=1
                        id=loyal_mage
                        search_recall_list=no
                    [/have_unit]
                    [then]
                        [set_variable]
                            name=wf_vars.prisoner_bonus
                            value=2
                        [/set_variable]
                        [modify_unit]
                            [filter]
                                side=1
                                id=loyal_adept
                            [/filter]
                            [effect]
                                apply_to=status
                                remove=norecall
                            [/effect]
                        [/modify_unit]
                        [modify_unit]
                            [filter]
                                side=1
                                role=ardonna_army
                            [/filter]
                            role=
                        [/modify_unit]
                        {SPEAKER_SAYS loyal_mage _"Ahem, forgetting someone?"}
                        {SPEAKER_SAYS loyal_adept _"Oh crap."}
                        {SPEAKER_SAYS loyal_mage _"*Yoink*."}
                        {SPEAKER_SAYS loyal_adept _"No no no!!"}
                        {FOOL_SAYS _"What is happening?"}
                        {SPEAKER_SAYS loyal_mage _"Oh nothing much. Some overconfident fool set up a ritual right under my nose, so I added a few changes to it. Fancy work by the way. You obscured what the ritual did quite well, but making it believe that I was its true caster? Easy."}
                        {ADVISOR_SAYS _"So now the undead army work for you?"}
                        {SPEAKER_SAYS loyal_mage _"Yes, they do."}
                        {SPEAKER_SAYS loyal_adept _"Damn it all!"}
                        {DELFADOR_SAYS _"You now may stand down Ardonna and place her on the recall list."}
                    [/then]
                    [else]
                        {ADVISOR_SAYS _"Everybody calm down! This undead army is large, but weak. If you think this is enough to defeat us, then you are sorely mistaken!"}
                        {SPEAKER_SAYS loyal_adept _"Then it is a good thing that I have no intention of defeating you, only to bargain for my freedom."}
                        {HERO_SAYS _"A bargain is it? Well then, state your terms."}
                        {SPEAKER_SAYS loyal_adept _"I offer you two options. First option, activate the enchantment of flame that your father's mages placed around my neck, and fight me. Then my army will rampage through your city, and drown your people in a tide of rotting flesh. The greatest few among you like your advisor may survive and eventually destroy my army, but at what cost?"}
                        {SPEAKER_SAYS loyal_adept _"Second option, you can release me, allow me to flee beyond the range of your control runes, and I shall relinquish control over my undead army to you, leave, and never return to your lands. No lives will be lost this day."}
                        {CYNIC_SAYS _"I like that option! Please choose option two!"}
                        {ADVISOR_SAYS _"You think we want your undead?"}
                        {SPEAKER_SAYS loyal_adept _"If you do not want them, then simply have them stand down and dismiss the magic that animates them. It makes no difference to me, for I shall be long gone. Now choose: accept my bargain and everyone gets to live, or refuse and stain your city with blood!"}
                        [message]
                            speaker=Hero
                            message=_"I choose ..."
                            [option]
                                label=_"to fight you."
                                default=yes
                                [command]
                                    [if]
                                        {VARIABLE_CONDITIONAL wf_vars.prisoner_bonus less_than 2}
                                        [then]
                                            [set_variable]
                                                name=wf_vars.prisoner_bonus
                                                value=0
                                            [/set_variable]
                                        [/then]
                                    [/if]
                                    [modify_unit]
                                        [filter]
                                            side=1
                                            id=loyal_adept
                                        [/filter]
                                        side=7
                                    [/modify_unit]
                                    [modify_unit]
                                        [filter]
                                            side=1
                                            role=ardonna_army
                                        [/filter]
                                        side=7
                                    [/modify_unit]
                                    {WF_SCROLL_UNIT (id=loyal_adept)}
                                    # Lifted from: Heroes
                                    [item]
                                        x,y=$ardonna_unit.x,$ardonna_unit.y
                                        halo="projectiles/fireball-impact-[1~16].png~SCALE(300,300):80"
                                    [/item]
                                    [sound]
                                        name=flame-big.ogg
                                    [/sound]
                                    [delay]
                                        time=1100
                                    [/delay]
                                    [remove_item]
                                        x,y=$ardonna_unit.x,$ardonna_unit.y
                                        image="projectiles/fireball-impact-[1~16].png~SCALE(300,300):80"
                                    [/remove_item]
                                    [harm_unit]
                                        [filter]
                                            side=7
                                            id=loyal_adept
                                        [/filter]
                                        amount=20
                                        kill=no
                                        damage_type=fire
                                        animate=yes
                                        fire_event=no
                                    [/harm_unit]
                                    {SPEAKER_SAYS loyal_adept _"Fool! You shall regret this decision."}
                                    {ADVISOR_SAYS _"To arms!"}
                                    [store_locations]
                                        variable=zombie_village
                                        #terrain=*,*^*
                                        [filter]
                                            side=7
                                            race=human
                                        [/filter]
                                    [/store_locations]
                                    {VARIABLE x1_bak $x1}
                                    {VARIABLE y1_bak $y1}
                                    [foreach]
                                        array=zombie_village
                                        [do]
                                            {VARIABLE x1 $this_item.x}
                                            {VARIABLE y1 $this_item.y}

                                            [fire_event]
                                                name=burn_buildings
                                                [primary_unit]
                                                    x=$x1
                                                    y=$y1
                                                [/primary_unit]
                                            [/fire_event]
                                            [fire_event]
                                                name=burn_lighthouse
                                                [primary_unit]
                                                    x=$x1
                                                    y=$y1
                                                [/primary_unit]
                                            [/fire_event]
                                            [fire_event]
                                                name=burn_farms
                                                [primary_unit]
                                                    x=$x1
                                                    y=$y1
                                                [/primary_unit]
                                            [/fire_event]
                                        [/do]
                                    [/foreach]
                                    {VARIABLE x1 $x1_bak}
                                    {VARIABLE y1 $y1_bak}
                                    {CLEAR_VARIABLE x1_bak}
                                    {CLEAR_VARIABLE y1_bak}
                                    {CLEAR_VARIABLE zombie_village}
                                    [capture_village]
                                        [filter]
                                            side=7
                                        [/filter]
                                        fire_event=no
                                    [/capture_village]
                                    #TODO: Make Ardonna runes harmful to side 1
                                [/command]
                            [/option]
                            [option]
                                label=_"to release you."
                                [command]
                                    [set_variable]
                                        name=wf_vars.prisoner_bonus
                                        value=2
                                    [/set_variable]
                                    [modify_unit]
                                        [filter]
                                            side=1
                                            role=ardonna_army
                                        [/filter]
                                        role=
                                    [/modify_unit]
                                    {SPEAKER_SAYS loyal_adept _"You have made a wise decision, Goodbye."}
                                    [kill]
                                        side=1
                                        animate=no
                                        id=loyal_adept
                                        fire_event=no
                                    [/kill]
                                    {FOOL_SAYS _"Was this truly the best choice?"}
                                    {CYNIC_SAYS _"My head remains safely attached to my body, so I would say Yes!"}
                                [/command]
                            [/option]
                            [option]
                                label=_"to invoke my undead privilege."
                                [show_if]
                                    {VARIABLE_CONDITIONAL wf_vars.prisoner_bonus greater_than 1}
                                [/show_if]
                                [command]
                                    [set_variable]
                                        name=wf_vars.prisoner_bonus
                                        value=2
                                    [/set_variable]
                                    [modify_unit]
                                        [filter]
                                            side=1
                                            id=loyal_adept
                                        [/filter]
                                        [effect]
                                            apply_to=status
                                            remove=norecall
                                        [/effect]
                                    [/modify_unit]
                                    [modify_unit]
                                        [filter]
                                            side=1
                                            role=ardonna_army
                                        [/filter]
                                        role=
                                    [/modify_unit]
                                    {HERO_SAYS _"Foolish knave! Have you forgotten that I am on good standings with the undead?"}
                                    {HERO_SAYS _"They answer to me, not you!"}
                                    {SPEAKER_SAYS loyal_adept _"Curses upon you!"}
                                    {DELFADOR_SAYS _"You now may stand down Ardonna and place her on the recall list."}
                                [/command]
                            [/option]
                        [/message]
                    [/else]
                [/if]
                {CLEAR_VARIABLE ardonna_unit}
            [/event]
        [/event]
        [event]
            name=turn end
            id=remove_ardonna_event
            first_time_only=yes
            [filter_condition]
                [have_unit]
                    side=1
                    id=loyal_adept
                    count=0
                [/have_unit]
            [/filter_condition]
            {VARIABLE tutorial.ardonna_advance yes}
            [remove_event]
                id=ardonna_advance
            [/remove_event]
        [/event]
    )}
#enddef

#define WF_RANDOM_PLACEMENT OLD NEW
    [random_placement]
        {NUM_ITEMS 2}
        variable=random_placement_location
        allow_less=yes
        min_distance=1
        [filter_location]
            {NOT_FILTER}
            terrain={OLD}
            include_borders=no
        [/filter_location]
        [command]
            [set_variable]
                name=rand_newt
                rand={NEW}
            [/set_variable]
            [terrain]
                x,y=$random_placement_location.x,$random_placement_location.y
                terrain=$rand_newt
            [/terrain]
            [clear_variable]
                name=rand_newt
            [/clear_variable]
        [/command]
    [/random_placement]
    {CLEAR_VARIABLE random_placement_location}
#enddef

#define WF_JITTER REL_VAR
#arg NOISE
"-6..12"#endarg
    {RANDOM_VAR rnd_rel {NOISE}}
    {VARIABLE_OP rnd_rel multiply {ENEMY_STEP}}
    {VARIABLE_OP {REL_VAR} sub $rnd_rel}
    {CLEAR_VARIABLE rnd_rel}
#enddef

#define FALLBACK_UNIT ID X Y
    [object]
        id=fallback
        take_only_once=no
        silent=yes
        duration=scenario  # So this object will not be in the save files forever.
        [filter]
            id={ID}
            x,y={X},{Y}
        [/filter]
        [effect]
            apply_to=new_ability
            [abilities]
                [dummy] # ability type
                    id=fallback # ability
                    name= _ "fallback"
                    female_name= _ "female^fallback"
                    description=_ "Unit is cautious and defensive."
                [/dummy]
            [/abilities]
        [/effect]
    [/object]
#enddef

#define FALLIN_UNIT ID X Y
    [remove_object]
        id={ID}
        x,y={X},{Y}
        object_id=fallback
    [/remove_object]
#enddef

#define GUARD_UNIT ID X Y
    [object]
        id=guard
        take_only_once=no
        silent=yes
        duration=scenario  # So this object will not be in the save files forever.
        [filter]
            id={ID}
            x,y={X},{Y}
        [/filter]
        [effect]
            apply_to=new_ability
            [abilities]
                [dummy] # ability type
                    id=guard # ability
                    name= _ "guard"
                    female_name= _ "female^guard"
                    description=_ "Unit is on guard."
                [/dummy]
            [/abilities]
        [/effect]
        #[effect]
        #    apply_to=status
        #    add=guardian
        #[/effect]
    [/object]
    {ASSIGN_UNIT_STATUS {X} {Y} guardian}
#enddef

#define RELIEVE_UNIT ID X Y
    [remove_object]
        id={ID}
        x,y={X},{Y}
        object_id=guard
    [/remove_object]
    {REMOVE_UNIT_STATUS {X} {Y} guardian}
#enddef

#define CRAVEN_UNIT ID X Y
    [object]
        id=coward
        take_only_once=no
        silent=yes
        duration=scenario  # So this object will not be in the save files forever.
        [filter]
            id={ID}
            x,y={X},{Y}
        [/filter]
        [effect]
            apply_to=new_ability
            [abilities]
                [dummy] # ability type
                    id=coward # ability
                    name= _ "coward"
                    female_name= _ "female^coward"
                    description=_ "Unit is craven."
                [/dummy]
            [/abilities]
        [/effect]
    [/object]
#enddef

#define BRAVE_UNIT ID X Y
    [remove_object]
        id={ID}
        x,y={X},{Y}
        object_id=coward
    [/remove_object]
#enddef

#define DRUNK_UNIT ID X Y
    [object]
        id=tavern
        take_only_once=no
        silent=yes
        duration=scenario  # So this object will not be in the save files forever.
        [filter]
            id={ID}
            x,y={X},{Y}
        [/filter]
        [effect]
            apply_to=new_ability
            [abilities]
                [dummy] # ability type
                    id=tavern # ability
                    name= _ "tavern"
                    female_name= _ "female^tavern"
                    description=_ "Unit is getting drunk."
                [/dummy]
            [/abilities]
        [/effect]
    [/object]
#enddef

#define SOBER_UNIT ID X Y
    [remove_object]
        id={ID}
        x,y={X},{Y}
        object_id=tavern
    [/remove_object]
#enddef

# Lifted from: The_Founding_of_Borstep
#define FREEZE_UNIT ID X Y
    [object]
        id=freezer
        take_only_once=no
        silent=yes
        duration=scenario  # So this object will not be in the save files forever.
        [filter]
            id={ID}
            x,y={X},{Y}
            # Check the movement_cost of the current hex to make sure the unit is
            # not already frozen:
            movement_cost=1-49
        [/filter]
        [effect]
            apply_to=new_ability
            [abilities]
                [dummy] # ability type
                    id=frozen # ability
                    name= _ "sentry"
                    female_name= _ "female^sentry"
                    description=_ "Unit is holding this position."
                [/dummy]
            [/abilities]
        [/effect]
        [effect]
            apply_to=movement_costs
            replace=no  # So this amount is added to the current number.
            [movement_costs]
                frozen=50
                castle=50
                sand=50
                forest=50
                flat=50
                hills=50
                mountains=50
                unwalkable=50
                swamp_water=50
                fungus=50
                cave=50
                village=50
                deep_water=50
                reef=50
                shallow_water=50
                impassable=50
            [/movement_costs]
        [/effect]
    [/object]
#enddef

#define THAW_UNIT ID X Y
    [remove_object]
        id={ID}
        x,y={X},{Y}
        object_id=freezer
    [/remove_object]
#enddef

#define WF_MISC_EVENTS
    [event]
        name=start
        first_time_only=yes

        [if]
            [variable]
                name=recruit_array.list.length
                less_than=1
            [/variable]
            [then]
                [get_recruit_list]
                    [filter_side]
                        side=1
                    [/filter_side]
                    variable=recruit_list
                [/get_recruit_list]
                {ALLOW_RECRUIT $recruit_list.recruit_list}
                {CLEAR_VARIABLE recruit_list}
            [/then]
        [/if]

#ifhave ~add-ons/Wild_Frontiers/custom/umc_player.cfg
        {ALLOW_RECRUIT {WF_UMC_PLAYER}}
#endif

        [unhide_unit]
        [/unhide_unit]
    [/event]
    #[event]
    #	name=turn end
    #	id=hidden_unit_bug1
    #	first_time_only=no
    #	[unhide_unit]
    #	[/unhide_unit]
    #[/event]
    [event]
        name=unit placed
        first_time_only=no
        [filter]
        [/filter]
        {VARIABLE last_unit_id $unit.id}
    [/event]
    {WF_ORDERED_EVENTS}
#enddef

#define WF_WORK_FASTER
    [if]
        {VARIABLE_CONDITIONAL wf_vars.work_faster boolean_equals no}
        [then]
            {VARIABLE wf_vars.work_faster yes}
            {VARIABLE king_turns $proj_turns.king}
            [set_variables]
                name=proj_turns
                mode=replace
                [value]
                    {FAST_TURNS}
                [/value]
            [/set_variables]
            {VARIABLE proj_turns.king $king_turns}
            {CLEAR_VARIABLE king_turns}
        [/then]
    [/if]
#enddef

#define WF_SCROLL_UNIT FILTER
    [scroll_to_unit]
        {FILTER}
        #highlight=yes
        check_fogged=no # no: Scroll into foggy areas
    [/scroll_to_unit]
    #[scroll_to]
    #	[filter]
    #		{FILTER}
    #	[/filter]
    #	#highlight=yes
    #	check_fogged=no # no: Scroll into foggy areas
    #[/scroll_to]
#enddef

#define WF_CALL_FUNCTION EVENT_NAME PARAMETER_WML
    # This will fire an event with a set of parameters, for example:
    #! {WF_CALL_FUNCTION my_event a,b,c=1,2,3}
    #
    # That example would fire an event with name "my_event"
    # and inside that event, $param.c will be equal to "3"
    # This will hold true even if the event is fired recursively
    [set_variables]
        mode=insert
        name=param[0]
        [value]
            {PARAMETER_WML}
        [/value]
    [/set_variables]
    [fire_event]
        name={EVENT_NAME}
        [primary_unit]
            x=$x1
            y=$y1
        [/primary_unit]
        #[secondary_unit]
        #    x=$x2
        #    y=$y2
        #[/secondary_unit]
    [/fire_event]
    [clear_variable]
        name=param[0]
    [/clear_variable]
#enddef

#define FAKE_SIGHTED FACTION ENEMY_SIDE
    [event]
        name=sighted,attack
        id=sighted_{FACTION}
        first_time_only=yes

        [filter]	# Primary unit is the one sighted
            {ENEMY_SIDE}
        [/filter]
        [filter_second]
            side=1
        [/filter_second]

        [fire_event]
            name={FACTION}_sighted
            [primary_unit]
                x,y=$unit.x,$unit.y
            [/primary_unit]
            [secondary_unit]
                x,y=$second_unit.x,$second_unit.y
            [/secondary_unit]
        [/fire_event]
    [/event]

    [event]
        #Fake sighted on attack
        name=attack
        id=sighted_attack_{FACTION}
        first_time_only=yes

        [filter]
            side=1
        [/filter]
        [filter_second] # Secondary unit is the one sighted
            {ENEMY_SIDE}
        [/filter_second]

        [fire_event]
            name={FACTION}_sighted
            [primary_unit]
                x,y=$second_unit.x,$second_unit.y
            [/primary_unit]
            [secondary_unit]
                x,y=$unit.x,$unit.y
            [/secondary_unit]
        [/fire_event]
    [/event]

    [event]
        #Fake sighted on move
        name=moveto
        id=fake_sighted_{FACTION}
        first_time_only=yes

        [filter]	# Primary unit is the one sighted
            x,y=$x1,$y1
            {ENEMY_SIDE}
            [and]
                [filter_vision]
                    side=1
                    visible=yes
                    respect_fog=yes
                [/filter_vision]
            [/and]
        [/filter]
        [filter_condition]
            [have_location]
                [filter]
                    side=1
                [/filter]
                [and]
                    x,y=$x1,$y1
                    radius=6
                [/and]
            [/have_location]
        [/filter_condition]

        [store_locations]
            [filter]
                side=1
            [/filter]
            [and]
                x,y=$x1,$y1
                radius=6
            [/and]
            variable=second_loc
        [/store_locations]

        [fire_event]
            name={FACTION}_sighted
            [primary_unit]
                x,y=$x1,$y1
            [/primary_unit]
            [secondary_unit]
                x,y=$second_loc.x,$second_loc.y
            [/secondary_unit]
        [/fire_event]
        {CLEAR_VARIABLE second_loc}
    [/event]
#enddef

#define SURPRISE_TENT
#arg RND
"friend,friend,friend,friend,foe,gold"#endarg

    # Surprise tent
    [store_locations]
        include_borders=no
        terrain=H*,H*^E*
        variable=hill_store
        {NOT_FILTER}
        {NOT_FILTER_ADJACENT}
        {X_AND_Y_ARE_ON_THE_MAP}
    [/store_locations]
    [if]
        {VARIABLE_CONDITIONAL hill_store.length greater_than 0}
        [then]
            {RANDOM_VAR rnd_h 0.."$($hill_store.length-1)"}
            [item]
                x,y=$hill_store[$rnd_h].x,$hill_store[$rnd_h].y
                image=scenery/tent-fancy-red.png
                visible_in_fog=yes
            [/item]
            [event]
                name=moveto
                id=moveto_surprise
                first_time_only=no
                delayed_variable_substitution=no
                [filter]
                    side=1
                    [not]
                        type=Caravan
                    [/not]
                    x,y=$hill_store[$rnd_h].x,$hill_store[$rnd_h].y
                [/filter]
                [message]
                    speaker=unit
                    message=_"Someone has set up a tent here. Should I look inside?"
                    [option]
                        label=_"Yes"
                        [command]
                            {RANDOM_VAR rnd_surprise {RND}}
                            [switch]
                                variable=rnd_surprise
                                [case]
                                    value=gold
                                    [message]
                                        speaker=unit
                                        message= _ "Looks like someone left some supplies here."
                                    [/message]
                                    [sound]
                                        name=gold.ogg
                                    [/sound]
                                    {RANDOM_VAR extra_gold 70..80}
                                    [gold]
                                        side=1
                                        amount=$|extra_gold
                                    [/gold]
                                    {CLEAR_VARIABLE extra_gold}
                                [/case]
                                [case]
                                    value=friend
                                    {RANDOM_VAR rnd_type {SURPRISE_FRIEND}}
                                    [unit]
                                        side=1
                                        animate=yes
                                        passable=yes
                                        placement=map
                                        random_traits=yes
                                        type=$|rnd_type
                                        x,y=$hill_store[$rnd_h].x,$hill_store[$rnd_h].y
                                    [/unit]
                                    {VARIABLE friend_unit_id $|last_unit_id}
                                    [fire_event]
                                        name=amla_extra_event
                                        [primary_unit]
                                            id=$|last_unit_id
                                        [/primary_unit]
                                    [/fire_event]
                                    [unhide_unit]
                                    [/unhide_unit]
                                    [message]
                                        id=$|friend_unit_id
                                        message=_"You have a just cause, my lord. Allow me to fight in your ranks."
                                    [/message]
                                    {CLEAR_VARIABLE friend_unit_id}
                                    {CLEAR_VARIABLE rnd_type}
                                [/case]
                                [case]
                                    value=foe
                                    {RANDOM_VAR rnd_type {SURPRISE_FOE}}
                                    [unit]
                                        side=4
                                        animate=yes
                                        passable=yes
                                        placement=map
                                        random_traits=yes
                                        type=$|rnd_type
                                        role=foe
                                        x,y=$hill_store[$rnd_h].x,$hill_store[$rnd_h].y
                                    [/unit]
                                    [unhide_unit]
                                    [/unhide_unit]
                                    [message]
                                        role=foe
                                        message=_"How dare you disturb my sleep, knave. You shall pay for this!"
                                    [/message]
                                    [modify_unit]
                                        [filter]
                                            role=foe
                                        [/filter]
                                        role=""
                                    [/modify_unit]
                                    {CLEAR_VARIABLE rnd_type}
                                [/case]
                            [/switch]
                            {CLEAR_VARIABLE rnd_surprise}
                            [remove_item]
                                x,y=$hill_store[$rnd_h].x,$hill_store[$rnd_h].y
                                image=scenery/tent-fancy-red.png
                            [/remove_item]
                            [remove_event]
                                id=moveto_surprise
                            [/remove_event]
                        [/command]
                    [/option]
                    [option]
                        label=_"No"
                        default=yes
                        [command]
                        [/command]
                    [/option]
                [/message]
            [/event]
            {CLEAR_VARIABLE rnd_h}
            {CLEAR_VARIABLE hill_store}
        [/then]
    [/if]
#enddef

#define WF_REPEAT NUMBER BODY_WML
    # Macro to execute some WML a defined number of times.
    #
    # Example that causes screen to quake 5 times:
    #! {REPEAT 5 (
    #!     {QUAKE "rumble.ogg"}
    #! )}
    {VARIABLE REPEAT_i 0}

    [while]
        [variable]
            name=REPEAT_i
            less_than={NUMBER}
        [/variable]
        [variable]
            name=REPEAT_b
            less_than={BLOB_LIMIT}
        [/variable]

        [do]
            {BODY_WML}

            {VARIABLE_OP REPEAT_i add 1}
        [/do]
    [/while]

    {CLEAR_VARIABLE REPEAT_i}
#enddef
