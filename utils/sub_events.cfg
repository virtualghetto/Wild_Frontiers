#textdomain wesnoth-Wild_Frontiers

#define SHARED_FIEF_EVENTS
    [event]
        name=recruit
        first_time_only=no
        [filter]
            [not]
                side=1
            [/not]
        [/filter]

        [object]
            #silent=yes
            #duration=forever
            #[filter]
            #    side={SIDE}
            #    canrecruit=yes
            #[/filter]
            [effect]
                apply_to=movement_costs
                replace=yes
                [movement_costs]
                    unwalkable={UNREACHABLE}
                [/movement_costs]
            [/effect]
        [/object]

#ifdef EASY
        {RANDOM_VAR autoadv (no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,yes)}
#endif
#ifdef NORMAL
        {RANDOM_VAR autoadv (no,no,no,no,no,no,no,no,no,yes)}
#endif
#ifdef HARD
        {RANDOM_VAR autoadv (no,no,no,no,yes)}
#endif
        [if]
            [and]
                {VARIABLE_CONDITIONAL autoadv boolean_equals yes}
                {VARIABLE_CONDITIONAL unit.level less_than 2}
                {VARIABLE_CONDITIONAL wf_vars.season greater_than_equal_to 4}
            [/and]
            [then]
                [modify_unit]
                    [filter]
                        id=$unit.id
                    [/filter]
                    experience = "$($this_unit.max_experience)"
                [/modify_unit]
            [/then]
        [/if]
        {CLEAR_VARIABLE autoadv}
    [/event]
#enddef

#define SHARED_SUB_EVENTS
    {WF_RAND_CHOICE_EVENT}
    {ALLOW_SUBSCENE_PROJECTS}

    [event]
        name=die,check_objectives,turn end,enemies defeated
        first_time_only=no

        [if]
            [not]
                [have_unit]
                    [filter_side]
                        [enemy_of]
                            side=1
                        [/enemy_of]
                    [/filter_side]
                [/have_unit]
            [/not]
            [and]
                {VARIABLE_CONDITIONAL objective_goal numerical_equals 0}
            [/and]
            [then]
                #{FIEF_GOLD_REWARD}

                [fire_event]
                    name=victory_message
                [/fire_event]

                {CHAIN_VICTORY}
            [/then]
        [/if]
    [/event]

    [event]
        name=last breath
        [filter]
            id=Hero
        [/filter]
        [fire_event]
            name=defeat_message
        [/fire_event]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]

    [event]
        name=time over

        [fire_event]
            name=time_over_message
        [/fire_event]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]

    [event]
        name=start
        {CLEAR_VARIABLE placed_items_locs}
    [/event]

    [event]
        name=wf_victory

        [fire_event]
            name=stop_sub_projects
        [/fire_event]

        {CLEAR_VARIABLE placed_items_locs}

        # restore gold
        [wf_gold]
            side=1
            amount=0
            reset=yes
        [/wf_gold]
        [gold]
            side=1
            amount=$stash_gold
        [/gold]
        {CLEAR_VARIABLE stash_gold}

        # heal/unpoison side 1
        [heal_unit]
            [filter]
                side=1
            [/filter]
            amount=full
            moves=full
            restore_attacks=yes
            restore_statuses=yes
            animate=no
        [/heal_unit]
        [clear_variable]
            name=heal_amount
        [/clear_variable]

        {VARIABLE hero_x $old_hero_store.x}
        {VARIABLE hero_y $old_hero_store.y}

        # So not to lose the original recall list
        [modify_side]
            side=1
            defeat_condition=never
        [/modify_side]

        # Save the upgraded hero
        [store_unit]
            variable=old_hero_store
            mode=always_clear
            kill=no
            [filter]
                id=Hero
            [/filter]
        [/store_unit]
        {VARIABLE old_hero_store.x $hero_x}
        {VARIABLE old_hero_store.y $hero_y}
        #{CLEAR_VARIABLE old_hero_store.status.poisoned}
        #{CLEAR_VARIABLE old_hero_store.status.slowed}
        #{CLEAR_VARIABLE old_hero_store.status.uncovered}
        {CLEAR_VARIABLE hero_x}
        {CLEAR_VARIABLE hero_y}

        [if]
            {VARIABLE_CONDITIONAL append_hero boolean_equals no}
            [then]
                # Going to another sub-scenario

                # Save the recruited units
                [store_unit]
                    variable=crew_store
                    mode=always_clear
                    kill=yes # otherwise they will also appear on recall list
                    [filter]
                        side=1
                        [not]
                            id=Hero
                        [/not]
                    [/filter]
                [/store_unit]
                [for]
                    array=crew_store
                    reverse=yes
                    [do]
                        {VARIABLE crew_store[$i].x recall}
                        {VARIABLE crew_store[$i].y recall}
                        #{CLEAR_VARIABLE crew_store[$i].status.poisoned}
                        #{CLEAR_VARIABLE crew_store[$i].status.slowed}
                        #{CLEAR_VARIABLE crew_store[$i].status.uncovered}
                        [unstore_unit]
                            variable=crew_store[$i]
                            x,y=recall,recall
                        [/unstore_unit]
                    [/do]
                [/for]

                {CLEAR_VARIABLE crew_store}
                # Remove hero so he won't get added to the recall list
                [kill]
                    id=Hero
                    animate=no
                    fire_event=no
                [/kill]
            [/then]
            [else]
                # Going back to the main map

                # Save the recruited units
                [store_unit]
                    variable=crew_store
                    mode=always_clear
                    kill=yes # otherwise they will also appear on recall list
                    [filter]
                        side=1
                        [not]
                            id=Hero
                        [/not]
                    [/filter]
                [/store_unit]
                [for]
                    array=crew_store
                    reverse=yes
                    [do]
                        {VARIABLE crew_store[$i].x recall}
                        {VARIABLE crew_store[$i].y recall}
                        #{CLEAR_VARIABLE crew_store[$i].status.poisoned}
                        #{CLEAR_VARIABLE crew_store[$i].status.slowed}
                        #{CLEAR_VARIABLE crew_store[$i].status.uncovered}
                        [set_variables]
                            name=unit_store
                            mode=append
                            to_variable=crew_store[$i]
                        [/set_variables]
                    [/do]
                [/for]

                {CLEAR_VARIABLE crew_store}

                # Remove hero so he won't get added to the recall list
                [kill]
                    id=Hero
                    animate=no
                    fire_event=no
                [/kill]
                # Append new hero to original map units
                [set_variables]
                    name=unit_store
                    mode=append
                    to_variable=old_hero_store
                [/set_variables]

                {CLEAR_VARIABLE old_hero_store}
            [/else]
        [/if]
        {CLEAR_VARIABLE append_hero}

        {CLEAR_VARIABLE quota}
        {CLEAR_VARIABLE uncovered_woses}
        [clear_menu_item]
            id=eat_mushrooms
        [/clear_menu_item]
    [/event]

    [event]
        # Event added just in case of :n in debug mode.
        name=victory

        # This variable gets cleared in wf_victory.
        # This way we know if this victory was fired because of :n
        [if]
            {VARIABLE_CONDITIONAL quota.outlaws not_equals $null}
            [then]
                {NARRATOR_SAYS _"Debug mode :n"}
                {VARIABLE append_hero yes}
                [fire_event]
                    name=wf_victory
                [/fire_event]
                [endlevel]
                    result=victory
                    bonus=no
                    carryover_percentage=100
                    linger_mode=no
                    next_scenario=$wf_vars.next_scenario
                [/endlevel]
            [/then]
        [/if]
    [/event]

    [event]
        name=last breath
        id=enemy_cost
        first_time_only=no

        [gold]
            side=$second_unit.side
            amount="$(floor($unit.cost * 13 / 100.0))"
        [/gold]
    [/event]

    {AMLA_EXTRA}
    {HEAL_RECALL}
    [event]
        name=prestart
        # ----- Eat mushrooms Sub-scenario -----
        [set_menu_item]
            id=eat_mushrooms
            description=_ "Eat mushrooms"
            [show_if]
                [have_unit]
                    side=1
                    x,y=$x1,$y1
                [/have_unit]
                [have_location]
                    x,y=$x1,$y1
                    terrain=*^Em
                [/have_location]
            [/show_if]
            [command]
                [sound]
                    name=dagger-swish.wav
                [/sound]
                [terrain]
                    terrain=^
                    layer=overlay
                    [and]
                        terrain=*^Em
                        x,y=$x1,$y1
                    [/and]
                [/terrain]
                [if]
                    {VARIABLE_CONDITIONAL wf_vars.fungi_book greater_than 0}
                    [then]
                        [heal_unit]
                            [filter]
                                side=1
                                x,y=$x1,$y1
                            [/filter]
                            animate=yes
                            moves=full
                            restore_attacks=yes
                            restore_statuses=yes
                            amount="$(($wf_vars.fungi_book + $unit.level + 1) * 2)"
                        [/heal_unit]
                    [/then]
                    [else]
                        [heal_unit]
                            [filter]
                                side=1
                                x,y=$x1,$y1
                            [/filter]
                            animate=yes
                            restore_statuses=no
                            amount="$(($unit.level + 1) * 2)"
                        [/heal_unit]
                    [/else]
                [/if]
                {CLEAR_VARIABLE heal_amount}
            [/command]
        [/set_menu_item]
    [/event]
    [event]
        name=side 1 turn refresh
        first_time_only=no

        {FIRE_EVENT heal_recall_list}
        {FIRE_EVENT uncover_woses}
    [/event]
    [event]
        name=side 1 turn end
        first_time_only=no
        {FIRE_EVENT cover_woses}
    [/event]
    [event]
        name=uncover_woses
        first_time_only=no
        [if]
            [have_unit]
                side=1
                status=wose_sense
                search_recall_list=no
            [/have_unit]
            [then]
                [store_unit]
                    [filter]
                        [not]
                            side=1
                        [/not]
                        race=wose
                        [not]
                            status=uncovered
                        [/not]
                    [/filter]
                    variable=uncovered_woses
                    mode=append
                [/store_unit]
                [foreach]
                    array=uncovered_woses
                    [do]
                        [modify_unit]
                            [filter]
                                id=$this_item.id
                            [/filter]
                            [effect]
                                apply_to=status
                                add=uncovered
                            [/effect]
                        [/modify_unit]
                    [/do]
                [/foreach]
            [/then]
        [/if]
    [/event]
    [event]
        name=cover_woses
        first_time_only=no

        [foreach]
            array=uncovered_woses
            [do]
                [modify_unit]
                    [filter]
                        id=$this_item.id
                    [/filter]
                    [effect]
                        apply_to=status
                        remove=uncovered
                    [/effect]
                [/modify_unit]
            [/do]
        [/foreach]
        {CLEAR_VARIABLE uncovered_woses}
    [/event]
#enddef

#define SHARED_BURN_EVENTS
    # ----- Armorer -----
    [event]
        name="armorer"
        first_time_only=no
        [switch]
            variable=param.do
            [case]
                value="burn"
                {BURN_2X2_BUILDING $param.x $param.y Ya "scenery/village-human-burned3.png"}
            [/case]
        [/switch]
    [/event]

    # ----- Blacksmith -----
    [event]
        name="blacksmith"
        first_time_only=no
        [switch]
            variable=param.do
            [case]
                value="burn"
                {BURN_2X2_BUILDING $param.x $param.y Yf "scenery/rubble.png"}
            [/case]
        [/switch]
    [/event]

    # ----- Bowyer -----
    [event]
        name="bowyer"
        first_time_only=no
        [switch]
            variable=param.do
            [case]
                value="burn"
                {BURN_2X2_BUILDING $param.x $param.y Yb "scenery/village-human-burned3.png"}
            [/case]
        [/switch]
    [/event]

    # ----- Library -----
    [event]
        name="library"
        first_time_only=no
        [switch]
            variable=param.do
            [case]
                value="burn"
                {BURN_2X2_BUILDING $param.x $param.y Yu "scenery/village-human-burned3.png"}
            [/case]
        [/switch]
    [/event]

    # ----- Stables -----
    [event]
        name="stables"
        first_time_only=no
        [switch]
            variable=param.do
            [case]
                value="burn"
                {BURN_2X2_BUILDING $param.x $param.y Ys "scenery/village-human-burned1.png"}
            [/case]
        [/switch]
    [/event]

    # ----- Tavern -----
    [event]
        name="tavern"
        first_time_only=no
        [switch]
            variable=param.do
            [case]
                value="burn"
                {BURN_2X2_BUILDING $param.x $param.y Yt "scenery/village-human-burned1.png"}
            [/case]
        [/switch]
    [/event]

    # ----- Farms -----
    [event]
        name="farm"
        first_time_only=no
        [switch]
            variable=param.do
            [case]
                value="burn"
                {MODIFY_TERRAIN Rb $param.x $param.y}
                {MODIFY_3X3_SPACE Rb $param.x $param.y}
                {FIRE_ANIMATION $param.x $param.y}
                {PLACE_IMAGE "scenery/village-human-burned2.png" $param.x $param.y}
            [/case]
        [/switch]
    [/event]

    # ----- Wooden Keep -----
    [event]
        name="wooden keep"
        first_time_only=no
        [switch]
            variable=param.do
            [case]
                value="burn"
                {MODIFY_TERRAIN Rb $param.x $param.y}
                {FIRE_ANIMATION $param.x $param.y}
                {PLACE_IMAGE "scenery/rubble.png" $param.x $param.y}
            [/case]
        [/switch]
    [/event]

    # ----- Wooden Fortifications -----
    [event]
        name="fort"
        first_time_only=no
        [switch]
            variable=param.do
            [case]
                value="burn"
                {MODIFY_TERRAIN Rb $param.x $param.y}
                {FIRE_ANIMATION $param.x $param.y}
                {PLACE_IMAGE "scenery/rubble.png" $param.x $param.y}
            [/case]
        [/switch]
    [/event]

    # ----- Build Windmill -----
    [event]
        name="windmill"
        first_time_only=no
        [switch]
            variable=param.do
            [case]
                value="burn"
                {MODIFY_TERRAIN Rb $param.x $param.y}
                {FIRE_ANIMATION $param.x $param.y}
                {PLACE_IMAGE "scenery/rubble.png" $param.x $param.y}
            [/case]
        [/switch]
    [/event]

    # ----- Build Well -----
    [event]
        name="well"
        first_time_only=no
        [switch]
            variable=param.do
            [case]
                value="burn"
                {MODIFY_TERRAIN Rb $param.x $param.y}
                {FIRE_ANIMATION $param.x $param.y}
                {PLACE_IMAGE "scenery/rubble.png" $param.x $param.y}
            [/case]
        [/switch]
    [/event]

    # ----- Build Altar -----
    [event]
        name="altar"
        first_time_only=no
        [switch]
            variable=param.do
            [case]
                value="burn"
                {MODIFY_TERRAIN Rb $param.x $param.y}
                {FIRE_ANIMATION $param.x $param.y}
                {PLACE_IMAGE "scenery/rubble.png" $param.x $param.y}
            [/case]
        [/switch]
    [/event]

    # ----- Farm Yield -----
    [event]
        name="yield"
        first_time_only=no
        [switch]
            variable=param.do
            [case]
                value="burn"
                [sound]
                    name=torch.ogg
                [/sound]
                [terrain]
                    terrain=^Gvs
                    layer=overlay
                    [and]
                        x,y=$param.x,$param.y
                    [/and]
                [/terrain]
            [/case]
        [/switch]
    [/event]

    # ----- Mushroom Farm -----
    [event]
        name="mushroom farm"
        first_time_only=no
        [switch]
            variable=param.do
            [case]
                value="burn"
                [sound]
                    name=torch.ogg
                [/sound]
                [terrain]
                    terrain=^Gvs
                    layer=overlay
                    [and]
                        x,y=$param.x,$param.y
                    [/and]
                [/terrain]
            [/case]
        [/switch]
    [/event]

    [event]
        name=side 1 turn refresh
        first_time_only=no
        {FIRE_EVENT put_out_fire}
    [/event]

    [event]
        name=moveto
        #id=burn_buildings
        first_time_only=no
        [filter]
            side=1
            x,y=$x1,$y1
            [filter_location]
                terrain=*^Wm,*^Yf,*^Yfo,*^Yb,*^Ybo,*^Ys,*^Yso,*^Yu,*^Yuo,*^Yt,*^Yto,*^Ya,*^Yao,*^Yws,*^Yga,*^Ygy,*^Ymb,*^Ymc,*^Ymd,Ce,Ket
                x,y=$x1,$y1
            [/filter_location]
        [/filter]
        [store_locations]	# This has base and overlay in it
            variable=burn_location_full
            x,y=$x1,$y1
        [/store_locations]
        # This is kind of an ugly hack, but I'm not sure how to make it cleaner
        [set_variables]
            name=burn_location
            mode=replace
            [split]
                list=$burn_location_full.terrain
                key=layer
                separator="^"
            [/split]
        [/set_variables]
        [switch]	# switch on base terrain
            variable=burn_location[0].layer
            [case]	# Wooden encampments
                value=Ce
                {WF_CALL_FUNCTION "fort" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Wooden keeps
                value=Ket
                {WF_CALL_FUNCTION "wooden keep" do,x,y="burn",$x1,$y1}
            [/case]
        [/switch]
        [switch]	# switch on overlay terrain
            # I'd like to make this more building type-agnostic, but that's difficult
            variable=burn_location[1].layer
            [case]	# Armorer
                value=Ya,Yao
                {WF_CALL_FUNCTION "armorer" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Blacksmith
                value=Yf,Yfo
                {WF_CALL_FUNCTION "blacksmith" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Bowyer
                value=Yb,Ybo
                {WF_CALL_FUNCTION "bowyer" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Library
                value=Yu,Yuo
                {WF_CALL_FUNCTION "library" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Stables
                value=Ys,Yso
                {WF_CALL_FUNCTION "stables" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Tavern
                value=Yt,Yto
                {WF_CALL_FUNCTION "tavern" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Windmill
                value=Wm
                {WF_CALL_FUNCTION "windmill" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Well
                value=Yws
                {WF_CALL_FUNCTION "well" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Sacrifical Altar
                value=Yga
                {WF_CALL_FUNCTION "altar" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Farm yield
                value=Ygy
                {WF_CALL_FUNCTION "yield" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Mushroom farm
                value=Ymb,Ymc,Ymd
                {WF_CALL_FUNCTION "mushroom farm" do,x,y="burn",$x1,$y1}
            [/case]
        [/switch]
        {CLEAR_VARIABLE burn_location_full}
        {CLEAR_VARIABLE burn_location}
    [/event]

    [event]
        name=moveto
        #id=burn_farms
        first_time_only=no
        [filter]
            side=1
            x,y=$x1,$y1

            [filter_location]
                terrain=*^Vh
                x,y=$x1,$y1
                [filter_adjacent_location]
                    terrain=*^Gvs,*^Ygy,*^Ymb,*^Ymc,*^Ymd
                [/filter_adjacent_location]
            [/filter_location]
        [/filter]

        {WF_CALL_FUNCTION "farm" do,x,y="burn",$x1,$y1}
    [/event]
#enddef
