#textdomain wesnoth-Wild_Frontiers

#define WF_FETCH_NEXT_CALAMITY
    [if]
        {VARIABLE_CONDITIONAL wf_vars.year less_than {ON_DIFFICULTY 2 1 1}}
        [then]
            # Year 0
            {VARIABLE init_calamities ("skip")}
        [/then]
        [else]
#ifdef HARD
            {VARIABLE init_calamities ("lich","gryphons","loyalists","saurians","drakes","dwarves","elves","orcs")}
#endif
#ifdef NORMAL
            {VARIABLE init_calamities ("lich","gryphons","loyalists","saurians","drakes","dwarves","elves","orcs","skip")}
#endif
#ifdef EASY
            {VARIABLE init_calamities ("lich","gryphons","loyalists","saurians","drakes","dwarves","elves","orcs","skip","skip")}
#endif
        [/else]
    [/if]
    {VARIABLE fetch_next_calamity_str $relations.calamities}
    [fire_event]
        name=wf_fetch_next_calamity
    [/fire_event]
    {VARIABLE relations.calamities $fetch_next_calamity_str}
    {CLEAR_VARIABLE fetch_next_calamity_str}
#enddef

#define WF_RESTATE_CALAMITY TYPE
    {VARIABLE relations.calamities "{TYPE},$relations.calamities"}
#enddef

#define WF_FETCH_NEXT_CALAMITY_EVENT
    [event]
        name=wf_fetch_next_calamity
        id=wf_fetch_next_calamity
        first_time_only=no

        [set_variables]
            name=fetch_next_calamity
            mode=replace
            [split]
                list=$fetch_next_calamity_str
                key=calamity_type
                separator=,
                remove_empty=yes
            [/split]
        [/set_variables]

        # check if calamity_type list has entries
        [foreach]
            array=fetch_next_calamity
            variable=this_list
            [do]
                [if]
                    {VARIABLE_CONDITIONAL this_list.calamity_type not_equals $null}
                    [then]
                        {VARIABLE list_has_entries yes}
                        [break]
                        [/break]
                    [/then]
                [/if]
            [/do]
        [/foreach]

        # if calamity_type list is empty, fill it.
        [if]
            {VARIABLE_CONDITIONAL list_has_entries not_equals yes}
            [then]
                {VARIABLE tmp_list ($init_calamities)}
                [set_variables]
                    name=fetch_next_calamity
                    mode=replace
                    [split]
                        list=$tmp_list
                        key=calamity_type
                        separator=,
                        remove_empty=yes
                    [/split]
                [/set_variables]
                {CLEAR_VARIABLE tmp_list}
            [/then]
        [/if]
        {CLEAR_VARIABLE list_has_entries}
        [if]
            {VARIABLE_CONDITIONAL relations.calamity_type equals "none"}
            [or]
                {VARIABLE_CONDITIONAL relations.calamity_type equals $null}
            [/or]
            [then]
                # randomly choose a calamity_type
                [set_variable]
                    name=tmp_list
                    [join]
                        variable=fetch_next_calamity
                        key=calamity_type
                        separator=,
                        remove_empty=yes
                    [/join]
                [/set_variable]
                {VARIABLE_OP relations.calamity_type rand $tmp_list}
                {CLEAR_VARIABLE tmp_list}
            [/then]
        [/if]
        {LOOKUP_INDEX fetch_next_calamity calamity_type $relations.calamity_type index}
        {CLEAR_VARIABLE fetch_next_calamity[$index].calamity_type}
        {CLEAR_VARIABLE index}

        [set_variable]
            name=fetch_next_calamity_str
            [join]
                variable=fetch_next_calamity
                key=calamity_type
                separator=,
                remove_empty=yes
            [/join]
        [/set_variable]

        {CLEAR_VARIABLE fetch_next_calamity}
        {CLEAR_VARIABLE init_calamities}
    [/event]

    [event]
        name=start
        first_time_only=yes

        [remove_event]
            id=wf_fetch_next_calamity
        [/remove_event]
    [/event]
#enddef

# To use:
# Add {WF_RAND_CHOICE_EVENT} to [scenario]
# {WF_RAND_CHOICE (2,3,4,5)}
# Or
# {WF_RAND_CHOICE $choice_var}
# $random_choice is the result
# To get another result from the same list:
# Clear the variable random_choice. This is important, otherwise you'll get the same choice
# {CLEAR_VARIABLE random_choice}
# {WF_RAND_CHOICE (2,3,4,5)} pass same list as before
# Once done:
# {CLEAR_VARIABLE random_choice}
# OPTIONAL: To get a new string with the last random_choice removed.
# OPTIONAL: {WF_RAND_JOIN choice_var}
# OPTIONAL: To restate the removed random_choice into the joined list
# OPTIONAL: {WF_RESTATE_CHOICE choice_var $random_choice}
# {CLEAR_VARIABLE random_choice_arr}

#define WF_RAND_CHOICE LIST
    {VARIABLE rand_choices ({LIST})}
    [fire_event]
        name=wf_rand_choice
    [/fire_event]
    {CLEAR_VARIABLE rand_choices}
#enddef

#define WF_RAND_JOIN VAR
    [set_variable]
        name={VAR}
        [join]
            variable=random_choice_arr.list
            key=choice
            separator=,
            remove_empty=yes
        [/join]
    [/set_variable]
#enddef

#define WF_RESTATE_CHOICE VAR CHOICE
    {VARIABLE {VAR} "{CHOICE},${VAR}"}
#enddef

# Lifted from: Random_Campaign
#define WF_RAND_CHOICE_EVENT
    [event]
        name=wf_rand_choice
        id=wf_rand_choice
        first_time_only=no

        [foreach]
            array=random_choice_arr.list
            variable=this_list
            [do]
                [if]
                    {VARIABLE_CONDITIONAL this_list.choice not_equals $null}
                    [then]
                        {VARIABLE list_has_entries yes}
                        [break]
                        [/break]
                    [/then]
                [/if]
            [/do]
        [/foreach]

        [if]
            {VARIABLE_CONDITIONAL list_has_entries not_equals yes}
            [then]
                {VARIABLE list ($rand_choices)}
                [set_variables]
                    name=random_choice_arr.list
                    mode=replace
                    [split]
                        list=$list
                        key=choice
                        separator=,
                        remove_empty=yes
                    [/split]
                [/set_variables]
                {CLEAR_VARIABLE list}
            [/then]
        [/if]
        {CLEAR_VARIABLE list_has_entries}
        [if]
            {VARIABLE_CONDITIONAL random_choice equals $null}
            [then]
                # randomly choose a choice
                [set_variable]
                    name=choice_list
                    [join]
                        variable=random_choice_arr.list
                        key=choice
                        separator=,
                        remove_empty=yes
                    [/join]
                [/set_variable]
                {VARIABLE_OP random_choice rand $choice_list}
                {CLEAR_VARIABLE choice_list}
            [/then]
        [/if]
        {LOOKUP_INDEX random_choice_arr.list choice $random_choice index}
        {CLEAR_VARIABLE random_choice_arr.list[$index].choice}
        {CLEAR_VARIABLE index}
    [/event]
#enddef
