#textdomain wesnoth-Wild_Frontiers
# This collection of macros all pertains to the mechanics of Peasant
# Worker units starting, stopping, and finishing projects. No details
# regarding the specific projects are included in this file.

# ----- Allow working ----------------------------------------------------
#define WORKERS_CAN_WORK
    # Create menu items, create project types, Remove movement from all busy
    # workers, update the project queue, and kill off projects if the workers
    # are attacked. Called at the beginning of every scenario.

    {SET_BUILD_MENUS}		# see build_menus.cfg for details
    {SET_PROJECT_TYPES}		# see projects.cfg for details

    [event]
        #name=side 1 turn
        name=grow_mushrooms
        id=grow_mushrooms
        first_time_only=no

        [random_placement]
            num_items=3
            variable=random_placement_location
            allow_less=yes
            min_distance=0
            [filter_location]
                terrain=*^Ymc
                include_borders=no
            [/filter_location]
            [command]
                [terrain]
                    x,y=$random_placement_location.x,$random_placement_location.y
                    terrain=^Ymd
                    layer=overlay
                [/terrain]
            [/command]
        [/random_placement]
        {CLEAR_VARIABLE random_placement_location}
        #[terrain]
        #    terrain=^Ymd
        #    layer=overlay
        #    [and]
        #        terrain=*^Ymc
        #    [/and]
        #[/terrain]
        [terrain]
            terrain=^Ymc
            layer=overlay
            [and]
                terrain=*^Ymb
            [/and]
        [/terrain]
    [/event]

    [event]
        #name=side 1 turn
        name=enable_tunnels
        id=enable_tunnels
        first_time_only=no

        [if]
            {VARIABLE_CONDITIONAL wf_vars.bidirectional_tunnel equals yes}
            [then]
                # Underground Tunnels ^Yge, ^Ygx
                # Bi-directional
                [tunnel]
                    id=underground_tunnel
                    [source]
                        terrain=*^Yge,*^Ygx
                    [/source]
                    [target]
                        terrain=*^Ygx,*^Yge
                    [/target]
                    [filter]
                        side=1
                        [not]
                            type=Caravan
                        [/not]
                    [/filter]
                    bidirectional=yes
                    pass_allied_units=yes
                [/tunnel]
            [/then]
            [else]
                # Underground Tunnels ^Yge, ^Ygx
                [tunnel]
                    id=underground_tunnel
                    [source]
                        terrain=*^Yge
                    [/source]
                    [target]
                        terrain=*^Ygx
                    [/target]
                    [filter]
                        side=1
                        [not]
                            type=Caravan
                        [/not]
                    [/filter]
                    bidirectional=no
                    pass_allied_units=yes
                [/tunnel]
            [/else]
        [/if]
    [/event]

    [event]
        #name=side 1 turn end
        name=disable_tunnels
        id=disable_tunnels
        first_time_only=no

        # Underground Tunnels ^Yge, ^Ygx
        [tunnel]
            id=underground_tunnel
            remove=yes
        [/tunnel]
    [/event]

    [event]
        name=moveto
        id=moveto_slow_trap
        first_time_only=no
        [filter]
            [filter_side]
                [enemy_of]
                    side=1
                [/enemy_of]
            [/filter_side]
            [filter_location]
                terrain=Ywt
                find_in=traps.slow
            [/filter_location]
        [/filter]
        [modify_unit]
            [filter]
                x,y=$x1,$y1
            [/filter]
            [effect]
                apply_to=status
                add=slowed
            [/effect]
            [effect]
                apply_to=status
                add=uncovered
            [/effect]
        [/modify_unit]
        #[harm_unit]
        #    [filter]
        #        x,y=$x1,$y1
        #    [/filter]
        #    amount=0
        #    kill=no
        #    animate=yes
        #    slowed=yes
        #    fire_event=no
        #[/harm_unit]
        {WF_CALL_FUNCTION "slow trap" do,x,y="burn",$x1,$y1}
    [/event]
    [event]
        name=moveto
        id=moveto_spike_trap
        first_time_only=no
        [filter]
            [filter_side]
                [enemy_of]
                    side=1
                [/enemy_of]
            [/filter_side]
            [filter_location]
                terrain=Ywt
                find_in=traps.spike
            [/filter_location]
        [/filter]
        [modify_unit]
            [filter]
                x,y=$x1,$y1
            [/filter]
            [effect]
                apply_to=status
                add=uncovered
            [/effect]
        [/modify_unit]
        [harm_unit]
            [filter]
                x,y=$x1,$y1
            [/filter]
            amount=10
            kill=yes
            damage_type=pierce
            poisoned=yes
            animate=yes
            fire_event=yes
        [/harm_unit]
        {WF_CALL_FUNCTION "spike trap" do,x,y="burn",$x1,$y1}
    [/event]
    [event]
        name=moveto
        id=moveto_rune_trap
        first_time_only=no
        [filter]
            [filter_side]
                [enemy_of]
                    side=1
                [/enemy_of]
            [/filter_side]
            [filter_location]
                find_in=traps.rune
            [/filter_location]
        [/filter]
        #{WF_CALL_FUNCTION "rune" do,x,y="burn",$x1,$y1}
        [set_variables]
            mode=insert
            name=param[0]
            [value]
                do="burn"
                x=$x1
                y=$y1
            [/value]
        [/set_variables]
        [fire_event]
            name=rune
            [primary_unit]
                x=$x1
                y=$y1
            [/primary_unit]
        [/fire_event]
        [clear_variable]
            name=param[0]
        [/clear_variable]
    [/event]
    [event]
        #name=side 1 turn refresh
        name=train_units
        id=train_units
        first_time_only=no
        [if]
            {VARIABLE_CONDITIONAL wf_vars.enable_training boolean_equals yes}
            [then]
                [store_unit]
                    [filter]
                        side=1
                        [not]
                            type=Caravan,Peasant_no_Advance,Woodsman_no_Advance,Ruffian_no_Advance
                        [/not]
                        status=training
                        #formula="self.upkeep=full"
                        #[filter_wml]
                        #    upkeep=full
                        #[/filter_wml]
                        #canrecruit=no
                        [filter_location]
                            terrain=*^Yf,*^Yfo,*^Yb,*^Ybo,*^Ys,*^Yso,*^Yu,*^Yuo,*^Ya,*^Yao
                        [/filter_location]
                    [/filter]
                    variable=unit_store
                    mode=always_clear
                [/store_unit]
                [for]
                    array=unit_store
                    reverse=yes
                    [do]
                        {VARIABLE training_cost $wf_vars.training_level}
                        {VARIABLE_OP training_cost multiply $unit_store[$i].level}
                        [if]
                            {VARIABLE_CONDITIONAL unit_store[$i].upkeep equals "full"}
                            {VARIABLE_CONDITIONAL unit_store[$i].canrecruit equals no}
                            [then]
                                {VARIABLE_OP training_cost add 5}
                            [/then]
                        [/if]
                        [if]
                            {VARIABLE_CONDITIONAL unit_store[$i].canrecruit equals yes}
                            [then]
                                {VARIABLE_OP training_cost add 10}
                            [/then]
                        [/if]
                        {STORE_GOLD}
                        [if]
                            {CHECK_GOLD $training_cost}
                            [then]
                                #{WF_SCROLL_UNIT (id=$unit_store[$i].id)}
                                {SCROLL_TO $unit_store[$i].x $unit_store[$i].y}
                                {PAY_GOLD $training_cost}
                                [floating_text]
                                    x,y=$unit_store[$i].x,$unit_store[$i].y
                                    text=_"+$wf_vars.training_level| XP"
                                [/floating_text]
                                [delay]
                                    time=400
                                [/delay]
                                [modify_unit]
                                    [filter]
                                        id = $unit_store[$i].id
                                    [/filter]
                                    #experience = "$($this_unit.experience + $wf_vars.training_level)"
                                    [effect]
                                        apply_to=experience
                                        increase=$wf_vars.training_level
                                    [/effect]
                                [/modify_unit]
                            [/then]
                        [/if]
                        {CLEAR_VARIABLE training_cost}
                    [/do]
                [/for]
                {CLEAR_VARIABLE unit_store}
            [/then]
        [/if]
        # Disable training for units not on recruiting buildings
        [modify_unit]
            [filter]
                side=1
                status=training
                [not]
                    [filter_location]
                        terrain=*^Yf,*^Yfo,*^Yb,*^Ybo,*^Ys,*^Yso,*^Yu,*^Yuo,*^Ya,*^Yao
                    [/filter_location]
                [/not]
            [/filter]
            [effect]
                apply_to=status
                remove=training
            [/effect]
        [/modify_unit]
    [/event]

    [event]
        #name=side 1 turn refresh
        name=refresh_workers
        id=refresh_workers
        first_time_only=no
        {MODIFY_UNIT ({FILTER_FOR_WORKER}) moves 0}
        {MODIFY_UNIT ({FILTER_FOR_WORKER}) resting no}
        {MODIFY_UNIT ({FILTER_FOR_WORKER}) attacks_left 0}
    [/event]

    # Create event to update project progress each turn
    [event]
        #name="side 1 turn"
        name=project_queue
        id=project_queue
        first_time_only=no
        # First decrement the number of turns for each project, then check if
        # any project is done.
        {VARIABLE x1_bak $x1}
        {VARIABLE y1_bak $y1}
        [for]
            array=projects.proj_list
            reverse=yes
            [do]
                {VARIABLE_OP projects.proj_list[$i].turns add -1}
                [if]
                    {VARIABLE_CONDITIONAL projects.proj_list[$i].turns less_than_equal_to 0}
                    [then]	# workers are now idle, build
                        #{REMOVE_UNIT_VARIABLE $projects.proj_list[$i].x $projects.proj_list[$i].y worker}
                        {REMOVE_UNIT_STATUS $projects.proj_list[$i].x $projects.proj_list[$i].y worker}
                        {VARIABLE x1 $projects.proj_list[$i].x}
                        {VARIABLE y1 $projects.proj_list[$i].y}
                        {WF_CALL_FUNCTION $projects.proj_list[$i].goal do,custom,x,y=$projects.proj_list[$i].do,$projects.proj_list[$i].custom,$projects.proj_list[$i].x,$projects.proj_list[$i].y}
                    [/then]
                    [else]
                        {SCROLL_TO $projects.proj_list[$i].x $projects.proj_list[$i].y}
                        [floating_text]
                            x=$projects.proj_list[$i].x
                            y=$projects.proj_list[$i].y
                            text=_"$projects.proj_list[$i].turns left"
                        [/floating_text]
                        #[delay]
                        #	time=500
                        #[/delay]
                    [/else]
                [/if]
            [/do]
        [/for]
        {VARIABLE x1 $x1_bak}
        {VARIABLE y1 $y1_bak}
        {CLEAR_VARIABLE x1_bak}
        {CLEAR_VARIABLE y1_bak}

        # Delete finished items in the project queue. This loop is down
        # backwards from the FOREACH macro to avoid un-checked projects
        # shifting as finished ones are deleted. Some unfinished projects
        # may be checked twice, but that's okay. Since this is a separate loop
        # from that above the turns remaining are not decremented twice.
        {VARIABLE i $projects.proj_list.length}
        {VARIABLE_OP i sub 1}	# last element in array has index length-1
        [while]
            {VARIABLE_CONDITIONAL i greater_than_equal_to 0}
            [do]
                [if]
                    # hopefully <= should kill any projects that seem to randomly sneak through
                    # from time to time
                    {VARIABLE_CONDITIONAL projects.proj_list[$i].turns less_than_equal_to 0}
                    [then]
                        {CLEAR_VARIABLE projects.proj_list[$i]}
                    [/then]
                [/if]
                {VARIABLE_OP i sub 1}
            [/do]
        [/while]
        {CLEAR_VARIABLE i}
    [/event]

    # Create event to stop projects if workers are attacked
    [event]
        name=attack
        id=worker_attacked
        first_time_only=no
        [filter_second]
            #side=1
            {FILTER_FOR_WORKER}
        [/filter_second]
        {SCROLL_TO $x2 $y2}
        {STOP_PROJECT $x2 $y2 VAR=disrupt_goal}
        {NARRATOR_SAYS _"The project $disrupt_goal| was disrupted."}
        {CLEAR_VARIABLE disrupt_goal}
    [/event]
#enddef

#define STOP_PROJECT X Y
#arg VAR
dummy_var#endarg
    # Stop the project occurring at X,Y
    {VARIABLE x1_bak $x1}
    {VARIABLE y1_bak $y1}
    [for]
        array=projects.proj_list
        reverse=yes
        [do]
            [if]
                [and]
                    {VARIABLE_CONDITIONAL projects.proj_list[$i].x numerical_equals {X}}
                    {VARIABLE_CONDITIONAL projects.proj_list[$i].y numerical_equals {Y}}
                [/and]
                [then]
                    {VARIABLE {VAR} $projects.proj_list[$i].goal}
                    {VARIABLE x1 {X}}
                    {VARIABLE y1 {Y}}
                    {REFUND_GOLD $projects.proj_list[$i].cost}
                    [if]
                        {VARIABLE_CONDITIONAL projects.proj_list[$i].do equals "build"}
                        [then]
                            {WF_CALL_FUNCTION $projects.proj_list[$i].goal do,x,y="stop",{X},{Y}}
                        [/then]
                    [/if]
                    #{REMOVE_UNIT_VARIABLE {X} {Y} worker}
                    {REMOVE_UNIT_STATUS {X} {Y} worker}
                    {CLEAR_VARIABLE projects.proj_list[$i]}
                    #[break]
                    #[/break]
                    # The shifting this causes is irrelevant since there *should*
                    # be only one project stopped per complete loop iteration
                [/then]
            [/if]
        [/do]
    [/for]
    {VARIABLE x1 $x1_bak}
    {VARIABLE y1 $y1_bak}
    {CLEAR_VARIABLE x1_bak}
    {CLEAR_VARIABLE y1_bak}
    {CLEAR_VARIABLE dummy_var}
#enddef

#define FILTER_FOR_WORKER
    #[filter_wml]
    #	[variables]
    #		worker=yes
    #	[/variables]
    #[/filter_wml]
    status=worker
    #formula="wml_vars.worker=1"
#enddef

#define HAVE_IDLE_WORKERS X Y
    [have_unit]
        x,y={X},{Y}
        side=1
        type=Peasant Workers
        [not]
            {FILTER_FOR_WORKER}
        [/not]
    [/have_unit]
#enddef

#define HAVE_IDLE_CASTERS X Y
    [have_unit]
        x,y={X},{Y}
        side=1
        [has_attack]
            range=ranged
            type=fire,cold,arcane
            [not]
                name=fire breath
                [or]
                    name=arcane_bow
                [/or]
                [or]
                    name=arcane_bow_cursed
                [/or]
                [or]
                    name=cold_bow
                [/or]
                [or]
                    name=cold_bow_cursed
                [/or]
                [or]
                    name=fire_bow
                [/or]
                [or]
                    name=fire_bow_cursed
                [/or]
                [or]
                    name=storm_trident
                [/or]
                [or]
                    name=sceptre of fire
                [/or]
            [/not]
        [/has_attack]
        [not]
            {FILTER_FOR_WORKER}
        [/not]
    [/have_unit]
#enddef

#define HAVE_IDLE_DESTROYERS X Y
    [have_unit]
        x,y={X},{Y}
        side=1
        type_adv_tree={DESTROYER_LIST}
        [not]
            {FILTER_FOR_WORKER}
        [/not]
    [/have_unit]
#enddef

#define HAVE_IDLE_RAISERS X Y
    [have_unit]
        x,y={X},{Y}
        side=1
        type_adv_tree={RAISER_LIST}
        [not]
            {FILTER_FOR_WORKER}
        [/not]
    [/have_unit]
#enddef

#define STOP_WINTER_PROJECTS
    # Stop projects (except tree-cutting) for the winter
    {VARIABLE ii "$($projects.proj_list.length-1)"}
    {WF_DEBUG "Stopping $ii projects for the winter"}
    [while]
        {VARIABLE_CONDITIONAL ii greater_than_equal_to 0}
        [do]
            [if]
                # These can't continue into winter
                {VARIABLE_CONDITIONAL projects.proj_list[$ii].goal equals "farm"}
                [or]
                    {VARIABLE_CONDITIONAL projects.proj_list[$ii].goal equals "divert stream"}
                [/or]
                [or]
                    {VARIABLE_CONDITIONAL projects.proj_list[$ii].goal equals "bridge"}
                [/or]
                [or]
                    {VARIABLE_CONDITIONAL projects.proj_list[$ii].goal equals "water village"}
                [/or]
                [then]
                    {SCROLL_TO $projects.proj_list[$ii].x $projects.proj_list[$ii].y}
                    {WF_DEBUG "Stopping $projects.proj_list[$ii].x $projects.proj_list[$ii].y $projects.proj_list[$ii].goal"}
                    {NARRATOR_SAYS _"The onset of winter storms forced these peasant workers to abandon their $projects.proj_list[$ii].goal project until spring."}
                    # This macro handles idling and queue adjustment
                    {STOP_PROJECT $projects.proj_list[$ii].x $projects.proj_list[$ii].y}
                [/then]
            [/if]
            {VARIABLE_OP ii sub 1}
        [/do]
    [/while]
    {CLEAR_VARIABLE ii}
#enddef

#define PROJECT_COUNT PROJ_NAME WML
    {VARIABLE project_count 0}

    {VARIABLE ii "$($projects.proj_list.length-1)"}
    [while]
        {VARIABLE_CONDITIONAL ii greater_than_equal_to 0}
        [do]
            [if]
                {VARIABLE_CONDITIONAL projects.proj_list[$ii].goal equals "{PROJ_NAME}"}
                [then]
                    {VARIABLE_OP project_count add 1}
                [/then]
            [/if]
            {VARIABLE_OP ii sub 1}
        [/do]
    [/while]
    {CLEAR_VARIABLE ii}
    [if]
        [variable]
            name=project_count
            numerical_equals=0
        [/variable]
        [then]
            {WML}
        [/then]
        [else]
            [message]
                speaker=unit
                message=_"But milord, we already 'ave a {PROJ_NAME} project in progress."
            [/message]
        [/else]
    [/if]
    {CLEAR_VARIABLE project_count}
#enddef

#define VILLAGE_PROJECT_COUNT VAR
    {VARIABLE ii "$($projects.proj_list.length-1)"}
    [while]
        {VARIABLE_CONDITIONAL ii greater_than_equal_to 0}
        [do]
            [if]
                {VARIABLE_CONDITIONAL projects.proj_list[$ii].do equals "build"}
                [then]
                    [if]
                        {VARIABLE_CONDITIONAL projects.proj_list[$ii].goal equals "farm"}
                        [or]
                            {VARIABLE_CONDITIONAL projects.proj_list[$ii].goal equals "yield"}
                        [/or]
                        [or]
                            {VARIABLE_CONDITIONAL projects.proj_list[$ii].goal equals "water village"}
                        [/or]
                        [or]
                            {VARIABLE_CONDITIONAL projects.proj_list[$ii].goal equals "swamp village"}
                        [/or]
                        [or]
                            {VARIABLE_CONDITIONAL projects.proj_list[$ii].goal equals "hill village"}
                        [/or]
                        [then]
                            {VARIABLE_OP {VAR} add 1}
                        [/then]
                    [/if]
                [/then]
            [/if]
            {VARIABLE_OP ii sub 1}
        [/do]
    [/while]
    {CLEAR_VARIABLE ii}
#enddef
