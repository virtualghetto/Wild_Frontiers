#textdomain wesnoth-Wild_Frontiers
# ----- Speaker Macros ---------------------------------------------------
# This file defines the major speaker roles and assigns them to units as you recruit
# them. Also includes random dialogue spoken during all scenarios and
# some utility speaker macros

#define DIALOGUE ID TALK_WML
    # Similar to the tutorial macro, this allows me to put in dialogue
    # that is only spoken once, even if the particular event recurs.
    # Note that this technique depends on uninitialized variables evaluating
    # to false.
    [if]
        {VARIABLE_CONDITIONAL history.{ID} not_equals yes}
        [then]
            {TALK_WML}
            {VARIABLE history.{ID} yes}
        [/then]
    [/if]
#enddef

#define QUEST_TALK FACTION TALK_WML
    [if]
        [variable]
            name=diplomacy.current
            numerical_equals=0
        [/variable]
        {VARIABLE_CONDITIONAL diplomacy.{FACTION}_state less_than 5}
        [then]
            {TALK_WML}
        [/then]
    [/if]
#enddef

#define HIST_EVENT ID WML
    #[event]
    #	name=prestart
    [if]
        {VARIABLE_CONDITIONAL history.{ID} not_equals yes}
        [then]
            {WML}
        [/then]
    [/if]
    #[/event]
#enddef

# ----- Utility Speaker Macros -------------------------------------------
# Note for some of these, there are likely to be many units with these roles.
# BfW should pick the same one over and over unless it dies / stands down,
# which is the behavior I want anyways

#define HERO_SAYS MESSAGE
    [message]
        id=Hero
        message={MESSAGE}
    [/message]
#enddef

#define NARRATOR_SAYS MESSAGE
    [message]
        speaker=narrator
        image="wesnoth-icon.png"
        message={MESSAGE}
    [/message]
#enddef

#define ADVISOR_SAYS MESSAGE
    [message]
        role=advisor
        message={MESSAGE}
    [/message]
#enddef

#define CYNIC_SAYS MESSAGE
    [message]
        role=cynic
        message={MESSAGE}
    [/message]
#enddef

#define FOOL_SAYS MESSAGE
    [message]
        role=fool
        message={MESSAGE}
    [/message]
#enddef

#define UNIT_SAYS MESSAGE
    [message]
        speaker=unit
        message={MESSAGE}
    [/message]
#enddef

#define SECOND_UNIT_SAYS MESSAGE
    [message]
        speaker=second_unit
        message={MESSAGE}
    [/message]
#enddef

#define ALLY_SAYS MESSAGE
    [message]
        #speaker=$diplomacy_unit.id
        role=ally
        message={MESSAGE}
    [/message]
#enddef

#define MAGE_SAYS MESSAGE
    [message]
        speaker=narrator
        image=portraits/linaera.png
        message={MESSAGE}
    [/message]
#enddef

#define WORKER_SAYS MESSAGE
    [message]
        type=Peasant Workers
        message={MESSAGE}
    [/message]
#enddef

#define ROLE_SAYS ROLE MESSAGE
    [message]
        role={ROLE}
        message={MESSAGE}
    [/message]
#enddef

#define OTHER_SAYS FILTER MESSAGE
    [message]
        {FILTER}
        message={MESSAGE}
    [/message]
#enddef

#define SPEAKER_SAYS ID MESSAGE
    [message]
        speaker={ID}
        message={MESSAGE}
    [/message]
#enddef

#define TYPE_SAYS TYPE MESSAGE
    [message]
        type={TYPE}
        message={MESSAGE}
    [/message]
#enddef

#define DELFADOR_SAYS MESSAGE
    [message]
        speaker=narrator
        image=portraits/delfador-mentoring.png
        message={MESSAGE}
    [/message]
#enddef

#define SIGURD_SAYS MESSAGE
    [message]
        speaker=narrator
        image=portraits/drakes/inferno.png
        message={MESSAGE}
    [/message]
#enddef

#define HAVE_ADVISOR
    [have_unit]
        side=1
        role=advisor
    [/have_unit]
#enddef

#define HAVE_CYNIC
    [have_unit]
        side=1
        role=cynic
    [/have_unit]
#enddef

#define HAVE_FOOL
    [have_unit]
        side=1
        role=fool
    [/have_unit]
#enddef

# ----- Assign roles -----------------------------------------------------
#define ASSIGN_SPEAKER_ROLES
    # Assign one of three speaker roles if there is not such a unit already
    # Should be included in all scenarios. This is a combination of die
    # events for each role (which look for a replacement), and a new turn
    # event as a "fallback" in case a role dies with no replacement (most likely
    # in the first few turns of the campaign. Note that on EASY, players begin
    # with all 3 roles, while on NORMAL and HARD the 1st scenario has an
    # event to assign fool to the first recruit

    {REASSIGN_ROLE advisor}
    {REASSIGN_ROLE cynic}
    {REASSIGN_ROLE fool}
#enddef

#define REASSIGN_ROLE ROLE
    # This should cover most cases
    [event]
        name=die,recruit,recall
        id=reassign_{ROLE}_1
        first_time_only=no
        [filter]
            #role={ROLE}
            side=1
        [/filter]

        # Assign the role to a unit who doesn't already have one
        # don't bother to check, failures covered by new turn event below
        [fire_event]
            name=unrecruit
            [primary_unit]
                id=$unit.id
            [/primary_unit]
        [/fire_event]
    [/event]

    # But in the instance that there's no available unit, this is a fallback
    [event]
        name=unrecruit,new_turn
        id=unrecruit_{ROLE}
        first_time_only=no

        # Don't assign role to lighthouse
        [if]
            [have_unit]
                role={ROLE}
                side=1
                count=0
                search_recall_list=no
            [/have_unit]
            # Assign the role to a unit who doesn't already have one
            [then]
                [role]
                    role={ROLE}
                    search_recall_list=no
                    [and]
                        side=1
                        x,y=1-{MAP_WIDTH},1-{MAP_HEIGHT}	# force on map, not recall list
                        role=
                        [not]
                            id=Hero
                        [/not]
                        [not]
                            role=advisor
                        [/not]
                        [not]
                            role=cynic
                        [/not]
                        [not]
                            role=fool
                        [/not]
                        [not]
                            type=Caravan,WF_Lighthouse,WF_Lighthouse_Off
                        [/not]
                    [/and]
                [/role]
            [/then]
        [/if]

        # Assign role to lighthouse if necessary
        [if]
            [have_unit]
                role={ROLE}
                side=1
                count=0
                search_recall_list=no
            [/have_unit]
            # Assign the role to a unit who doesn't already have one
            [then]
                [role]
                    role={ROLE}
                    search_recall_list=no
                    [and]
                        side=1
                        x,y=1-{MAP_WIDTH},1-{MAP_HEIGHT}	# force on map, not recall list
                        role=
                        [not]
                            id=Hero
                        [/not]
                        [not]
                            role=advisor
                        [/not]
                        [not]
                            role=cynic
                        [/not]
                        [not]
                            role=fool
                        [/not]
                        [not]
                            type=Caravan
                        [/not]
                    [/and]
                [/role]
            [/then]
        [/if]

        # Remove multiple roles
        [if]
            [have_unit]
                role={ROLE}
                x,y=1-{MAP_WIDTH},1-{MAP_HEIGHT}
                side=1
                count=2-99999
                search_recall_list=no
            [/have_unit]
            [then]
                [store_unit]
                    [filter]
                        role={ROLE}
                        side=1
                        x,y=1-{MAP_WIDTH},1-{MAP_HEIGHT}
                    [/filter]
                    variable=unit_role
                    mode=always_clear
                    kill=yes
                [/store_unit]

                [for]
                    array=unit_role
                    reverse=yes
                    [do]
                        #{VARIABLE unit_role[$i].role ()}
                        {CLEAR_VARIABLE unit_role[$i].role}
                    [/do]
                [/for]

                {VARIABLE unit_role[0].role {ROLE}}

                [foreach]
                    array=unit_role
                    [do]
                        [unstore_unit]
                            variable=this_item
                            find_vacant=no
                        [/unstore_unit]
                    [/do]
                [/foreach]
                {CLEAR_VARIABLE unit_role}
            [/then]
        [/if]
    [/event]
#enddef

# ----- Generic dialogue events ------------------------------------------
# These are the collection of dialogue events that can happen in any scenario.
# Should be called at the beginning of each scenario.

#define GENERIC_DIALOGUE
    # ----- Random worker / role-people dialogues -----
    [event]
        #name=side 1 turn
        name=random_chatter
        id=random_chatter
        first_time_only=no
        # Want 1-2 random conversations per season
        {RANDOM_VAR will_talk 0..24}
        [if]
            [variable]
                name=will_talk
                numerical_equals=0
            [/variable]
            [then]
                # Choose a random discussion to have
                {RANDOM_VAR will_talk 0..24}
                [switch]
                    variable=will_talk
                    [case]
                        value=0
                        [if]
                            [have_unit]
                                type=Peasant Workers
                                search_recall_list=no
                            [/have_unit]
                            [then]
                                {HERO_SAYS _"Get back to work!"}
                                {WORKER_SAYS _"<i>(grumble)</i> Work, he says. You lousy do nothing..."}
                            [/then]
                        [/if]
                    [/case]
                    [case]
                        value=1
                        {FOOL_SAYS _"Knock, Knock."}
                        {CYNIC_SAYS _"Not now."}
                    [/case]
                    [case]
                        value=2
                        {TYPE_SAYS Javelineer _"<i>(singing)</i> I'm moonwalking."}
                    [/case]
                    [case]
                        value=3
                        {FOOL_SAYS _"My lord, I just spotted a ferocious beast! We have to be on our guard!"}
                        {CYNIC_SAYS _"It was a rabbit..."}
                    [/case]
                [/switch]
            [/then]
        [/if]
        {CLEAR_VARIABLE will_talk}
    [/event]
#enddef
