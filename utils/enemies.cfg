#textdomain wesnoth-Wild_Frontiers
# This file includes macros related to the appearance of various enemy groups

#define HAVE_ANIMAL_COUNT
    [and]
        [not]
            [have_unit]
                side=2
                [not]
                    status=poisoned
                [/not]
                [not]
                    status=guardian
                [/not]
                [not]
                    status=roamer
                [/not]
                [not]
                    role=curse
                [/not]
                count="$($enemy.num_animals + 1)"-99999
            [/have_unit]
        [/not]
    [/and]
#enddef

#define HAVE_GUARDIAN_COUNT
    [and]
        [not]
            [have_unit]
                side=2
                status=guardian
                [not]
                    status=poisoned
                [/not]
                [not]
                    status=roamer
                [/not]
                [not]
                    role=curse
                [/not]
                count="$($enemy.min_guardian_spawn + 1)"-99999
            [/have_unit]
        [/not]
    [/and]
#enddef

#define HAVE_ROAMER_COUNT
    [and]
        [not]
            [have_unit]
                side=2
                status=roamer
                [not]
                    status=poisoned
                [/not]
                [not]
                    status=guardian
                [/not]
                [not]
                    role=curse
                [/not]
                count="$($enemy.min_guardian_spawn + 1)"-99999
            [/have_unit]
        [/not]
    [/and]
    [and]
        [not]
            [have_unit]
                side=3,4,5,6,7,8
                [not]
                    status=poisoned
                [/not]
                [not]
                    status=guardian
                [/not]
                [not]
                    status=roamer
                [/not]
                [not]
                    role=curse
                [/not]
                count=2-99999
            [/have_unit]
        [/not]
    [/and]
#enddef

#define HAVE_SIDE3_COUNT
    [and]
        [not]
            [have_unit]
                side=3,5,6,7,8
                [not]
                    status=poisoned
                [/not]
                [not]
                    status=guardian
                [/not]
                [not]
                    status=roamer
                [/not]
                count="$($enemy.min_spawn + 1)"-99999
            [/have_unit]
        [/not]
    [/and]
#enddef

#define HAVE_SIDE4_COUNT
    [and]
        [not]
            [have_unit]
                side=4,5,6,7,8
                [not]
                    status=poisoned
                [/not]
                [not]
                    status=guardian
                [/not]
                [not]
                    status=roamer
                [/not]
                count="$($enemy.min_spawn + 1)"-99999
            [/have_unit]
        [/not]
    [/and]
#enddef

#define HAVE_SIDE5_COUNT
    [and]
        [not]
            [have_unit]
                side=5,8
                [not]
                    status=poisoned
                [/not]
                [not]
                    status=guardian
                [/not]
                [not]
                    status=roamer
                [/not]
                count="$($enemy.min_spawn + 1)"-99999
            [/have_unit]
        [/not]
    [/and]
#enddef

#define HAVE_SIDE6_COUNT
    [and]
        [not]
            [have_unit]
                side=6,8
                [not]
                    status=poisoned
                [/not]
                [not]
                    status=guardian
                [/not]
                [not]
                    status=roamer
                [/not]
                count="$($enemy.min_spawn + 1)"-99999
            [/have_unit]
        [/not]
    [/and]
#enddef

#define HAVE_SIDE7_COUNT
    [and]
        [not]
            [have_unit]
                side=7,8
                [not]
                    status=poisoned
                [/not]
                [not]
                    status=guardian
                [/not]
                [not]
                    status=roamer
                [/not]
                [not]
                    role=curse
                [/not]
                count="$($enemy.min_spawn + 1)"-99999
            [/have_unit]
        [/not]
    [/and]
#enddef

#define HAVE_SIDE9_COUNT
    [and]
        [not]
            [have_unit]
                side=9
                [not]
                    status=pilgrim
                [/not]
                [not]
                    type=Caravan
                [/not]
                count="$($enemy.min_ally_spawn + 1)"-99999
            [/have_unit]
        [/not]
    [/and]
#enddef

# default aspect values /usr/share/games/wesnoth/1.14/data/ai/utils/default_config.cfg
# https://wiki.wesnoth.org/RCA_AI
# https://wiki.wesnoth.org/AiWML
# https://wiki.wesnoth.org/Micro_AIs
# https://wiki.wesnoth.org/Modifying_AI_Components
# AI_CONTROLLER values Aggressive: (aggression=0.9, caution=0.1) Defensive: (aggression=0.1, caution=1.0) Goal (value=20) protect_radius=6
# All scenarios have the same enemy sides, so I've defined them as macros
# for convenience. Each side macro also calls the events that
# place new enemies

#define SIDE_AI_AGGRESSION SIDE VALUE
    [modify_ai]
        side={SIDE}
        action=add
        path=aspect[aggression].facet[]
        [facet]
            id=aggression{SIDE}
            value={VALUE}
        [/facet]
    [/modify_ai]
#enddef

#define SIDE_AI_CAUTION SIDE VALUE
    [modify_ai]
        side={SIDE}
        action=add
        path=aspect[caution].facet[]
        [facet]
            id=caution{SIDE}
            value={VALUE}
        [/facet]
    [/modify_ai]
#enddef

#define SIDE_AI_VILLAGE_VALUE SIDE VALUE
    [modify_ai]
        side={SIDE}
        action=add
        path=aspect[village_value].facet[]
        [facet]
            id=village_value{SIDE}
            value={VALUE}
        [/facet]
    [/modify_ai]
#enddef

#define SIDE_AI_GOAL_TARGET SIDE
    [modify_ai]
        side={SIDE}
        action=add
        path=goal[]
        [goal]
            id=target{SIDE}
            name=target
            [criteria]
                side=1
                #id=Hero
            [/criteria]
            value=20
        [/goal]
    [/modify_ai]
#enddef

#define SIDE_AI_GOAL_TARGET_LOCATION SIDE
    [modify_ai]
        side={SIDE}
        action=add
        path=goal[]
        [goal]
            id=target_location{SIDE}
            name=target_location
            [criteria]
                [and]
                    [filter_owner]
                        side=1
                    [/filter_owner]
                    terrain=*^V*
                [/and]
                [or]
                    terrain=*^Wm,*^Yf,*^Yfo,*^Yb,*^Ybo,*^Ys,*^Yso,*^Yu,*^Yuo,*^Yt,*^Yto,*^Ya,*^Yao,*^Yws,*^Yga,*^Yge,*^Ygx,*^Ygy,*^Ymb,*^Ymc,*^Ymd,Ywb,Ke^Yk,Kea^Yk,Ce,Cea,Ket
                [/or]
            [/criteria]
            value=10
        [/goal]
    [/modify_ai]
#enddef

#define SIDE_AI_GOAL_PROTECT_UNIT SIDE
    [modify_ai]
        side={SIDE}
        action=add
        path=goal[]
        [goal]
            id=protect_unit{SIDE}
            name=protect_unit
            [criteria]
                side={SIDE}
                canrecruit=yes
            [/criteria]
            protect_radius=6
            value=30
        [/goal]
    [/modify_ai]
#enddef

#define SIDE_AI_GOAL_PROTECT_LOCATION SIDE X Y
    [modify_ai]
        side={SIDE}
        action=add
        path=goal[]
        [goal]
            id=protect_location{SIDE}
            name=protect_location
            [criteria]
                x={X}
                y={Y}
            [/criteria]
            protect_radius=6
            value=30
        [/goal]
    [/modify_ai]
#enddef

#define IS_LEADER
    #[variables]
    #	leader=yes
    #[/variables]
    [status]
        leader=yes
    [/status]
#enddef

#define FILTER_FOR_LEADER
    #[filter_wml]
    #	{IS_LEADER}
    #[/filter_wml]
    status=leader
    #formula="wml_vars.leader=1"
#enddef

#define IS_ROAMER
    #[variables]
    #	roamer=yes
    #[/variables]
    [status]
        roamer=yes
    [/status]
#enddef

#define FILTER_FOR_ROAMER
    #[filter_wml]
    #	{IS_ROAMER}
    #[/filter_wml]
    status=roamer
    #formula="wml_vars.roamer=1"
#enddef

#define ENEMY_GOLD_REWARD
    [event]
        name=last breath
        id=enemy_cost
        first_time_only=no

        [gold]
            side=$second_unit.side
            amount="$(floor($unit.cost * 13 / 100.0))"
        [/gold]
        [if]
            {VARIABLE_CONDITIONAL second_unit.side numerical_equals 1}
            {VARIABLE_CONDITIONAL wf_vars.economy boolean_equals yes}
            [then]
                [gold]
                    side=1
                    amount="$( ($unit.level + 1) * ({LUMP_KILL} + $quota.trade_kill) )"
                [/gold]
            [/then]
        [/if]
    [/event]
    [event]
        name=last breath
        id=enemy_leader_last_breath
        first_time_only=no
        [filter]
            side=2,3,4,5,6,7,8
            {FILTER_FOR_LEADER}
        [/filter]
        [filter_second]
            side=1
        [/filter_second]

        [switch]
            variable=unit.side
            [case]
                value=5
                [if]
                    {VARIABLE_CONDITIONAL unit.canrecruit equals yes}
                    [then]
                        {LAST_BREATH_ORCS_FIRST_A}
                    [/then]
                    [else]
                        {LAST_BREATH_ORCS_FIRST_B}
                    [/else]
                [/if]
                [if]
                    [have_unit]
                        side=5
                        [not]
                            id=$unit.id
                        [/not]
                    [/have_unit]
                    [then]
                        [store_unit]
                            [filter]
                                side=5
                                [not]
                                    id=$unit.id
                                [/not]
                            [/filter]
                            variable=other_orc
                        [/store_unit]

                        {LAST_BREATH_ORCS_FIRST_C}
                        {CLEAR_VARIABLE other_orc}
                    [/then]
                [/if]
            [/case]
            [case]
                value=6
                [switch]
                    variable=unit.role
                    [case]
                        value=elf_leader
                        [if]
                            {VARIABLE_CONDITIONAL history.last_breath_elves_first equals yes}
                            {VARIABLE_CONDITIONAL history.last_breath_elves_second equals yes}
                            [then]
                                {VARIABLE history.last_breath_elves_third yes}
                                {LAST_BREATH_ELVES_THIRD}
                            [/then]
                        [/if]

                        [if]
                            {VARIABLE_CONDITIONAL history.last_breath_elves_first equals yes}
                            [then]
                                {DIALOGUE last_breath_elves_second (
                                    {LAST_BREATH_ELVES_SECOND}
                                )}
                            [/then]
                        [/if]

                        {DIALOGUE last_breath_elves_first (
                            {LAST_BREATH_ELVES_FIRST}
                        )}
                    [/case]
                    [case]
                        value=dwarf_leader
                        [if]
                            {VARIABLE_CONDITIONAL history.last_breath_dwarves_first equals yes}
                            {VARIABLE_CONDITIONAL history.last_breath_dwarves_second equals yes}
                            [then]
                                {VARIABLE history.last_breath_dwarves_third yes}
                                {LAST_BREATH_DWARVES_THIRD}
                            [/then]
                        [/if]

                        [if]
                            {VARIABLE_CONDITIONAL history.last_breath_dwarves_first equals yes}
                            [then]
                                {DIALOGUE last_breath_dwarves_second (
                                    {LAST_BREATH_DWARVES_SECOND}
                                )}
                            [/then]
                        [/if]

                        {DIALOGUE last_breath_dwarves_first (
                            {LAST_BREATH_DWARVES_FIRST}
                        )}
                    [/case]
                [/switch]
            [/case]
            [case]
                value=8
                [switch]
                    variable=unit.role
                    [case]
                        value=gryphon_king
                        #{LAST_BREATH_CALAMITY_GRYPHONS}
                    [/case]
                    [case]
                        value=yeti_leader
                        #{LAST_BREATH_CALAMITY_YETI}
                    [/case]
                    [case]
                        value=lich
                        {LAST_BREATH_CALAMITY_LICH}
                    [/case]
                    [case]
                        value=evil_loyalist
                        #{LAST_BREATH_CALAMITY_LOYALISTS}
                    [/case]
                    [case]
                        value=saurian_leader
                        {LAST_BREATH_CALAMITY_SAURIANS}
                    [/case]
                    [case]
                        value=drake_leader
                        {LAST_BREATH_CALAMITY_DRAKES}
                    [/case]
                    [case]
                        value=dwarf_calamity_leader
                        {LAST_BREATH_CALAMITY_DWARVES}
                    [/case]
                    [case]
                        value=orc_calamity_leader
                        {LAST_BREATH_CALAMITY_ORCS}
                    [/case]
                [/switch]
            [/case]
        [/switch]
    [/event]

    [event]
        name=die
        id=enemy_leader_die
        first_time_only=no
        [filter]
            side=2,3,4,5,6,7,8,9
            {FILTER_FOR_LEADER}
        [/filter]
        [filter_second]
            side=1
        [/filter_second]

        [store_gold]
            side=$unit.side
            variable=gold_store
        [/store_gold]
        {VARIABLE loot_gold 0}
        [switch]
            variable=unit.side
            [case]
                value=2
                {RANDOM_VAR loot_gold 40..50}
                {DIE_GUARDIAN}
            [/case]
            [case]
                value=3
                {RANDOM_VAR loot_gold 50..60}
                {DIE_OUTLAW}
            [/case]
            [case]
                value=4
                {RANDOM_VAR loot_gold 60..70}
                {DIE_BANDIT}
            [/case]
            [case]
                value=5
                {RANDOM_VAR loot_gold 80..90}
                {DIE_ORCS}
            [/case]
            [case]
                value=6
                {RANDOM_VAR loot_gold 70..80}
                [switch]
                    variable=unit.role
                    [case]
                        value=elf_leader
                        {DIE_ELVES}
                    [/case]
                    [case]
                        value=dwarf_leader
                        {DIE_DWARVES}
                    [/case]
                [/switch]
            [/case]
            [case]
                value=7
                {RANDOM_VAR loot_gold 80..90}
                {DIE_UNDEAD}
            [/case]
            [case]
                value=8
                {RANDOM_VAR loot_gold 90..100}
                [switch]
                    variable=unit.role
                    [case]
                        value=gryphon_king
                        {DIE_CALAMITY_GRYPHONS}
                    [/case]
                    [case]
                        value=yeti_leader
                        {DIE_CALAMITY_YETI}
                    [/case]
                    [case]
                        value=lich
                        {DIE_CALAMITY_LICH}
                    [/case]
                    [case]
                        value=evil_loyalist
                        {DIE_CALAMITY_LOYALISTS}
                    [/case]
                    [case]
                        value=saurian_leader
                        {DIE_CALAMITY_SAURIANS}
                    [/case]
                    [case]
                        value=drake_leader
                        {DIE_CALAMITY_DRAKES}
                    [/case]
                    [case]
                        value=dwarf_calamity_leader
                        {DIE_CALAMITY_DWARVES}
                    [/case]
                    [case]
                        value=orc_calamity_leader
                        {DIE_CALAMITY_ORCS}
                    [/case]
                [/switch]
            [/case]
        [/switch]
        #{VARIABLE_OP loot_gold add $gold_store}
        {LOOT_GOLD}
        [sound]
            name="gold.ogg"
        [/sound]
        [gold]
            side=$second_unit.side
            amount=$loot_gold
        [/gold]
        {CLEAR_VARIABLE loot_gold}
        {VARIABLE_OP gold_store multiply -1}
        [gold]
            side=$unit.side
            amount=$gold_store
        [/gold]
        {CLEAR_VARIABLE gold_store}
    [/event]
#enddef

#define ANIMAL_SIREN
    {VARIABLE quota.animal_siren yes}
    # Winter does this in start. So exclude them.
    [if]
        {VARIABLE_CONDITIONAL wf_vars.season_str not_equals "winter"}
        [then]
            #{SIDE_AI_GOAL_TARGET 2}

            [micro_ai]
                side=2
                ai_type=wf_loiter_guardian
                ca_id=wf_loiter_guardian_animals
                action=delete
            [/micro_ai]
            [micro_ai]
                side=2
                ai_type=lurkers
                ca_id=lurkers_wolf
                action=delete
            [/micro_ai]
            [micro_ai]
                side=2
                ai_type=lurkers
                ca_id=lurkers_sea
                action=delete
            [/micro_ai]
            [micro_ai]
                side=2
                ai_type=coward
                ca_id=coward_animals
                action=delete
            [/micro_ai]
            [micro_ai]
                side=2
                ai_type=wf_curse_guardian
                ca_id=wf_curse_guardian_feral
                action=delete
            [/micro_ai]
            [micro_ai]
                side=2
                ai_type=wf_curse_guardian
                ca_id=wf_curse_guardian_sheepish
                action=delete
            [/micro_ai]
            [micro_ai]
                side=2
                ai_type=wf_curse_guardian
                ca_id=wf_curse_guardian_pinetree
                action=delete
            [/micro_ai]
            [micro_ai]
                side=2
                ai_type=wf_curse_guardian
                ca_id=wf_curse_guardian_piggie
                action=delete
            [/micro_ai]
        [/then]
    [/if]

    [micro_ai]
        side=2
        ai_type=lurkers
        ca_id=lurkers_wose
        action=delete
    [/micro_ai]
    [micro_ai]
        side=2
        ai_type=lurkers
        ca_id=lurkers_mudcrawler
        action=delete
    [/micro_ai]
#enddef

#define FERAL_ATTACK
    side=2
    ai_type=wf_curse_guardian
    ca_id=wf_curse_guardian_feral
    # less than Retreat 40000 more than loiter 30000
    ca_score=31000
    [filter]
        race=ogre
        [not]
            status=guardian
        [/not]
        [not]
            status=roamer
        [/not]
    [/filter]
    [filter_second]
        {FILTER_FOR_CURSE stench}
    [/filter_second]
#enddef
#define SHEEPISH_ATTACK
    side=2
    ai_type=wf_curse_guardian
    ca_id=wf_curse_guardian_sheepish
    # more than lurkers 250000
    ca_score=260000
    [filter]
        race=wolf
        [not]
            status=guardian
        [/not]
        [not]
            status=roamer
        [/not]
    [/filter]
    [filter_second]
        {FILTER_FOR_CURSE sheepish}
    [/filter_second]
#enddef
#define PINETREE_ATTACK
    side=2
    ai_type=wf_curse_guardian
    ca_id=wf_curse_guardian_pinetree
    # more than lurkers 250000
    ca_score=260000
    [filter]
        race=wose
        [not]
            status=guardian
        [/not]
        [not]
            status=roamer
        [/not]
    [/filter]
    [filter_second]
        {FILTER_FOR_CURSE pinetree}
    [/filter_second]
#enddef
#define PIGGIE_ATTACK
    side=2
    ai_type=wf_curse_guardian
    ca_id=wf_curse_guardian_piggie
    # less than Retreat 40000 more than loiter 30000
    ca_score=31000
    [filter]
        type=WF_Tusklet,WF_Tusker,WF_Gorer,Piglet,Woodland Boar
        [not]
            status=guardian
        [/not]
        [not]
            status=roamer
        [/not]
    [/filter]
    [filter_second]
        {FILTER_FOR_CURSE piggie}
    [/filter_second]
#enddef

#define LOITER_ANIMALS
    side=2
    ai_type=wf_loiter_guardian
    ca_id=wf_loiter_guardian_animals
    # less than Retreat 40000
    ca_score=30000
    [filter]
        side=2
        [not]
            status=guardian
        [/not]
        [not]
            status=roamer
        [/not]
    [/filter]
    [filter_location]
        {X_AND_Y_ARE_ON_THE_MAP}
    [/filter_location]
#enddef

#define LURKERS_WOLF
    side=2
    ai_type=lurkers
    ca_id=lurkers_wolf
    # More than goto 200000
    ca_score=250000
    [filter]
        race=wolf
        [not]
            status=guardian
        [/not]
        [not]
            status=roamer
        [/not]
    [/filter]
    [filter_location]
        terrain=*^F*,H*^*,M*^*,*^V*
    [/filter_location]
    [filter_location_wander]
        terrain=*^F*,H*^*,M*^*,*^V*
    [/filter_location_wander]
#enddef

#define LURKERS_SEA
    side=2
    ai_type=lurkers
    ca_id=lurkers_sea
    # More than goto 200000
    ca_score=250000
    [filter]
        type={ANIMALS_LURKERS_SEA}
        [not]
            status=guardian
        [/not]
        [not]
            status=roamer
        [/not]
    [/filter]
    [filter_location]
        terrain=*^*
    [/filter_location]
    [filter_location_wander]
        terrain=W*^*,S*^*
    [/filter_location_wander]
#enddef

#define LURKERS_WOSE
    side=2
    ai_type=lurkers
    ca_id=lurkers_wose
    # More than goto 200000
    ca_score=250000
    [filter]
        race=wose
        [not]
            status=guardian
        [/not]
        [not]
            status=roamer
        [/not]
    [/filter]
    [filter_location]
        terrain=*^F*,H*^*,M*^*
    [/filter_location]
    [filter_location_wander]
        terrain=*^F*
    [/filter_location_wander]
#enddef

#define LURKERS_MUDCRAWLER
    side=2
    ai_type=lurkers
    ca_id=lurkers_mudcrawler
    # More than goto 200000
    ca_score=250000
    [filter]
        type=Mudcrawler
        [not]
            status=guardian
        [/not]
        [not]
            status=roamer
        [/not]
    [/filter]
    [filter_location]
        terrain=S*^*
    [/filter_location]
    [filter_location_wander]
        terrain=S*^*
    [/filter_location_wander]
#enddef

#define COWARD_ANIMALS
    side=2
    ai_type=coward
    ca_id=coward_animals
    # More than goto 200000
    ca_score=250000
    [filter]
        type=Rabbit,Giant Rat
        [not]
            status=guardian
        [/not]
        [not]
            status=roamer
        [/not]
    [/filter]
#enddef

# ----- Animals ----------------------------------------------------------
#define ANIMALS_ARE_SIDE2 LEADER_VALUE
    [side]
        # Creates the animals as side 2. Leader value must be supplied -- animals
        # will be more aggressive during the winter. New animals spawn semi-randomly.
        side=2
        controller=ai
        team_name=wild_animals,calamity_animals
        user_team_name=_"Wild animals"
        no_leader=yes
        #hidden=yes
        shroud=no
        fog=no
        gold=0
        income={ENEMY_INCOME}
        #[ai]	# make the AI treat each unit as independently as possible
        #	#caution=0.25
        #	#aggression=0.8
        #	#attack_depth=1	# IGNORED, IS THERE AN EQUIVALENT?
        #	#grouping=no
        #	#leader_value={LEADER_VALUE}	# allows me to make animals attack your town only in the winter
        #	#simple_targeting=yes
        #	village_value=0.5
        #	# Make all enemies aggressive
        #	aggression=0.8
        #	caution=0.2
        #[/ai]
        #{MICRO_AI_LURKERS} # HACK FOR 1.11.6, REMOVE IN FUTURE
    [/side]

    # Micro-AI tag has to be applied in an event tag
    [event]
        name=prestart

        {VARIABLE quota.quota 1} # Needed for name=victory
        {VARIABLE quota.animals 1}
        {VARIABLE quota.animal_guardian 1}
        {VARIABLE quota.animal_roamer 1}
        {VARIABLE quota.animal_siren no}
        # Additional gold given on kills when carvan reaches edge
        {VARIABLE quota.trade_kill 0}

        # taunt quotas
        {VARIABLE quota.taunt_2a $wf_vars.expand_rank}
        {VARIABLE quota.taunt_2g $wf_vars.expand_rank}
        {VARIABLE quota.taunt_3 $wf_vars.expand_rank}
        {VARIABLE quota.taunt_4 $wf_vars.expand_rank}
        {VARIABLE quota.taunt_5 $wf_vars.expand_rank}
        {VARIABLE quota.taunt_6e $wf_vars.expand_rank}
        {VARIABLE quota.taunt_6d $wf_vars.expand_rank}
        {VARIABLE quota.taunt_7 $wf_vars.expand_rank}

        {VARIABLE_OP quota.taunt_2a add 1}
        {VARIABLE_OP quota.taunt_2g add 1}
        {VARIABLE_OP quota.taunt_3 add 1}
        {VARIABLE_OP quota.taunt_4 add 1}
        {VARIABLE_OP quota.taunt_5 add 1}
        {VARIABLE_OP quota.taunt_6e add 1}
        {VARIABLE_OP quota.taunt_6d add 1}
        {VARIABLE_OP quota.taunt_7 add 1}

        {SIDE_AI_AGGRESSION 2 {ON_DIFFICULTY 0.8 0.8 0.9}}
        {SIDE_AI_CAUTION 2 {ON_DIFFICULTY 0.2 0.2 0.1}}
        {SIDE_AI_VILLAGE_VALUE 2 0.5}

        {SIDE_AI_GOAL_TARGET 2}

        #[modify_ai]
        #	side=2
        #	action=add
        #	path=goal[]
        #	[goal]	# not sure if this works with simple targeting
        #		id=curse2
        #		name=target
        #		[criteria]
        #			{FILTER_FOR_CURSE feral}
        #		[/criteria]
        #		value=10
        #	[/goal]
        #[/modify_ai]
        [micro_ai]
            action=add
            {LOITER_ANIMALS}
            stationary=yes
        [/micro_ai]
        [micro_ai]
            action=add
            {LURKERS_WOLF}
            stationary=yes
        [/micro_ai]
        [micro_ai]
            action=add
            {LURKERS_SEA}
            stationary=yes
        [/micro_ai]
        [micro_ai]
            action=add
            {LURKERS_WOSE}
            stationary=yes
        [/micro_ai]
        [micro_ai]
            action=add
            {LURKERS_MUDCRAWLER}
            stationary=yes
        [/micro_ai]
        [micro_ai]
            action=add
            {COWARD_ANIMALS}
            distance=5
            attack_if_trapped=yes
        [/micro_ai]
        [micro_ai]
            action=add
            {FERAL_ATTACK}
        [/micro_ai]
        [micro_ai]
            action=add
            {SHEEPISH_ATTACK}
        [/micro_ai]
        [micro_ai]
            action=add
            {PINETREE_ATTACK}
        [/micro_ai]
        [micro_ai]
            action=add
            {PIGGIE_ATTACK}
        [/micro_ai]
    [/event]

    [event]
        name=start

        # Season prune
        # Kill off old farts
        [kill]
            side=2,3,4,5,6,7,8
            formula="wml_vars.seasons>{ENEMY_SEASONS}"
            animate=no
            fire_event=no
        [/kill]

        # Tentacle of the Deep on ice or ground die.
        [kill]
            side=2
            type=Tentacle of the Deep
            [filter_location]
                [not]
                    terrain=W*^*
                [/not]
            [/filter_location]
            animate=no
            fire_event=no
        [/kill]

#ifver WESNOTH_VERSION >= 1.15.0
        # Great Seahorse on ice or ground die.
        [kill]
            side=2
            type=Great Seahorse
            [filter_location]
                [not]
                    terrain=W*^*,Ss^*
                [/not]
            [/filter_location]
            animate=no
            fire_event=no
        [/kill]
#endif
    [/event]

    [event]
        #name=side 2 turn end
        name=spawn_side_2_roamer
        id=spawn_side_2_roamer
        first_time_only=no

        {VARIABLE turn_temp $turn_number}
        {VARIABLE_OP turn_temp modulo 2}

        {RANDOM_VAR random 1..100}
        [if]
            {VARIABLE_CONDITIONAL random less_than 100}
            {HAVE_ROAMER_COUNT}
            {VARIABLE_CONDITIONAL quota.animal_roamer greater_than 0}
            {VARIABLE_CONDITIONAL turn_temp numerical_equals 0}
            #{VARIABLE_CONDITIONAL relations.outlaws less_than 1}
            #{VARIABLE_CONDITIONAL relations.bandits less_than 1}
            #{VARIABLE_CONDITIONAL relations.orc_raids less_than 1}
            #{VARIABLE_CONDITIONAL relations.undead_raids less_than 1}
            [then]
                {FIRE_EVENT new_animal_roamer}
                [unhide_unit]
                [/unhide_unit]
            [/then]
        [/if]
        {CLEAR_VARIABLE turn_temp}
        {CLEAR_VARIABLE random}
    [/event]

    [event]
        name=new_animal_roamer
        id=new_animal_roamer
        first_time_only=no

        {VARIABLE REPEAT_b 0}

        [store_locations]
            variable=outlaw_places
            {X_AND_Y_ARE_ON_THE_MAP}
            terrain=!,W*^*,*^Y*,*^V*,K*^*,C*^*
            {NOT_FILTER}
            {NOT_INNER_MAP}
            {NOT_NEAR_SIDE 1 10}
            {NOT_NEAR_SIDE (3,4,5,6,7,8) 5}
            {NOT_NEAR_SIGNS 10}
        [/store_locations]

        [if]
            {VARIABLE_CONDITIONAL outlaw_places.length greater_than 0}
            [then]
                {RANDOM_VAR rnd_i 0.."$($outlaw_places.length-1)"}
                {RANDOM_VAR rnd_roamer {ANIMALS_ROAMERS_LIST}}
                {RANDOM_VAR repeat_count "2,2,2,3"}
                {WF_REPEAT $repeat_count (
                    [unit]
                        animate=yes
                        passable=yes
                        placement=map
                        random_traits=no
                        side=2
                        type=$rnd_roamer
                        x=$outlaw_places[$rnd_i].x
                        y=$outlaw_places[$rnd_i].y
                        {IS_ROAMER}
                        {MOD_OBJECT_LOYAL}
                    [/unit]
                    {VARIABLE_OP REPEAT_b add 1}
                )}
                {CLEAR_VARIABLE repeat_count}
            [/then]
        [/if]
        {CLEAR_VARIABLE rnd_roamer}
        {CLEAR_VARIABLE outlaw_places}
        {CLEAR_VARIABLE rnd_i}
        {CLEAR_VARIABLE REPEAT_b}
    [/event]

    [event]
        #name=side 2 turn end
        name=spawn_side_2_guardian
        id=spawn_side_2_guardian
        first_time_only=no

        {RANDOM_VAR random 1..100}
        [if]
            {VARIABLE_CONDITIONAL random less_than 100}
            {HAVE_GUARDIAN_COUNT}
            {VARIABLE_CONDITIONAL quota.animal_guardian greater_than 0}
            [then]
                {FIRE_EVENT new_animal_guardian}
                [unhide_unit]
                [/unhide_unit]
            [/then]
        [/if]
        {CLEAR_VARIABLE random}
    [/event]

    [event]
        name=new_animal_guardian
        id=new_animal_guardian
        first_time_only=no

        {SPAWN_GUARDIAN_GROUP 2 6}
    [/event]

    [event]
        # A semi-random chance for a new animal to spawn on each turn. Animals spawn
        # at the end of their side turn to prevent an animal appearing out of nowhere
        # and attacking. Animals tend toward equilibrium -- if you've killed a bunch,
        # it's more likely that more will spawn.
        #name=side 2 turn end
        name=spawn_side_2
        id=spawn_side_2
        first_time_only=no
        [store_unit]
            variable=animal_list
            [filter]
                side=2
            [/filter]
        [/store_unit]
        {RANDOM_VAR chance 1..100}
        {VARIABLE threshold "$($animal_list.length*75.0/$enemy.num_animals)"}
        [if]
            {VARIABLE_CONDITIONAL chance greater_than $threshold}
            {HAVE_ANIMAL_COUNT}
            {VARIABLE_CONDITIONAL quota.animals greater_than 0}
            [then]
                #{WF_DEBUG "Spawning 3 new random animals t: $turn_number r: $chance > $threshold"}
                #{REPEAT 3 {FIRE_EVENT new_random_animal}}
                {FIRE_EVENT new_random_animal}
                {FIRE_EVENT new_random_animal}
                {FIRE_EVENT new_random_animal}
                [unhide_unit]
                [/unhide_unit]
            [/then]
        [/if]
        {CLEAR_VARIABLE chance}
        {CLEAR_VARIABLE threshold}
        {CLEAR_VARIABLE animal_list}

        # WOLF Alternate between stationary yes/no
        [if]
            {VARIABLE_CONDITIONAL wf_vars.season_str not_equals "winter"}
            {VARIABLE_CONDITIONAL quota.animal_siren boolean_equals no}
            [then]
                {RANDOM_VAR stationary (yes,yes,yes,no)}
                [if]
                    {VARIABLE_CONDITIONAL stationary boolean_equals yes}
                    [then]
                        [micro_ai]
                            action=change
                            {LURKERS_WOLF}
                            stationary=yes
                        [/micro_ai]
                    [/then]
                    [else]
                        [micro_ai]
                            action=change
                            {LURKERS_WOLF}
                            stationary=no
                        [/micro_ai]
                    [/else]
                [/if]
            [/then]
        [/if]

        # SEA Alternate between stationary yes/no
        [if]
            {VARIABLE_CONDITIONAL wf_vars.season_str not_equals "winter"}
            {VARIABLE_CONDITIONAL quota.animal_siren boolean_equals no}
            [then]
                {RANDOM_VAR stationary (yes,yes,yes,no)}
                [if]
                    {VARIABLE_CONDITIONAL stationary boolean_equals yes}
                    [then]
                        [micro_ai]
                            action=change
                            {LURKERS_SEA}
                            stationary=yes
                        [/micro_ai]
                    [/then]
                    [else]
                        [micro_ai]
                            action=change
                            {LURKERS_SEA}
                            stationary=no
                        [/micro_ai]
                    [/else]
                [/if]
            [/then]
        [/if]

        # WOSE Alternate between stationary yes/no
        [if]
            {VARIABLE_CONDITIONAL quota.animal_siren boolean_equals no}
            [then]
                {RANDOM_VAR stationary (yes,yes,yes,no)}
                [if]
                    {VARIABLE_CONDITIONAL stationary boolean_equals yes}
                    [then]
                        [micro_ai]
                            action=change
                            {LURKERS_WOSE}
                            stationary=yes
                        [/micro_ai]
                    [/then]
                    [else]
                        [micro_ai]
                            action=change
                            {LURKERS_WOSE}
                            stationary=no
                        [/micro_ai]
                    [/else]
                [/if]
            [/then]
        [/if]

        # MUDCRAWLER Alternate between stationary yes/no
        [if]
            {VARIABLE_CONDITIONAL quota.animal_siren boolean_equals no}
            [then]
                {RANDOM_VAR stationary (yes,yes,yes,no)}
                [if]
                    {VARIABLE_CONDITIONAL stationary boolean_equals yes}
                    [then]
                        [micro_ai]
                            action=change
                            {LURKERS_MUDCRAWLER}
                            stationary=yes
                        [/micro_ai]
                    [/then]
                    [else]
                        [micro_ai]
                            action=change
                            {LURKERS_MUDCRAWLER}
                            stationary=no
                        [/micro_ai]
                    [/else]
                [/if]
            [/then]
        [/if]

        # ANIMALS Alternate between stationary yes/no
        [if]
            {VARIABLE_CONDITIONAL wf_vars.season_str not_equals "winter"}
            {VARIABLE_CONDITIONAL quota.animal_siren boolean_equals no}
            [then]
                {RANDOM_VAR stationary (yes,yes,yes,no)}
                [if]
                    {VARIABLE_CONDITIONAL stationary boolean_equals yes}
                    [then]
                        [micro_ai]
                            action=change
                            {LOITER_ANIMALS}
                            stationary=yes
                        [/micro_ai]
                    [/then]
                    [else]
                        [micro_ai]
                            action=change
                            {LOITER_ANIMALS}
                            stationary=no
                        [/micro_ai]
                    [/else]
                [/if]
            [/then]
        [/if]
        {CLEAR_VARIABLE stationary}
    [/event]

    [event]
        name=new_random_animal
        id=new_random_animal
        first_time_only=no

        # Creates a new animal of (weighted) random type and places it at a
        # random location on the map.
        # boars at all levels (copy from Borstep)
        # level0: vamp bat, giant rat, falcon, Tusklet, Mudcrawler, Rabbit
        # level1: blood bat, wolf, elder falcon, young ogre, Tentacle of the Deep, Tusker, Giant Mudcrawler, Lynx
        # level2: great wolf, ogre, dread bat, bear (need to make), gryphon, Gorer
        # level3: direwolf, grizzly bear? (need to make)
        {RANDOM_VAR rnd_level 1..100}
        {DIFFICULTY_VAR multiplier 0.9 1.0 1.1}
        {VARIABLE_OP rnd_level multiply $multiplier|}

        # Default level 0 Tusklet
        {VARIABLE rnd_type "WF_Tusklet"}

        [if]
            {VARIABLE_CONDITIONAL rnd_level less_than_equal_to 20}
            [then]	# generate a level 0 animal
                {RANDOM_VAR rnd_type {ANIMALS_LEVEL_0}}
            [/then]
        [/if]
        [if]
            [and]
                {VARIABLE_CONDITIONAL rnd_level greater_than 20}
                {VARIABLE_CONDITIONAL rnd_level less_than_equal_to 40}
            [/and]
            [then]	# generate a level 0 animal
                {RANDOM_VAR rnd_type {ANIMALS_LEVEL_0}}
                [if]
                    {VARIABLE_CONDITIONAL wf_vars.season greater_than_equal_to 4}
                    [then]
                        {RANDOM_VAR rnd_type {ANIMALS_LEVEL_1}}
                    [/then]
                [/if]
            [/then]
        [/if]
        [if]
            [and]
                {VARIABLE_CONDITIONAL rnd_level greater_than 40}
                {VARIABLE_CONDITIONAL rnd_level less_than_equal_to 85}
            [/and]
            [then]	# generate a level 1 animal, prefer wolves
                # taking out blood bats because they suck
                {RANDOM_VAR rnd_type {ANIMALS_LEVEL_1}}
            [/then]
        [/if]
        [if]
            [and]
                {VARIABLE_CONDITIONAL rnd_level greater_than 85}
                {VARIABLE_CONDITIONAL rnd_level less_than_equal_to 95}
            [/and]
            [then]	# generate a level 2 animal, prefer wolves
                # Removed Gryphons and Dread Bats -- they are %^#@!&* annoying
                # First year is level 0,1
                {RANDOM_VAR rnd_type {ANIMALS_LEVEL_1}}
                [if]
                    {VARIABLE_CONDITIONAL wf_vars.season greater_than_equal_to 4}
                    [then]
                        {RANDOM_VAR rnd_type {ANIMALS_LEVEL_2}}
                    [/then]
                [/if]
            [/then]
        [/if]
        [if]
            {VARIABLE_CONDITIONAL rnd_level greater_than 95}
            [then]	# generate a level 3 animal, rare
                # First year rarely level 2
                {RANDOM_VAR rnd_type {ANIMALS_LEVEL_2}}
                [if]
                    {VARIABLE_CONDITIONAL wf_vars.season greater_than_equal_to 4}
                    [then]
                        {RANDOM_VAR rnd_type {ANIMALS_LEVEL_3}}
                    [/then]
                [/if]
            [/then]
        [/if]

        [switch]
            variable=rnd_type
            [case]
                value=Water Serpent
                {VARIABLE allowed_terrains "!,*^V*,!,W*^*,Ss^*"}
            [/case]
            [case]
                value=Tentacle of the Deep
                {VARIABLE allowed_terrains "!,*^V*,!,W*^*"}
            [/case]
            [case]
                value=Cuttle Fish
                {VARIABLE allowed_terrains "!,*^V*,!,W*^*"}
            [/case]
            [case]
                value=Sea Serpent
                {VARIABLE allowed_terrains "!,*^V*,!,W*^*"}
            [/case]
            [case]
                value=Giant Mudcrawler
                {VARIABLE allowed_terrains "!,*^V*,!,Sm^*"}
            [/case]
            [case]
                value=Mudcrawler
                {VARIABLE allowed_terrains "!,*^V*,!,Sm^*"}
            [/case]
            [case]
                value=Wose
                {VARIABLE allowed_terrains "*^F*"}
            [/case]
            [case]
                value=Elder Wose
                {VARIABLE allowed_terrains "*^F*"}
            [/case]
            [case]
                value=Ancient Wose
                {VARIABLE allowed_terrains "*^F*"}
            [/case]
#ifver WESNOTH_VERSION >= 1.15.0
            [case]
                value=Wose Sapling
                {VARIABLE allowed_terrains "*^F*"}
            [/case]
            [case]
                value=Great Seahorse
                {VARIABLE allowed_terrains "!,*^V*,!,W*^*,Ss^*"}
            [/case]
#endif
            [else]
                {VARIABLE allowed_terrains "!,*^V*,!,*^F*,H*^*,M*^*"}
            [/else]
        [/switch]

        [store_locations]
            variable=wild_places
            {X_AND_Y_ARE_ON_THE_MAP}
            terrain=$allowed_terrains
            {NOT_FILTER}
            {NOT_FILTER_ADJACENT}
        [/store_locations]

        [if]
            {VARIABLE_CONDITIONAL wild_places.length greater_than 0}
            [then]
                {RANDOM_VAR rnd_i 0.."$($wild_places.length-1)"}

                [unit]
                    animate=yes
                    passable=yes
                    placement=map
                    random_traits=yes
                    side=2
                    type=$rnd_type
                    x=$wild_places[$rnd_i].x
                    y=$wild_places[$rnd_i].y
                    {MOD_OBJECT_LOYAL}
                [/unit]
            [/then]
        [/if]

        {CLEAR_VARIABLE rnd_level,multiplier,rnd_type,rnd_i,allowed_terrains,wild_places}
    [/event]

    [event]
        #name=side 2 turn
        name=unwalkable_castle
        id=unwalkable_castle
        first_time_only=no
        [if]
            {VARIABLE_CONDITIONAL wf_vars.unwalkable_castle equals yes}
            [then]
                [terrain]
                    [and]
                        terrain=Ch,Cha
                    [/and]
                    terrain=^Qov
                    layer=overlay
                [/terrain]
            [/then]
        [/if]
    [/event]
#enddef

#define SPAWN_GUARDIAN_GROUP SIDE COUNT
    {VARIABLE REPEAT_b 0}
    [if]
        {VARIABLE_CONDITIONAL relations.guardian_factions equals ""}
        #[or]
        #    {VARIABLE_CONDITIONAL relations.guardian_factions equals $null}
        #[/or]
        [then]
            {VARIABLE relations.guardian_factions "cotf,custom,custom_drakes,custom_dwarves,custom_elves,custom_orcs,custom_trolls,custom_undead,custom_wolves,custom_ogres,custom_zombies,custom_loyalists,custom_tuskers,custom_woses,custom_cotf"}
#ifhave ~add-ons/Wild_Frontiers/custom/umc_guardian.cfg
            {VARIABLE relations.guardian_factions "{WF_UMC_GUARDIAN},$relations.guardian_factions"}
#endif
        [/then]
    [/if]
    {WF_RAND_CHOICE $relations.guardian_factions}
    {VARIABLE rnd_guardian $random_choice}
    {CLEAR_VARIABLE random_choice}
    {WF_RAND_JOIN relations.guardian_factions}
    {CLEAR_VARIABLE random_choice_arr}
    [switch]
        variable=rnd_guardian
        {WF_FACTION_SWITCH}
#ifhave ~add-ons/Wild_Frontiers/custom/umc_guardian.cfg
        {WF_UMC_GUARDIAN_CASE}
#endif
        [else]
            #value=cotf
            {VARIABLE rnd_leader "Bandit,Trapper"}
            {VARIABLE rnd_recruit "Poacher,Thug"}
            {VARIABLE rnd_sound "ambient/birds2.ogg"}
            {VARIABLE rnd_team "Cotf"}
        [/else]
    [/switch]

    {CLEAR_VARIABLE rnd_sound}
    {CLEAR_VARIABLE rnd_team}

    [store_locations]
        variable=outlaw_places
        {X_AND_Y_ARE_ON_THE_MAP}
        terrain=!,W*^*,*^Y*,*^V*,K*^*,C*^*
        {NOT_FILTER}
        {NOT_INNER_MAP}
        {NOT_NEAR_SIDE 1 10}
        {NOT_NEAR_SIGNS 10}
    [/store_locations]

    [if]
        {VARIABLE_CONDITIONAL outlaw_places.length greater_than 0}
        [then]
            {RANDOM_VAR rnd_i 0.."$($outlaw_places.length-1)"}
            {RANDOM_VAR rnd_type $rnd_leader}
            [unit]
                animate=yes
                passable=yes
                placement=map
                random_traits=yes
                side={SIDE}
                type=$rnd_type
                x=$outlaw_places[$rnd_i].x
                y=$outlaw_places[$rnd_i].y
                ai_special=guardian
                {IS_HERO}
                {IS_LEADER}
                {MOD_OBJECT_LOYAL}
            [/unit]
            {VARIABLE_OP REPEAT_b add 1}
            {CLEAR_VARIABLE rnd_type}

            {WF_REPEAT {COUNT} (
                {RANDOM_VAR rnd_type $rnd_recruit}
                [unit]
                    animate=yes
                    passable=yes
                    placement=map
                    random_traits=yes
                    side={SIDE}
                    type=$rnd_type
                    x=$outlaw_places[$rnd_i].x
                    y=$outlaw_places[$rnd_i].y
                    ai_special=guardian
                    {MOD_OBJECT_LOYAL_OVERLAY}
                [/unit]
                {VARIABLE_OP REPEAT_b add 1}
                {CLEAR_VARIABLE rnd_type}
            )}
        [/then]
    [/if]
    {CLEAR_VARIABLE rnd_leader}
    {CLEAR_VARIABLE rnd_recruit}
    {CLEAR_VARIABLE rnd_guardian}
    {CLEAR_VARIABLE outlaw_places}
    {CLEAR_VARIABLE rnd_i}
    {CLEAR_VARIABLE REPEAT_b}
#enddef

#define SIMPLE_LEADER SIDE
    [micro_ai]
        side={SIDE}
        ai_type=simple_attack
        ca_id=simple_attack_side_{SIDE}
        action=add
        ca_score=110000
        [filter]
            canrecruit=no
            {FILTER_FOR_LEADER}
            [not]
                status=guardian
            [/not]
            [not]
                status=roamer
            [/not]
        [/filter]
        [filter_second]
            side=1
        [/filter_second]
        weapon=-1
    [/micro_ai]
#enddef

# ----- Outlaws ----------------------------------------------------------
#define OUTLAWS_ARE_SIDE3
    [side]
        # Creates outlaws as side 3, with a supplied JUMP (smaller means more
        # frequent appearances of these outlaws).
        # This side is "nice", in that they will not burn down your villages,
        # just your blacksmiths etc. and your encampments.
        side=3
        controller=ai
        team_name={ON_DIFFICULTY "outlaws" "outlaws,bandits" "outlaws,bandits"}
        user_team_name=_"Outlaws"
        no_leader=yes
        shroud=no
        fog=no
        share_maps=no
        gold=0
        income={ENEMY_INCOME}
        #[ai]
        #	#aggression=0.8
        #	#caution=0.25			# If caution is high, they never attack at all
        #	#grouping=defensive
        #	#leader_aggression=-0.5
        #	#leader_ignores_keep=yes	# Can't recruit, so no point
        #	#leader_value=1.0
        #	village_value=0.5
        #	# Make all enemies aggressive
        #	aggression=0.8
        #	caution=0.2
        #	#grouping=no
        #	#simple_targeting=yes
        #[/ai]
        {FLAG_VARIANT6 "ragged"}
    [/side]

    [event]
        name=prestart

        {SIDE_AI_AGGRESSION 3 {ON_DIFFICULTY 0.8 0.8 0.9}}
        {SIDE_AI_CAUTION 3 {ON_DIFFICULTY 0.2 0.2 0.1}}
        {SIDE_AI_VILLAGE_VALUE 3 0.5}

        {SIDE_AI_GOAL_TARGET 3}

        {SIMPLE_LEADER 3}

        #[goal]				# not the animals or orcs
        #	name=target
        #	[criteria]
        #		side=2
        #	[/criteria]
        #	value=0.1
        #[/goal]
        #[goal]				# not the animals or orcs
        #	name=target
        #	[criteria]
        #		side=4,5,7,8,9	# I am 3 and allied with 6
        #	[/criteria]
        #	value=1
        #[/goal]
        #[goal]				# Aim at the town -- villages and castles
        #	name=target_location
        #	[criteria]
        #		[and]
        #			[filter_owner]
        #				side=1
        #			[/filter_owner]
        #			terrain=*^V*
        #		[/and]
        #		[or]
        #			terrain=Ke^Yk
        #		[/or]
        #	[/criteria]
        #	value=3
        #[/goal]
        #[goal]				# Don't leave the "leader" out to dry
        #	name=protect_unit
        #	[criteria]
        #		role=outlaw_leader
        #		side=3
        #	[/criteria]
        #	protect_radius=6
        #	value=3
        #[/goal]
    [/event]

    {ENEMY_GOLD_REWARD}
#enddef

#define BANDITS_ARE_SIDE4
    # Creates outlaws as side 4.
    # This side is "mean", in that they will burn down your villages as well as
    # your blacksmiths etc. and your encampments.
    [side]
        side=4
        controller=ai
        team_name={ON_DIFFICULTY "bandits" "bandits,outlaws" "bandits,outlaws"}
        user_team_name=_"Bandits"
        no_leader=yes
        shroud=no
        fog=no
        share_maps=no
        gold=0
        income={ENEMY_INCOME}
        #[ai]
        #	#aggression=0.8
        #	#caution=0.25
        #	#grouping=defensive
        #	#leader_aggression=-0.5
        #	#leader_ignores_keep=yes	# Can't recruit, so no point
        #	#village_value=1
        #	#leader_value=1.0
        #	# Make all enemies aggressive
        #	aggression=0.8
        #	caution=0.2
        #	#grouping=no
        #	#simple_targeting=yes
        #[/ai]
        {FLAG_VARIANT "undead"}	# helps to distinguish them as not nice, arguably
    [/side]

    [event]
        name=prestart

        {SIDE_AI_AGGRESSION 4 {ON_DIFFICULTY 0.8 0.8 0.9}}
        {SIDE_AI_CAUTION 4 {ON_DIFFICULTY 0.2 0.2 0.1}}

        {SIDE_AI_GOAL_TARGET 4}
        #{SIDE_AI_GOAL_TARGET_LOCATION 4}

        {SIMPLE_LEADER 4}

        #[goal]				# not the animals or orcs
        #	name=target
        #	[criteria]
        #		side=2
        #	[/criteria]
        #	value=0.1
        #[/goal]
        #[goal]				# not the animals or orcs
        #	name=target
        #	[criteria]
        #		side=3,5,6,7,8,9	# I am 4
        #	[/criteria]
        #	value=1
        #[/goal]
        #[goal]				# Don't leave the "leader" out to dry
        #	name=protect_unit
        #	[criteria]
        #		role=outlaw_leader
        #		side=4
        #	[/criteria]
        #	protect_radius=6
        #	value=3
        #[/goal]

        # ----- Outlaw sighting (first time) -----
        {HIST_EVENT first_outlaw_sighting (
            {FAKE_SIGHTED outlaws (
                side=3,4
            )}
            [event]
                name=outlaws_sighted
                first_time_only=yes

                {DIALOGUE first_outlaw_sighting (
                    {SCROLL_TO $x1 $y1}
                    [if]	# The hero sees the outlaws
                        [have_unit]
                            x,y=$x2,$y2
                            id=Hero
                            side=1
                        [/have_unit]
                        [then]
                            {SIGHTED_OUTLAWS_A}
                        [/then]
                        [else] # Somebody else sees the outlaws
                            {SIGHTED_OUTLAWS_B}
                        [/else]
                    [/if]
                    {SIGHTED_OUTLAWS_C}
                    #{INCIDENTAL_MUSIC "battle.ogg"}
                )}
            [/event]
        )}
    [/event]

    {WILL_BURN_BUILDINGS}
    {WILL_BURN_FARMS}
#enddef

#define NEW_OUTLAW_LEADER SIDE
    # --------- Start of year 1 ---------
    [switch]
        variable=rnd_outlaw
        {WF_FACTION_SWITCH}
#ifhave ~add-ons/Wild_Frontiers/custom/umc_bandit.cfg
        {WF_UMC_BANDIT_CASE}
#endif
        [else]
            #value=cotf
            {VARIABLE rnd_sound "ambient/birds2.ogg"}
            {VARIABLE rnd_team "Cotf"}
            # Leader is a level-3 unit starting in the first spring
            # In the few seasons outlaws are weak (level 0-1), later they can have level 2 units as well
            [if]
                {VARIABLE_CONDITIONAL wf_vars.season less_than 4}
                [then]
                    # Level 1
                    #{VARIABLE rnd_leader "Poacher,Thief,Thug,Footpad"}
                    # Level 2
                    {VARIABLE rnd_leader "Outlaw,Bandit,Trapper,Rogue"}
                    # Level 0,1
                    {VARIABLE rnd_recruit "Woodsman,Woodsman,Ruffian,Ruffian,Poacher,Thief,Thug,Footpad"}
                [/then]
                [else]
                    # Level 3
                    {VARIABLE rnd_leader "Highwayman,Ranger,Huntsman,Fugitive,Assassin"}
                    # Level 1,2
                    {VARIABLE rnd_recruit "Poacher,Thief,Thug,Footpad,Rogue,Outlaw,Trapper,Bandit"}
                [/else]
            [/if]
        [/else]
    [/switch]

    {RANDOM_VAR rnd_play $rnd_sound}
    [sound]	# warn the player who is paying attention (and has the sound on)
        name="$rnd_play"
    [/sound]
    {CLEAR_VARIABLE rnd_play,rnd_sound}
    {CLEAR_VARIABLE rnd_team}

    {RANDOM_VAR rnd_type $rnd_leader}

    [store_locations]
        variable=outlaw_places
        {X_AND_Y_ARE_ON_THE_MAP}
        terrain=!,W*^*,*^Y*,*^V*,K*^*,C*^*
        {NOT_FILTER}
        {NOT_INNER_MAP}
    [/store_locations]
    {RANDOM_VAR rnd_i 0.."$($outlaw_places.length-1)"}

    [unit]
        animate=yes
        passable=yes
        placement=map
        random_traits=yes
        role=outlaw_leader
        side={SIDE}
        type=$rnd_type
        x=$outlaw_places[$rnd_i].x
        y=$outlaw_places[$rnd_i].y
        {IS_HERO}
        {IS_LEADER}
        {MOD_OBJECT_LOYAL}
    [/unit]
    {VARIABLE_OP REPEAT_b add 1}
    {CLEAR_VARIABLE rnd_type}
#enddef

#define NEW_RANDOM_OUTLAW SIDE LOYAL_OVERLAY
    # --------- Start of year 1 ---------
    {RANDOM_VAR rnd_type $rnd_recruit}
    [unit]
        animate=yes
        passable=yes
        placement=map
        random_traits=yes
        side={SIDE}
        type=$rnd_type
        x=$outlaw_places[$rnd_i].x
        y=$outlaw_places[$rnd_i].y
        {LOYAL_OVERLAY}
        {IS_CRONIES}
    [/unit]
    {VARIABLE_OP REPEAT_b add 1}

    {CLEAR_VARIABLE rnd_type}
#enddef

# ----- ORCS (and trolls) ------------------------------------------------
#define ORCS_ARE_SIDE5
    # Creates orcs as side 5. Orc leaders from the east and north are given
    # those roles to identify them.
    # Orcs will happily will burn down basically everything, all the time.
    # No wolf riders right now as there are already wolves around, but I may change
    # my mind later
    [side]
        side=5
        controller=ai
        team_name=orcs
        user_team_name=_"Orcish hordes"
        no_leader=yes
        shroud=no
        fog=no
        share_maps=no
        gold=0			# no initial gold -- given when a leader shows up
        income={ENEMY_INCOME}		# income set later, -2 to counteract default income
        #[ai]
        #	#aggression=0.8
        #	#caution=0.01
        #	#village_value=3
        #	#leader_value=1.0
        #	# Make all enemies aggressive
        #	aggression=0.8
        #	caution=0.2
        #	#grouping=no
        #	#simple_targeting=yes
        #[/ai]
        {FLAG_VARIANT "long"}	# not that this ever gets used, since they burn stuff down
    [/side]

    [event]
        name=prestart

        {SIDE_AI_AGGRESSION 5 {ON_DIFFICULTY 0.8 0.8 0.9}}
        {SIDE_AI_CAUTION 5 {ON_DIFFICULTY 0.2 0.2 0.1}}

        {SIDE_AI_GOAL_TARGET 5}
        #{SIDE_AI_GOAL_TARGET_LOCATION 5}
        {SIDE_AI_GOAL_PROTECT_UNIT 5}
        {SIMPLE_LEADER 5}

        #[goal]				# not the animals or orcs
        #	name=target
        #	[criteria]
        #		side=2
        #	[/criteria]
        #	value=0.1
        #[/goal]
        #[goal]				# focus on the player
        #	name=target
        #	[criteria]
        #		side=3,4,6,7,8,9	# I am 5
        #	[/criteria]
        #	value=1
        #[/goal]
    [/event]

    [event]
        name=die
        id=hostage_release
        first_time_only=no
        [filter]
            side=5,6,7,8
            canrecruit=yes
        [/filter]
        [filter_second]
            side=1
        [/filter_second]

#ifdef HARD
        {RANDOM_VAR do_release (no,no,no,no,no,no,no,no,no,yes)}
#endif
#ifdef NORMAL
        {RANDOM_VAR do_release (no,no,no,no,yes)}
#endif
#ifdef EASY
        {RANDOM_VAR do_release (no,no,yes)}
#endif

        [if]
            {VARIABLE_CONDITIONAL do_release boolean_equals yes}
            [then]
                {RANDOM_VAR rnd_type "Elvish Shaman,Dune Herbalist,Elvish Shaman,Saurian Augur"}

                {HOSTAGE_ORCS_A}
                [unit]
                    #attacks_left=0
                    #moves=0
                    #role=hostage
                    passable=yes
                    placement=map
                    random_traits=yes
                    side=1
                    type=$rnd_type
                    x=$x1
                    y=$y1
                    animate=yes
                    #{IS_LAST}
                [/unit]
                #{STORE_LAST_UNIT}
                {VARIABLE hostage_unit_id $last_unit_id}
                [fire_event]
                    name=amla_extra_event
                    [primary_unit]
                        id=$last_unit_id
                    [/primary_unit]
                [/fire_event]
                [unhide_unit]
                [/unhide_unit]
                [redraw]
                    side=1
                    clear_shroud=yes
                [/redraw]
                {WF_SCROLL_UNIT (id=$hostage_unit_id)}
                {HOSTAGE_ORCS_B}
                {CLEAR_VARIABLE hostage_unit_id}
                #{CLEAR_LAST_UNIT}
                #[modify_unit]
                #	[filter]
                #		side=1
                #		role=hostage
                #	[/filter]
                #	role=hostage_free
                #[/modify_unit]

                {CLEAR_VARIABLE rnd_type}
            [/then]
        [/if]
        {CLEAR_VARIABLE do_release}
    [/event]

    # All orc units don't have upkeep -- this makes sure that the
    # leaders can defend themselves when attacked by outlaws, animals, or you
    # by recruiting new units since they should always have positive gold.
    [event]
        name=recruit
        id=recruit_loyal
        first_time_only=no
        [filter]
            #side=5,8
            [not]
                side=1
            [/not]
        [/filter]
        {OBJECT_LOYAL}
    [/event]

    [event]
        name=recruit
        id=recruit_advance
        first_time_only=no
        [filter]
            side=5,7
            #[not]
            #    side=1
            #[/not]
        [/filter]
#ifdef EASY
        {RANDOM_VAR autoadv (no,no,no,no,no,no,no,no,no,yes)}
#endif
#ifdef NORMAL
        {RANDOM_VAR autoadv (no,no,no,no,yes)}
#endif
#ifdef HARD
        {RANDOM_VAR autoadv (no,no,no,yes)}
#endif
        [if]
            [and]
                {VARIABLE_CONDITIONAL autoadv boolean_equals yes}
                {VARIABLE_CONDITIONAL unit.level less_than 2}
                {VARIABLE_CONDITIONAL wf_vars.season greater_than_equal_to 4}
            [/and]
            [then]
                [modify_unit]
                    [filter]
                        id=$unit.id
                    [/filter]
                    experience = "$($this_unit.max_experience)"
                [/modify_unit]
            [/then]
        [/if]
        {CLEAR_VARIABLE autoadv}
    [/event]

    [event]
        name=attack end
        id=attack_end_shaman
        first_time_only=no
        [filter]
            side=5,8
            type=Troll Shaman
            [filter_location]
                terrain=S*,S*^E*,Ai,Ai^E*
            [/filter_location]
        [/filter]
        [filter_attack]
            name=flame blast
            range=ranged
            type=fire
        [/filter_attack]
        [terrain]
            [and]
                terrain=S*,S*^E*
            [/and]
            terrain=Ds
            layer=base
            x,y=$x1,$y1
        [/terrain]
        [terrain]
            [and]
                terrain=Ai,Ai^E*
            [/and]
            terrain=Ww
            layer=base
            x,y=$x1,$y1
        [/terrain]
    [/event]

    [event]
        name=attack end
        id=attack_end_shaman_second
        first_time_only=no
        [filter_second]
            side=5,8
            type=Troll Shaman
            [filter_location]
                terrain=S*,S*^E*,Ai,Ai^E*
            [/filter_location]
        [/filter_second]
        [filter_second_attack]
            name=flame blast
            range=ranged
            type=fire
        [/filter_second_attack]
        [terrain]
            [and]
                terrain=S*,S*^E*
            [/and]
            terrain=Ds
            layer=base
            x,y=$x2,$y2
        [/terrain]
        [terrain]
            [and]
                terrain=Ai,Ai^E*
            [/and]
            terrain=Ww
            layer=base
            x,y=$x2,$y2
        [/terrain]
    [/event]

    # This event is fired for the appearance of new orc leaders
    # It could have been included in the new_raid macro(s), but for
    # consistency with necros, it's made a fire-able event
    [event]
        name=new_orc_raid
        id=new_orc_raid
        first_time_only=no

        {VARIABLE REPEAT_b 0}
        {RANDOM_VAR build_castle (yes,yes,yes,yes,yes,yes,yes,yes,yes,no)}
        [if]
            {VARIABLE_CONDITIONAL wf_vars.season_str equals "winter"}
            [then]
                {VARIABLE build_castle no}
            [/then]
        [/if]

        # Pick a direction opposite of the last raid for the season
        #{RANDOM_VAR rnd_dir 0,1,2,3}	# 0=east, 1=north, 2=west, 3=south
        [switch]
            variable=quota.rnd_dir
            [case]
                value=0
                {VARIABLE rnd_dir 1}
            [/case]
            [case]
                value=1
                {VARIABLE rnd_dir 0}
            [/case]
            [else]
                {RANDOM_VAR rnd_dir 0,1}	# 0=east, 1=north, used in map_signs
            [/else]
        [/switch]
        {VARIABLE quota.rnd_dir $rnd_dir}

        [switch]	# I know if/else would work, but I like switch statements better
            variable=rnd_dir
            [case]
                value=0
                {VARIABLE orc_role "east_orc_leader"}
                {VARIABLE orc_adjacent_find "n,nw,sw"}
                {VARIABLE orc_adjacent_build "s,se,ne"}
            [/case]
            [case]
                value=1
                {VARIABLE orc_role "north_orc_leader"}
                {VARIABLE orc_adjacent_find "sw,s,se"}
                {VARIABLE orc_adjacent_build "ne,n,nw"}
            [/case]
        [/switch]

        # If there's already a leader, spawn a new one and release current leader
        [if]
            {VARIABLE_CONDITIONAL build_castle boolean_equals yes}
            [have_unit]
                side=5
                canrecruit=yes
                role=$orc_role
            [/have_unit]
            [then]
                #{WF_DEBUG "Tried to add a new $orc_role , but there's already one there -- Abandon keep. Create a new one"}
                [modify_unit]
                    [filter]
                        side=5
                        role=$orc_role
                        canrecruit=yes
                    [/filter]
                    role=orc_leader
                    canrecruit=no
                    {IS_HERO}
                    [object]
                        [effect]
                            apply_to=loyal
                        [/effect]
                    [/object]
                    goto_x=0
                    goto_y=0
                [/modify_unit]
                #[event]
                #	id=guide_orc_leader
                #	remove=yes
                #[/event]
            [/then]
        [/if]

        [if]
            {VARIABLE_CONDITIONAL build_castle boolean_equals yes}
            [then]
                {RESET_GOLD 5}
                {COUNT_VILLAGES num_villages}
                {VARIABLE orc_gold "$(ceil($enemy.raid_mult * ($enemy.raid_base_gold+$enemy.raid_gold_mult*$num_villages)))"}
                {CLEAR_VARIABLE num_villages}
                [gold]
                    side=5
                    amount=$orc_gold
                [/gold]
                #{WF_DEBUG "Giving orcs $orc_gold gold"}
                {CLEAR_VARIABLE orc_gold}
            [/then]
        [/if]

        {VARIABLE rnd_faction "Trolls,Orcs,Goblins,Hordes,Custom"}
#ifhave ~add-ons/Wild_Frontiers/custom/umc_orcs.cfg
        {VARIABLE rnd_faction "{WF_UMC_ORCS},$rnd_faction"}
#endif
        {RANDOM_VAR rnd_faction $rnd_faction}
        [switch]
            variable=rnd_faction
            [case]
                value=Hordes
                [if]
                    {VARIABLE_CONDITIONAL wf_vars.season less_than 4}
                    [then]
                        # Level 2
                        {RANDOM_VAR rnd_leader ("Orcish Ruler,Orcish Slayer,Orcish Crossbowman,Orcish Warrior,Troll,Troll Rocklobber,Troll Shaman,Troll Hero,Goblin Pillager,Goblin Knight")}
                        # Level 1 recruits
                        {VARIABLE extra_recruit "Orcish Archer,Orcish Assassin,Orcish Grunt,Orcish Leader,Troll Whelp,Goblin Spearman,Goblin Impaler,Goblin Rouser,Wolf Rider,Naga Fighter"}
                        # Level 1 assistants
                        {VARIABLE rnd_assistants ("Orcish Assassin,Orcish Leader,Orcish Grunt,Orcish Archer,Troll Whelp,Goblin Impaler,Wolf Rider,Goblin Rouser,Naga Fighter")}
                    [/then]
                    [else]
                        # Level 3
                        {RANDOM_VAR rnd_leader ("Orcish Slurbow,Orcish Warlord,Great Troll,Troll Warrior,Orcish Sovereign,Orcish Nightblade,Direwolf Rider")}
                        # Level 2 recruits
                        #{VARIABLE extra_recruit "Orcish Crossbowman,Orcish Slayer,Orcish Warrior,Orcish Ruler,Troll,Troll Rocklobber,Troll Shaman,Goblin Impaler,Goblin Rouser,Goblin Knight,Goblin Pillager,Naga Warrior"}
                        # Level 1 recruits
                        {VARIABLE extra_recruit "Orcish Archer,Orcish Assassin,Orcish Grunt,Orcish Leader,Troll Whelp,Goblin Spearman,Goblin Impaler,Goblin Rouser,Wolf Rider,Naga Fighter"}
                        # Level 2 assistants
                        {VARIABLE rnd_assistants ("Orcish Crossbowman,Orcish Ruler,Orcish Slayer,Orcish Warrior,Goblin Knight,Goblin Pillager,Troll,Troll Rocklobber,Troll Hero,Troll Shaman,Naga Warrior")}
                    [/else]
                [/if]
                # Level 1
                [set_variables]
                    name=extra_list
                    mode=replace
                    {VALUE2 type "Orcish Archer" cost 14}
                    {VALUE2 type "Orcish Assassin" cost 17}
                    {VALUE2 type "Orcish Grunt" cost 12}
                    {VALUE2 type "Orcish Leader" cost 20}
                    {VALUE2 type "Troll Whelp" cost 13}
                    {VALUE2 type "Goblin Spearman" cost 9}
                    {VALUE2 type "Goblin Impaler" cost 13}
                    {VALUE2 type "Goblin Rouser" cost 13}
                    {VALUE2 type "Wolf Rider" cost 17}
                    {VALUE2 type "Naga Fighter" cost 14}
                [/set_variables]
            [/case]
            [case]
                value=Trolls
                [if]
                    {VARIABLE_CONDITIONAL wf_vars.season less_than 4}
                    [then]
                        # Level 2
                        {RANDOM_VAR rnd_leader ("Troll,Troll Rocklobber,Troll Shaman,Troll Hero")}
                        # Level 1 recruits
                        {VARIABLE extra_recruit "Troll Whelp,Naga Fighter"}
                        # Level 1 assistants
                        {VARIABLE rnd_assistants ("Troll Whelp,Naga Fighter")}
                    [/then]
                    [else]
                        # Level 3
                        {RANDOM_VAR rnd_leader ("Great Troll,Troll Warrior")}
                        # Level 2 recruits
                        #{VARIABLE extra_recruit "Troll,Troll Rocklobber,Troll Shaman,Naga Warrior"}
                        # Level 1 recruits
                        {VARIABLE extra_recruit "Troll Whelp,Naga Fighter"}
                        # Level 2 assistants
                        {VARIABLE rnd_assistants ("Troll,Troll Rocklobber,Troll Hero,Troll Shaman,Naga Warrior")}
                    [/else]
                [/if]
                # Level 1
                [set_variables]
                    name=extra_list
                    mode=replace
                    {VALUE2 type "Troll Whelp" cost 13}
                    {VALUE2 type "Naga Fighter" cost 14}
                [/set_variables]
            [/case]
            [case]
                value=Orcs
                [if]
                    {VARIABLE_CONDITIONAL wf_vars.season less_than 4}
                    [then]
                        # Level 2
                        {RANDOM_VAR rnd_leader ("Orcish Ruler,Orcish Slayer,Orcish Crossbowman,Orcish Warrior")}
                        # Level 1 recruits
                        {VARIABLE extra_recruit "Orcish Archer,Orcish Assassin,Orcish Grunt,Orcish Leader"}
                        # Level 1 assistants
                        {VARIABLE rnd_assistants ("Orcish Assassin,Orcish Leader,Orcish Grunt,Orcish Archer")}
                    [/then]
                    [else]
                        # Level 3
                        {RANDOM_VAR rnd_leader ("Orcish Slurbow,Orcish Warlord,Orcish Sovereign,Orcish Nightblade")}
                        # Level 2 recruits
                        #{VARIABLE extra_recruit "Orcish Crossbowman,Orcish Slayer,Orcish Warrior,Orcish Ruler"}
                        # Level 1 recruits
                        {VARIABLE extra_recruit "Orcish Archer,Orcish Assassin,Orcish Grunt,Orcish Leader"}
                        # Level 2 assistants
                        {VARIABLE rnd_assistants ("Orcish Crossbowman,Orcish Ruler,Orcish Slayer,Orcish Warrior")}
                    [/else]
                [/if]
                # Level 1
                [set_variables]
                    name=extra_list
                    mode=replace
                    {VALUE2 type "Orcish Archer" cost 14}
                    {VALUE2 type "Orcish Assassin" cost 17}
                    {VALUE2 type "Orcish Grunt" cost 12}
                    {VALUE2 type "Orcish Leader" cost 20}
                [/set_variables]
            [/case]
            [case]
                value=Goblins
                [if]
                    {VARIABLE_CONDITIONAL wf_vars.season less_than 4}
                    [then]
                        # Level 2
                        {RANDOM_VAR rnd_leader ("Goblin Pillager,Goblin Knight")}
                        # Level 1 recruits
                        {VARIABLE extra_recruit "Goblin Spearman,Goblin Impaler,Goblin Rouser,Wolf Rider,Naga Fighter"}
                        # Level 1 assistants
                        {VARIABLE rnd_assistants ("Goblin Impaler,Wolf Rider,Goblin Rouser,Naga Fighter")}
                    [/then]
                    [else]
                        # Level 3
                        {RANDOM_VAR rnd_leader ("Direwolf Rider")}
                        # Level 2 recruits
                        #{VARIABLE extra_recruit "Goblin Impaler,Goblin Rouser,Goblin Knight,Goblin Pillager,Naga Warrior"}
                        # Level 1 recruits
                        {VARIABLE extra_recruit "Goblin Spearman,Goblin Impaler,Goblin Rouser,Wolf Rider,Naga Fighter"}
                        # Level 2 assistants
                        {VARIABLE rnd_assistants ("Goblin Knight,Goblin Pillager,Naga Warrior")}
                    [/else]
                [/if]
                # Level 1
                [set_variables]
                    name=extra_list
                    mode=replace
                    {VALUE2 type "Goblin Spearman" cost 9}
                    {VALUE2 type "Goblin Impaler" cost 13}
                    {VALUE2 type "Goblin Rouser" cost 13}
                    {VALUE2 type "Wolf Rider" cost 17}
                    {VALUE2 type "Naga Fighter" cost 14}
                [/set_variables]
            [/case]
#ifhave ~add-ons/Wild_Frontiers/custom/umc_orcs.cfg
            {WF_UMC_ORCS_CASE}
#endif
            [else]
                #value=Custom
                # Level 2
                {RANDOM_VAR rnd_leader ("Orcish Warrior")}
                # Level 1 recruits
                {VARIABLE extra_recruit ("Orcish Archer,Orcish Grunt,Troll Whelp")}
                # Level 1 assistants
                {VARIABLE rnd_assistants ("Orcish Archer,Orcish Grunt,Troll Whelp")}
                # Level 1
                [set_variables]
                    name=extra_list
                    mode=replace
                    {VALUE2 type "Orcish Archer" cost 14}
                    {VALUE2 type "Orcish Grunt" cost 12}
                    {VALUE2 type "Orcish Grunt" cost 12}
                    {VALUE2 type "Troll Whelp" cost 13}
                [/set_variables]
            [/else]
        [/switch]

        # This *should* always succeed as the signpost is on plains, although a
        # really devious player could divert a stream here or something. I should
        # fix this eventually, although it's rather low priority.
        [store_locations]
            variable=orc_places
            terrain=!,W*^*,*^Y*,*^V*,K*^*,C*^*
            {X_AND_Y_ARE_ON_THE_MAP}
            {NOT_FILTER}
            [and]	# appears near the signpost
                x=$map_signs[$rnd_dir].x
                y=$map_signs[$rnd_dir].y
                radius={BORDER}
            [/and]
            {NOT_INNER_MAP}
        [/store_locations]
        {RANDOM_VAR rnd_o 0.."$($orc_places.length-1)"}

        [if]
            {VARIABLE_CONDITIONAL build_castle boolean_equals yes}
            [then]
                # If not, find the nearest place to set up a keep
                {FIND_NEAREST_HEX orc_keep_spot $orc_places[$rnd_o].x $orc_places[$rnd_o].y (
                    {NOT_FILTER}
                    terrain={BUILDABLE_TERRAIN},Ko,Koa
                    [filter_adjacent_location]
                        terrain={BUILDABLE_TERRAIN},Co,Coa
                        adjacent=$orc_adjacent_find
                        count=3
                    [/filter_adjacent_location]
                    {NOT_MAP_SIGNS}
                )}
                #{WF_DEBUG "$orc_keep_spot.x,$orc_keep_spot.y looks like a good place for an orc castle"}
            [/then]
        [/if]
        #{WF_DEBUG "Placing an orc leader $rnd_leader at $orc_places[$rnd_o].x $orc_places[$rnd_o].y"}
        [sound]	# warn the player who is paying attention (and has the sound on)
            name="ambient/wardrums.ogg"
        [/sound]

        [if]
            {VARIABLE_CONDITIONAL build_castle boolean_equals yes}
            [then]
                # And place the leader himself
                [unit]
                    #goto_x=$orc_keep_spot.x
                    #goto_y=$orc_keep_spot.y
                    animate=yes
                    canrecruit=yes
                    extra_recruit=$extra_recruit
                    passable=yes
                    placement=map
                    random_traits=no
                    role=$orc_role
                    side=5
                    type=$rnd_leader
                    x=$orc_places[$rnd_o].x
                    y=$orc_places[$rnd_o].y
                    {IS_LEADER}
                [/unit]
                {VARIABLE_OP REPEAT_b add 1}
            [/then]
            [else]
                [unit]
                    animate=yes
                    passable=yes
                    placement=map
                    random_traits=yes
                    role=orc_leader
                    side=5
                    type=$rnd_leader
                    x=$orc_places[$rnd_o].x
                    y=$orc_places[$rnd_o].y
                    {IS_HERO}
                    {IS_LEADER}
                    {MOD_OBJECT_LOYAL}
                [/unit]
                {VARIABLE_OP REPEAT_b add 1}
            [/else]
        [/if]

        # Now supply his hench-orcs
        {VARIABLE repeat_count $enemy.num_outlaws}
        {VARIABLE_OP repeat_count add 1}
        {WF_REPEAT $repeat_count (
            # Orc sidekicks are always level 2 -- it's the gold their side has that
            # varies from season to season
            {RANDOM_VAR rnd_type $rnd_assistants}
            [unit]
                animate=yes
                passable=yes
                placement=map
                random_traits=yes
                side=5
                type=$rnd_type
                x=$orc_places[$rnd_o].x
                y=$orc_places[$rnd_o].y
                {MOD_OBJECT_LOYAL_OVERLAY}
            [/unit]
            {VARIABLE_OP REPEAT_b add 1}
            {CLEAR_VARIABLE rnd_type}
        )}
        {CLEAR_VARIABLE repeat_count}
        {CLEAR_VARIABLE rnd_faction,rnd_leader,extra_recruit,rnd_assistants}

        [if]
            {VARIABLE_CONDITIONAL build_castle boolean_equals yes}
            [then]
                [micro_ai]
                    side=5
                    ai_type=messenger_escort
                    ca_id=messenger_escort_side5_$orc_role|
                    action=delete
                [/micro_ai]
                [remove_event]
                    id=turn_build_orc_keep_$orc_role|
                [/remove_event]
                [remove_event]
                    id=moveto_build_orc_keep_$orc_role|
                [/remove_event]
                [remove_event]
                    id=die_build_orc_keep_$orc_role|
                [/remove_event]

                [modify_unit]
                    [filter]
                        side=5
                        canrecruit=yes
                        role=$orc_role
                    [/filter]
                    goto_x=$orc_keep_spot.x
                    goto_y=$orc_keep_spot.y
                [/modify_unit]
                [micro_ai]
                    side=5
                    ai_type=messenger_escort
                    ca_id=messenger_escort_side5_$orc_role|
                    action=add
                    [filter]
                        side=5
                        canrecruit=yes
                        role=$orc_role
                    [/filter]
                    [filter_second]
                        side=5
                        [not]
                            status=guardian
                        [/not]
                        [not]
                            status=roamer
                        [/not]
                    [/filter_second]
                    waypoint_x=$orc_keep_spot.x
                    waypoint_y=$orc_keep_spot.y
                [/micro_ai]

                # This event makes sure the orc leader can't get distracted on his way to the keep
                #[event]
                #	name=side 5 turn
                #	id=guide_orc_leader
                #	first_time_only=no
                #	delayed_variable_substitution=no
                #	[modify_unit]
                #		[filter]
                #			side=5
                #			canrecruit=yes
                #			role=$orc_role
                #		[/filter]
                #		goto_x=$orc_keep_spot.x
                #		goto_y=$orc_keep_spot.y
                #	[/modify_unit]
                #[/event]
                # Release the messengers if the leader died before building a keep
                [event]
                    name=die
                    id=die_build_orc_keep_$orc_role|
                    first_time_only=yes
                    delayed_variable_substitution=no
                    [filter]
                        side=5
                        role=$orc_role
                        canrecruit=yes
                    [/filter]
                    [micro_ai]
                        side=5
                        ai_type=messenger_escort
                        ca_id=messenger_escort_side5_$orc_role|
                        action=delete
                    [/micro_ai]
                    [remove_event]
                        id=turn_build_orc_keep_$orc_role|
                    [/remove_event]
                    [remove_event]
                        id=moveto_build_orc_keep_$orc_role|
                    [/remove_event]
                [/event]
                # Build a castle when he gets there, or next turn if he's already there
                [event]
                    name=moveto
                    id=moveto_build_orc_keep_$orc_role|
                    first_time_only=yes
                    delayed_variable_substitution=no	# so I can clear variables
                    [filter]
                        side=5
                        role=$orc_role
                        canrecruit=yes
                        x=$orc_keep_spot.x
                        y=$orc_keep_spot.y
                    [/filter]
                    #{WF_DEBUG "event=moveto_build_orc_keep"}
                    {BUILD_ORC_KEEP $orc_keep_spot.x $orc_keep_spot.y $orc_adjacent_build}
                [/event]
                [if]
                    [and]
                        {VARIABLE_CONDITIONAL orc_places[$rnd_o].x equals $orc_keep_spot.x}
                        {VARIABLE_CONDITIONAL orc_places[$rnd_o].y equals $orc_keep_spot.y}
                    [/and]
                    [then]
                        [event]
                            name=side 5 turn
                            id=turn_build_orc_keep_$orc_role|
                            first_time_only=yes
                            delayed_variable_substitution=no
                            [filter_condition]
                                [have_unit]
                                    side=5
                                    role=$orc_role
                                    canrecruit=yes
                                    x=$orc_keep_spot.x
                                    y=$orc_keep_spot.y
                                [/have_unit]
                            [/filter_condition]
                            #{WF_DEBUG "event=turn_build_orc_keep"}
                            {BUILD_ORC_KEEP $orc_keep_spot.x $orc_keep_spot.y $orc_adjacent_build}
                        [/event]
                    [/then]
                [/if]
                {CLEAR_VARIABLE orc_keep_spot}
            [/then]
        [/if]

        [if]
            {VARIABLE_CONDITIONAL build_castle boolean_equals no}
            [then]
                # Now he "recruits" his army
                {COUNT_VILLAGES num_villages}
                {VARIABLE orc_gold "$(ceil($enemy.raid_mult * ($enemy.raid_base_gold + $enemy.raid_gold_mult*$num_villages)))"}
                {CLEAR_VARIABLE num_villages}
                #{VARIABLE_OP orc_gold multiply 2}
                #{WF_DEBUG "Orcs fake recruit gold set to $orc_gold"}
                [while]
                    {VARIABLE_CONDITIONAL orc_gold greater_than 0}	# will go *roughly* to zero
                    {VARIABLE_CONDITIONAL REPEAT_b less_than {BLOB_LIMIT}}
                    [do]
                        {RANDOM_VAR rnd_i2 0.."$($extra_list.length-1)"}
                        [unit]
                            animate=yes
                            passable=yes
                            placement=map
                            random_traits=yes
                            side=5
                            type=$extra_list[$rnd_i2].type
                            x,y=$orc_places[$rnd_o].x,$orc_places[$rnd_o].y
                            {MOD_OBJECT_LOYAL}
                        [/unit]
                        {VARIABLE_OP REPEAT_b add 1}
                        {VARIABLE_OP orc_gold sub $extra_list[$rnd_i2].cost}
                        {CLEAR_VARIABLE rnd_i2}
                    [/do]
                [/while]
                {CLEAR_VARIABLE orc_gold}
            [/then]
        [/if]

        {CLEAR_VARIABLE rnd_o}
        {CLEAR_VARIABLE orc_role,orc_adjacent_find,orc_adjacent_build}
        {CLEAR_VARIABLE rnd_dir}
        {CLEAR_VARIABLE orc_places}
        {CLEAR_VARIABLE extra_list}
        {CLEAR_VARIABLE build_castle}

        # Suggest taking the fight to the orcs
        {HIST_EVENT first_orc_kill (
            [event]
                name=die
                id=die_first_orc_kill
                [filter]
                    side=5
                    [not]
                        [and]
                            role=east_orc_leader
                            [or]
                                role=north_orc_leader
                            [/or]
                        [/and]
                    [/not]
                [/filter]
                [filter_second]
                    side=1
                [/filter_second]
                {DIALOGUE first_orc_kill (
                    {DIE_ORCS_ANY}
                )}
            [/event]
        )}

        # ----- Orc sighting (first time) -----
        {HIST_EVENT first_orc_sighting (
            {FAKE_SIGHTED orcs (
                side=5
            )}
            [event]
                name=orcs_sighted
                first_time_only=yes

                #id=orc_sighting
                #{ON_SIGHTING orc_sighting 1 side=5 (
                {DIALOGUE first_orc_sighting (
                    [if]
                        [have_unit]
                            x,y=$x2,$y2
                            id=Hero
                        [/have_unit]
                        [then]
                            {SIGHTED_ORCS_A}
                        [/then]
                        [else]
                            {SIGHTED_ORCS_B}
                        [/else]
                    [/if]
                    {SIGHTED_ORCS_C}
                    #{INCIDENTAL_MUSIC "northerners.ogg"}
                )}
                #)}
            [/event]
        )}
        {CLEAR_VARIABLE REPEAT_b}
    [/event]
#enddef

#define BUILD_ORC_KEEP X Y ADJACENT
    [delay]
        time=300
    [/delay]
    [sound]
        name=mace-miss.ogg
    [/sound]
    {MODIFY_TERRAIN Ko {X} {Y}}
    # It's possible this might screw things up if you build a structure
    # after the orcs are spawned, but it's a low-probability problem
    [terrain]
        terrain=Co
        [filter_adjacent_location]
            x,y={X},{Y}
            adjacent={ADJACENT}
        [/filter_adjacent_location]
    [/terrain]
    [sound]
        name=mace.wav
    [/sound]
    # orc leader no longer needs to be guided to castle
    [modify_unit]
        [filter]
            side=5
            canrecruit=yes
            role=$orc_role
            x,y={X},{Y}
        [/filter]
        goto_x=0
        goto_y=0
    [/modify_unit]
    [micro_ai]
        side=5
        ai_type=messenger_escort
        ca_id=messenger_escort_side5_$orc_role|
        action=delete
    [/micro_ai]
    #[event]
    #	id=guide_orc_leader
    #	remove=yes
    #[/event]
    [remove_event]
        id=turn_build_orc_keep_$orc_role|
    [/remove_event]
    [remove_event]
        id=moveto_build_orc_keep_$orc_role|
    [/remove_event]
    [remove_event]
        id=die_build_orc_keep_$orc_role|
    [/remove_event]
#enddef

# ----- Elves ------------------------------------------------------------
#define ELVES_ARE_SIDE6
    # Elves appear if you cut down too many forests
    # Dwarves appear if you flatten too many hills
    # Elves, Dwarves don't burn buildings, because they worry the fire would spread to the forest
    [side]
        side=6
        controller=ai
        team_name=elves
        user_team_name=_"Rogues"
        no_leader=yes
        shroud=no
        fog=no
        share_maps=no
        gold=0
        income={ENEMY_INCOME}
        #[ai]
        #	#aggression=0.8
        #	#caution=0.01	# no retreat
        #	#grouping=defensive
        #	#leader_value=1.0
        #	village_value=0.5
        #	# Make all enemies aggressive
        #	aggression=0.8
        #	caution=0.2
        #	#grouping=no
        #	#simple_targeting=yes
        #[/ai]
        {FLAG_VARIANT "wood-elvish"}
    [/side]

    [event]
        name=prestart

        {SIDE_AI_AGGRESSION 6 {ON_DIFFICULTY 0.8 0.8 0.9}}
        {SIDE_AI_CAUTION 6 {ON_DIFFICULTY 0.2 0.2 0.1}}
        {SIDE_AI_VILLAGE_VALUE 6 0.5}

        {SIDE_AI_GOAL_TARGET 6}
        {SIDE_AI_GOAL_PROTECT_UNIT 6}

        {SIMPLE_LEADER 6}
    [/event]
#enddef

#define NEW_ELVES_RAIDS LIMIT
    [event]
        name=prestart
        {VARIABLE quota.elves {LIMIT}}
        {VARIABLE_OP quota.elves add $wf_vars.year}
    [/event]

    [event]
        #name=side 6 turn end
        name=spawn_elves_side_6
        id=spawn_elves_side_6
        first_time_only=no

        [if]
            {VARIABLE_CONDITIONAL wf_vars.law_book greater_than 0}
            {VARIABLE_CONDITIONAL relations.trees greater_than 0}
            [then]
                {VARIABLE_OP relations.trees sub $wf_vars.law_book}
            [/then]
        [/if]

        {RANDOM_VAR random 1..100}
        [if]
            {VARIABLE_CONDITIONAL random less_than $relations.trees}
            {VARIABLE_CONDITIONAL quota.elves greater_than 0}
            {HAVE_SIDE6_COUNT}
            [then]
                #{WF_DEBUG "Spawning Elves q: $quota.elves n: $enemy.num_outlaws t: $turn_number r: $random < $relations.trees"}
                {FIRE_EVENT new_elves_raid}
                [unhide_unit]
                [/unhide_unit]
            [/then]
        [/if]
        {CLEAR_VARIABLE random}
    [/event]

    [event]
        name=new_elves_raid
        id=new_elves_raid
        first_time_only=no

        {VARIABLE REPEAT_b 0}
        {RANDOM_VAR build_castle (yes,yes,no)}
        [if]
            {VARIABLE_CONDITIONAL wf_vars.season_str equals "winter"}
            [then]
                {VARIABLE build_castle no}
            [/then]
        [/if]

        # Find a forest near the western signpost
        {FIND_NEAREST_HEX rnd_start $map_signs[2].x $map_signs[2].y (
            {NOT_FILTER}
            terrain=*^F*
        )}
        #{WF_DEBUG "Placing some elves near $rnd_start.x,$rnd_start.y"}

        [sound]	# warn the player who is paying attention (and has the sound on)
            name="horn-signals/horn-1.ogg"
        [/sound]

        [if]
            {VARIABLE_CONDITIONAL build_castle boolean_equals yes}
            [then]
                # elves castle spawning start {
                {RANDOM_VAR rnd_leader "Elvish Ranger,Elvish Marksman,Elvish Captain,Elvish Hero,Elvish Rider,Elvish Druid,Elvish Sorceress,Elvish Lord"}
                {VARIABLE extra_recruit "Elvish Fighter,Elvish Archer,Elvish Shaman,Elvish Scout"}
                {VARIABLE rnd_assistants "Elvish Captain,Elvish Druid,Elvish Hero,Elvish Marksman,Elvish Ranger,Elvish Rider,Elvish Sorceress"}
                {VARIABLE rnd_adjacent_find "ne,se,n"}
                {VARIABLE rnd_adjacent_build "sw,nw,s"}

                # If there's already a leader, spawn a new one and release current leader
                [if]
                    [have_unit]
                        side=6
                        canrecruit=yes
                        race=elf
                    [/have_unit]
                    [then]
                        [modify_unit]
                            [filter]
                                side=6
                                race=elf
                                canrecruit=yes
                            [/filter]
                            canrecruit=no
                            {IS_HERO}
                            [object]
                                [effect]
                                    apply_to=loyal
                                [/effect]
                            [/object]
                            goto_x=0
                            goto_y=0
                        [/modify_unit]
                    [/then]
                [/if]

                {RESET_GOLD 6}
                {VARIABLE rnd_gold "$(ceil($enemy.raid_mult * ($enemy.raid_base_gold+$enemy.raid_gold_mult*$relations.trees)))"}
                [gold]
                    side=6
                    amount=$rnd_gold
                [/gold]
                {CLEAR_VARIABLE rnd_gold}

                # If not, find the nearest place to set up a keep
                {FIND_NEAREST_HEX rnd_keep_spot $rnd_start.x $rnd_start.y (
                    {NOT_FILTER}
                    terrain={BUILDABLE_TERRAIN},Kv
                    [filter_adjacent_location]
                        terrain={BUILDABLE_TERRAIN},Cv
                        adjacent=$rnd_adjacent_find
                        count=3
                    [/filter_adjacent_location]
                    {NOT_MAP_SIGNS}
                )}

                # And place the leader himself
                [unit]
                    #goto_x=$rnd_keep_spot.x
                    #goto_y=$rnd_keep_spot.y
                    animate=yes
                    canrecruit=yes
                    extra_recruit=$extra_recruit
                    passable=yes
                    placement=map
                    random_traits=no
                    role=elf_leader
                    side=6
                    type=$rnd_leader
                    x=$rnd_start.x
                    y=$rnd_start.y
                    {IS_LEADER}
                [/unit]
                {VARIABLE_OP REPEAT_b add 1}
                {CLEAR_VARIABLE rnd_leader,extra_recruit}

                # Add a few "assistants"
                {VARIABLE repeat_count $enemy.num_outlaws}
                {VARIABLE_OP repeat_count add 1}
                #{VARIABLE_OP repeat_count sub $wf_vars.law_book}
                {WF_REPEAT $repeat_count (
                    {RANDOM_VAR rnd_type $rnd_assistants}
                    [unit]
                        animate=yes
                        passable=yes
                        placement=map
                        random_traits=yes
                        side=6
                        type=$rnd_type
                        x,y=$rnd_start.x,$rnd_start.y
                        {MOD_OBJECT_LOYAL_OVERLAY}
                    [/unit]
                    {VARIABLE_OP REPEAT_b add 1}
                )}
                {CLEAR_VARIABLE repeat_count}
                {CLEAR_VARIABLE rnd_type,rnd_assistants}

                [micro_ai]
                    side=6
                    ai_type=messenger_escort
                    ca_id=messenger_escort_side6_elves
                    action=delete
                [/micro_ai]
                [remove_event]
                    id=turn_build_elves_keep
                [/remove_event]
                [remove_event]
                    id=moveto_build_elves_keep
                [/remove_event]
                [remove_event]
                    id=die_build_elves_keep
                [/remove_event]

                [modify_unit]
                    [filter]
                        side=6
                        canrecruit=yes
                        race=elf
                    [/filter]
                    goto_x=$rnd_keep_spot.x
                    goto_y=$rnd_keep_spot.y
                [/modify_unit]
                [micro_ai]
                    side=6
                    ai_type=messenger_escort
                    ca_id=messenger_escort_side6_elves
                    action=add
                    [filter]
                        side=6
                        canrecruit=yes
                        race=elf
                    [/filter]
                    [filter_second]
                        side=6
                        [not]
                            status=guardian
                        [/not]
                        [not]
                            status=roamer
                        [/not]
                    [/filter_second]
                    waypoint_x=$rnd_keep_spot.x
                    waypoint_y=$rnd_keep_spot.y
                [/micro_ai]

                # Release the messengers if the leader died before building a keep
                [event]
                    name=die
                    id=die_build_elves_keep
                    first_time_only=yes
                    delayed_variable_substitution=no
                    [filter]
                        side=6
                        race=elf
                        canrecruit=yes
                    [/filter]
                    [micro_ai]
                        side=6
                        ai_type=messenger_escort
                        ca_id=messenger_escort_side6_elves
                        action=delete
                    [/micro_ai]
                    [remove_event]
                        id=turn_build_elves_keep
                    [/remove_event]
                    [remove_event]
                        id=moveto_build_elves_keep
                    [/remove_event]
                [/event]
                # Build a castle when he gets there, or next turn if he's already there
                [event]
                    name=moveto
                    id=moveto_build_elves_keep
                    first_time_only=yes
                    delayed_variable_substitution=no	# so I can clear variables
                    [filter]
                        side=6
                        race=elf
                        canrecruit=yes
                        x=$rnd_keep_spot.x
                        y=$rnd_keep_spot.y
                    [/filter]
                    {BUILD_SIDE6_KEEP elves Kv Cv $rnd_keep_spot.x $rnd_keep_spot.y $rnd_adjacent_build}
                [/event]
                [if]
                    [and]
                        {VARIABLE_CONDITIONAL rnd_start.x equals $rnd_keep_spot.x}
                        {VARIABLE_CONDITIONAL rnd_start.y equals $rnd_keep_spot.y}
                    [/and]
                    [then]
                        [event]
                            name=side 6 turn
                            id=turn_build_elves_keep
                            first_time_only=yes
                            delayed_variable_substitution=no
                            [filter_condition]
                                [have_unit]
                                    side=6
                                    race=elf
                                    canrecruit=yes
                                    x=$rnd_keep_spot.x
                                    y=$rnd_keep_spot.y
                                [/have_unit]
                            [/filter_condition]
                            {BUILD_SIDE6_KEEP elves Kv Cv $rnd_keep_spot.x $rnd_keep_spot.y $rnd_adjacent_build}
                        [/event]
                    [/then]
                [/if]
                {CLEAR_VARIABLE rnd_keep_spot,rnd_adjacent_find,rnd_adjacent_build}
                # elves castle spawning end }
            [/then]
        [/if]

        [if]
            {VARIABLE_CONDITIONAL build_castle boolean_equals no}
            [then]
                # elves blob spawning start {
                {RANDOM_VAR rnd_leader "Elvish Ranger,Elvish Marksman,Elvish Captain,Elvish Hero,Elvish Rider,Elvish Druid,Elvish Sorceress,Elvish Lord"}
                [unit]
                    animate=yes
                    passable=yes
                    placement=map
                    random_traits=yes
                    role=elf_leader
                    side=6
                    type=$rnd_leader
                    x=$rnd_start.x
                    y=$rnd_start.y
                    {IS_HERO}
                    {IS_LEADER}
                    {MOD_OBJECT_LOYAL}
                [/unit]
                {VARIABLE_OP REPEAT_b add 1}
                {CLEAR_VARIABLE rnd_leader}
                {VARIABLE repeat_count $enemy.num_outlaws}
                {VARIABLE_OP repeat_count add 1}
                #{VARIABLE_OP repeat_count sub $wf_vars.law_book}
                {WF_REPEAT $repeat_count (
                    # Elves spawn at level 1, stronger has too much potential for randomized doom
                    {RANDOM_VAR rnd_type "Elvish Fighter,Elvish Archer,Elvish Shaman,Elvish Scout"}
                    [unit]
                        animate=yes
                        passable=yes
                        placement=map
                        random_traits=yes
                        side=6
                        type=$rnd_type
                        x=$rnd_start.x
                        y=$rnd_start.y
                        {MOD_OBJECT_LOYAL_OVERLAY}
                    [/unit]
                    {VARIABLE_OP REPEAT_b add 1}
                    {CLEAR_VARIABLE rnd_type}
                )}
                {CLEAR_VARIABLE repeat_count}
                #{VARIABLE_OP relations.trees multiply $enemy.raid_mult}
                #{VARIABLE_OP relations.trees round ceil}
                #{VARIABLE_OP relations.trees ipart $relations.trees}

                {VARIABLE elves_gold "$(ceil($enemy.raid_mult * ($enemy.raid_base_gold + $enemy.raid_gold_mult*$relations.trees)))"}
                #{VARIABLE_OP elves_gold multiply 2}
                #{WF_DEBUG "Elves fake recruit gold set to $elves_gold"}
                [set_variables]
                    name=elves_list
                    mode=replace
                    #{VALUE2 type "Elvish Lord" cost 36}
                    {VALUE2 type "Elvish Captain" cost 28}
                    {VALUE2 type "Elvish Druid" cost 27}
                    {VALUE2 type "Elvish Hero" cost 26}
                    {VALUE2 type "Elvish Marksman" cost 31}
                    {VALUE2 type "Elvish Ranger" cost 31}
                    {VALUE2 type "Elvish Rider" cost 28}
                    {VALUE2 type "Elvish Sorceress" cost 32}
                [/set_variables]
                [while]
                    {VARIABLE_CONDITIONAL elves_gold greater_than 0}	# will go *roughly* to zero
                    {VARIABLE_CONDITIONAL REPEAT_b less_than {BLOB_LIMIT}}
                    [do]
                        {RANDOM_VAR rnd_i2 0.."$($elves_list.length-1)"}
                        [unit]
                            animate=yes
                            passable=yes
                            placement=map
                            random_traits=yes
                            side=6
                            type=$elves_list[$rnd_i2].type
                            x,y=$rnd_start.x,$rnd_start.y
                            {MOD_OBJECT_LOYAL}
                        [/unit]
                        {VARIABLE_OP REPEAT_b add 1}
                        {VARIABLE_OP elves_gold sub $elves_list[$rnd_i2].cost}
                        {CLEAR_VARIABLE rnd_i2}
                    [/do]
                [/while]
                {CLEAR_VARIABLE elves_list,elves_gold}
                # elves blob spawning end }
            [/then]
        [/if]
        {CLEAR_VARIABLE build_castle}

        [if]
            {VARIABLE_CONDITIONAL history.last_breath_elves_third equals yes}
            [then]
                {REPEAT 2 (
                    [unit]
                        animate=yes
                        passable=yes
                        placement=map
                        random_traits=yes
                        role=elf_special
                        side=6
                        type=Ancient Wose
                        x,y=$rnd_start.x,$rnd_start.y
                        {MOD_OBJECT_LOYAL_OVERLAY}
                    [/unit]
                )}

                {DIALOGUE elves_wose_attack (
                    {SIGHTED_ELVES_B}
                )}
                #[modify_unit]
                #	[filter]
                #		side=6
                #		role=elf_special
                #	[/filter]
                #	role=
                #[/modify_unit]
            [/then]
        [/if]
        {CLEAR_VARIABLE rnd_start}
        {VARIABLE relations.trees {ON_DIFFICULTY -40 -30 -20}}	# reset relations
        {VARIABLE_OP quota.elves sub 1}
        [if]
            {VARIABLE_CONDITIONAL quota.elves less_than_equal_to 0}
            [then]
                {VARIABLE quota.elves 0}
                #{REMOVE_EVENT new_elves_raid}
                #{REMOVE_EVENT spawn_elves_side_6}
            [/then]
        [/if]

        {HIST_EVENT first_elves_sighting (
            {FAKE_SIGHTED elves (
                side=6
                race=elf,wose
            )}
            [event]
                name=elves_sighted
                first_time_only=yes

                {DIALOGUE first_elves_sighting (
                    [if]
                        {VARIABLE_CONDITIONAL wf_vars.law_book greater_than 0}
                        [then]
                            [store_unit]
                                [filter]
                                    side=6
                                    race=elf,wose
                                    [not]
                                        role=elf_leader
                                    [/not]
                                [/filter]
                                mode=always_clear
                                variable=outlaw_store
                            [/store_unit]
                            {SIGHTED_ELVES_LAW}
                            {SIDE_THINNING}
                        [/then]
                        [else]
                            {SIGHTED_ELVES_A}
                            #{INCIDENTAL_MUSIC "elvish-theme.ogg"}
                        [/else]
                    [/if]
                )}
            [/event]
        )}
        {CLEAR_VARIABLE REPEAT_b}
    [/event]
#enddef

#define NEW_DWARVES_RAIDS LIMIT
    [event]
        name=prestart
        {VARIABLE quota.dwarves {LIMIT}}
        {VARIABLE_OP quota.dwarves add $wf_vars.year}
    [/event]

    [event]
        #name=side 6 turn end
        name=spawn_dwarves_side_6
        id=spawn_dwarves_side_6
        first_time_only=no

        [if]
            {VARIABLE_CONDITIONAL wf_vars.law_book greater_than 0}
            {VARIABLE_CONDITIONAL relations.hills greater_than 0}
            [then]
                {VARIABLE_OP relations.hills sub $wf_vars.law_book}
            [/then]
        [/if]

        {RANDOM_VAR random 1..100}
        [if]
            {VARIABLE_CONDITIONAL random less_than $relations.hills}
            {VARIABLE_CONDITIONAL quota.dwarves greater_than 0}
            {HAVE_SIDE6_COUNT}
            [then]
                #{WF_DEBUG "Spawning Dwarves q: $quota.dwarves n: $enemy.num_outlaws t: $turn_number r: $random < $relations.hills"}
                {FIRE_EVENT new_dwarves_raid}
                [unhide_unit]
                [/unhide_unit]
            [/then]
        [/if]
        {CLEAR_VARIABLE random}
    [/event]

    [event]
        name=new_dwarves_raid
        id=new_dwarves_raid
        first_time_only=no

        {VARIABLE REPEAT_b 0}
        {RANDOM_VAR build_castle (yes,yes,no)}
        [if]
            {VARIABLE_CONDITIONAL wf_vars.season_str equals "winter"}
            [then]
                {VARIABLE build_castle no}
            [/then]
        [/if]
        # Find a hill or mountain near the eastern signpost
        {FIND_NEAREST_HEX rnd_start $map_signs[0].x $map_signs[0].y (
            {NOT_FILTER}
            terrain=!,*^V*,!,H*^*,M*^*
        )}
        #{WF_DEBUG "Placing some dwarves near $rnd_start.x,$rnd_start.y"}
        [sound]	# warn the player who is paying attention (and has the sound on)
            name="horn-signals/horn-8.ogg"
        [/sound]

        [if]
            {VARIABLE_CONDITIONAL build_castle boolean_equals yes}
            [then]
                # dwarves castle spawning start {
                {RANDOM_VAR rnd_leader "Dwarvish Thunderguard,Dwarvish Steelclad,Dwarvish Runesmith,Dwarvish Stalwart,Dwarvish Pathfinder"}
                {VARIABLE extra_recruit "Dwarvish Thunderer,Dwarvish Fighter,Dwarvish Guardsman,Dwarvish Scout"}
                {VARIABLE rnd_assistants "Dwarvish Pathfinder,Dwarvish Stalwart,Dwarvish Steelclad,Dwarvish Thunderguard"}
                {VARIABLE rnd_adjacent_find "s,nw,sw"}
                {VARIABLE rnd_adjacent_build "n,se,ne"}

                # If there's already a leader, spawn a new one and release current leader
                [if]
                    [have_unit]
                        side=6
                        canrecruit=yes
                        race=dwarf
                    [/have_unit]
                    [then]
                        [modify_unit]
                            [filter]
                                side=6
                                race=dwarf
                                canrecruit=yes
                            [/filter]
                            canrecruit=no
                            {IS_HERO}
                            [object]
                                [effect]
                                    apply_to=loyal
                                [/effect]
                            [/object]
                            goto_x=0
                            goto_y=0
                        [/modify_unit]
                    [/then]
                [/if]

                {RESET_GOLD 6}
                {VARIABLE rnd_gold "$(ceil($enemy.raid_mult * ($enemy.raid_base_gold+$enemy.raid_gold_mult*$relations.hills)))"}
                [gold]
                    side=6
                    amount=$rnd_gold
                [/gold]
                {CLEAR_VARIABLE rnd_gold}

                # If not, find the nearest place to set up a keep
                {FIND_NEAREST_HEX rnd_keep_spot $rnd_start.x $rnd_start.y (
                    {NOT_FILTER}
                    terrain={BUILDABLE_TERRAIN},Kud
                    [filter_adjacent_location]
                        terrain={BUILDABLE_TERRAIN},Cud
                        adjacent=$rnd_adjacent_find
                        count=3
                    [/filter_adjacent_location]
                    {NOT_MAP_SIGNS}
                )}

                # And place the leader himself
                [unit]
                    #goto_x=$rnd_keep_spot.x
                    #goto_y=$rnd_keep_spot.y
                    animate=yes
                    canrecruit=yes
                    extra_recruit=$extra_recruit
                    passable=yes
                    placement=map
                    random_traits=no
                    role=dwarf_leader
                    side=6
                    type=$rnd_leader
                    x=$rnd_start.x
                    y=$rnd_start.y
                    {IS_LEADER}
                [/unit]
                {VARIABLE_OP REPEAT_b add 1}
                {CLEAR_VARIABLE rnd_leader,extra_recruit}

                # Add a few "assistants"
                {VARIABLE repeat_count $enemy.num_outlaws}
                {VARIABLE_OP repeat_count add 1}
                #{VARIABLE_OP repeat_count sub $wf_vars.law_book}
                {WF_REPEAT $repeat_count (
                    {RANDOM_VAR rnd_type $rnd_assistants}
                    [unit]
                        animate=yes
                        passable=yes
                        placement=map
                        random_traits=yes
                        side=6
                        type=$rnd_type
                        x,y=$rnd_start.x,$rnd_start.y
                        {MOD_OBJECT_LOYAL_OVERLAY}
                    [/unit]
                    {VARIABLE_OP REPEAT_b add 1}
                )}
                {CLEAR_VARIABLE repeat_count}
                {CLEAR_VARIABLE rnd_type,rnd_assistants}

                [micro_ai]
                    side=6
                    ai_type=messenger_escort
                    ca_id=messenger_escort_side6_dwarves
                    action=delete
                [/micro_ai]
                [remove_event]
                    id=turn_build_dwarves_keep
                [/remove_event]
                [remove_event]
                    id=moveto_build_dwarves_keep
                [/remove_event]
                [remove_event]
                    id=die_build_dwarves_keep
                [/remove_event]

                [modify_unit]
                    [filter]
                        side=6
                        canrecruit=yes
                        race=dwarf
                    [/filter]
                    goto_x=$rnd_keep_spot.x
                    goto_y=$rnd_keep_spot.y
                [/modify_unit]
                [micro_ai]
                    side=6
                    ai_type=messenger_escort
                    ca_id=messenger_escort_side6_dwarves
                    action=add
                    [filter]
                        side=6
                        canrecruit=yes
                        race=dwarf
                    [/filter]
                    [filter_second]
                        side=6
                        [not]
                            status=guardian
                        [/not]
                        [not]
                            status=roamer
                        [/not]
                    [/filter_second]
                    waypoint_x=$rnd_keep_spot.x
                    waypoint_y=$rnd_keep_spot.y
                [/micro_ai]

                # Release the messengers if the leader died before building a keep
                [event]
                    name=die
                    id=die_build_dwarves_keep
                    first_time_only=yes
                    delayed_variable_substitution=no
                    [filter]
                        side=6
                        race=dwarf
                        canrecruit=yes
                    [/filter]
                    [micro_ai]
                        side=6
                        ai_type=messenger_escort
                        ca_id=messenger_escort_side6_dwarves
                        action=delete
                    [/micro_ai]
                    [remove_event]
                        id=turn_build_dwarves_keep
                    [/remove_event]
                    [remove_event]
                        id=moveto_build_dwarves_keep
                    [/remove_event]
                [/event]

                # Build a castle when he gets there, or next turn if he's already there
                [event]
                    name=moveto
                    id=moveto_build_dwarves_keep
                    first_time_only=yes
                    delayed_variable_substitution=no	# so I can clear variables
                    [filter]
                        side=6
                        race=dwarf
                        canrecruit=yes
                        x=$rnd_keep_spot.x
                        y=$rnd_keep_spot.y
                    [/filter]
                    {BUILD_SIDE6_KEEP dwarves Kud Cud $rnd_keep_spot.x $rnd_keep_spot.y $rnd_adjacent_build}
                [/event]
                [if]
                    [and]
                        {VARIABLE_CONDITIONAL rnd_start.x equals $rnd_keep_spot.x}
                        {VARIABLE_CONDITIONAL rnd_start.y equals $rnd_keep_spot.y}
                    [/and]
                    [then]
                        [event]
                            name=side 6 turn
                            id=turn_build_dwarves_keep
                            first_time_only=yes
                            delayed_variable_substitution=no
                            [filter_condition]
                                [have_unit]
                                    side=6
                                    race=dwarf
                                    canrecruit=yes
                                    x=$rnd_keep_spot.x
                                    y=$rnd_keep_spot.y
                                [/have_unit]
                            [/filter_condition]
                            {BUILD_SIDE6_KEEP dwarves Kud Cud $rnd_keep_spot.x $rnd_keep_spot.y $rnd_adjacent_build}
                        [/event]
                    [/then]
                [/if]
                {CLEAR_VARIABLE rnd_keep_spot,rnd_adjacent_find,rnd_adjacent_build}
                # dwarves castle spawning end }
            [/then]
        [/if]

        [if]
            {VARIABLE_CONDITIONAL build_castle boolean_equals no}
            [then]
                # dwarves blob spawning start {
                {RANDOM_VAR rnd_leader "Dwarvish Thunderguard,Dwarvish Steelclad,Dwarvish Runesmith,Dwarvish Stalwart,Dwarvish Pathfinder"}
                [unit]
                    animate=yes
                    passable=yes
                    placement=map
                    random_traits=yes
                    role=dwarf_leader
                    side=6
                    type=$rnd_leader
                    x=$rnd_start.x
                    y=$rnd_start.y
                    {IS_HERO}
                    {IS_LEADER}
                    {MOD_OBJECT_LOYAL}
                [/unit]
                {VARIABLE_OP REPEAT_b add 1}
                {CLEAR_VARIABLE rnd_leader}
                {VARIABLE repeat_count $enemy.num_outlaws}
                {VARIABLE_OP repeat_count add 1}
                #{VARIABLE_OP repeat_count sub $wf_vars.law_book}
                {WF_REPEAT $repeat_count (
                    # Dwarves spawn at level 1, stronger has too much potential for randomized doom
                    #{RANDOM_VAR rnd_type "Dwarvish Thunderer,Dwarvish Fighter,Dwarvish Guardsman,Dwarvish Ulfserker,Dwarvish Scout,Gryphon Rider"}
                    {RANDOM_VAR rnd_type "Dwarvish Thunderer,Dwarvish Fighter,Dwarvish Guardsman,Dwarvish Ulfserker,Dwarvish Scout"}
                    [unit]
                        animate=yes
                        passable=yes
                        placement=map
                        random_traits=yes
                        side=6
                        type=$rnd_type
                        x=$rnd_start.x
                        y=$rnd_start.y
                        {MOD_OBJECT_LOYAL_OVERLAY}
                    [/unit]
                    {VARIABLE_OP REPEAT_b add 1}
                    {CLEAR_VARIABLE rnd_type}
                )}
                {CLEAR_VARIABLE repeat_count}
                #{VARIABLE_OP relations.hills multiply $enemy.raid_mult}
                #{VARIABLE_OP relations.hills round ceil}
                #{VARIABLE_OP relations.hills ipart $relations.hills}

                {VARIABLE dwarves_gold "$(ceil($enemy.raid_mult * ($enemy.raid_base_gold + $enemy.raid_gold_mult*$relations.hills)))"}
                #{VARIABLE_OP dwarves_gold multiply 2}
                #{WF_DEBUG "Dwarves fake recruit gold set to $dwarves_gold"}
                [set_variables]
                    name=dwarves_list
                    mode=replace
                    #{VALUE2 type "Dwarvish Runesmith" cost 30}
                    {VALUE2 type "Dwarvish Berserker" cost 30}
                    {VALUE2 type "Dwarvish Pathfinder" cost 30}
                    {VALUE2 type "Dwarvish Stalwart" cost 30}
                    {VALUE2 type "Dwarvish Steelclad" cost 36}
                    {VALUE2 type "Dwarvish Thunderguard" cost 27}
                    #{VALUE2 type "Gryphon Master" cost 38}
                [/set_variables]
                [while]
                    {VARIABLE_CONDITIONAL dwarves_gold greater_than 0}	# will go *roughly* to zero
                    {VARIABLE_CONDITIONAL REPEAT_b less_than {BLOB_LIMIT}}
                    [do]
                        {RANDOM_VAR rnd_i2 0.."$($dwarves_list.length-1)"}
                        [unit]
                            animate=yes
                            passable=yes
                            placement=map
                            random_traits=yes
                            side=6
                            type=$dwarves_list[$rnd_i2].type
                            x,y=$rnd_start.x,$rnd_start.y
                            {MOD_OBJECT_LOYAL}
                        [/unit]
                        {VARIABLE_OP REPEAT_b add 1}
                        {VARIABLE_OP dwarves_gold sub $dwarves_list[$rnd_i2].cost}
                        {CLEAR_VARIABLE rnd_i2}
                    [/do]
                [/while]
                {CLEAR_VARIABLE dwarves_list,dwarves_gold}
                # dwarves blob spawning end }
            [/then]
        [/if]
        {CLEAR_VARIABLE build_castle}

        [if]
            {VARIABLE_CONDITIONAL history.last_breath_dwarves_third equals yes}
            [then]
                {REPEAT 2 (
                    [unit]
                        animate=yes
                        passable=yes
                        placement=map
                        random_traits=yes
                        role=dwarf_special
                        side=6
                        type=Dwarvish Runemaster
                        x,y=$rnd_start.x,$rnd_start.y
                        {MOD_OBJECT_LOYAL_OVERLAY}
                    [/unit]
                )}

                {DIALOGUE dwarves_special_attack (
                    {SIGHTED_DWARVES_B}
                )}
                #[modify_unit]
                #	[filter]
                #		side=6
                #		role=dwarf_special
                #	[/filter]
                #	role=
                #[/modify_unit]
            [/then]
        [/if]
        {CLEAR_VARIABLE rnd_start}
        {VARIABLE relations.hills {ON_DIFFICULTY -40 -30 -20}}	# reset relations
        {VARIABLE_OP quota.dwarves sub 1}
        [if]
            {VARIABLE_CONDITIONAL quota.dwarves less_than_equal_to 0}
            [then]
                {VARIABLE quota.dwarves 0}
                #{REMOVE_EVENT new_dwarves_raid}
                #{REMOVE_EVENT spawn_dwarves_side_6}
            [/then]
        [/if]

        {HIST_EVENT first_dwarves_sighting (
            {FAKE_SIGHTED dwarves (
                side=6
                race=dwarf,gryphon
            )}
            [event]
                name=dwarves_sighted
                first_time_only=yes

                {DIALOGUE first_dwarves_sighting (
                    [if]
                        {VARIABLE_CONDITIONAL wf_vars.law_book greater_than 0}
                        [then]
                            [store_unit]
                                [filter]
                                    side=6
                                    race=dwarf,gryphon
                                    [not]
                                        role=dwarf_leader
                                    [/not]
                                [/filter]
                                mode=always_clear
                                variable=outlaw_store
                            [/store_unit]
                            {SIGHTED_DWARVES_LAW}
                            {SIDE_THINNING}
                        [/then]
                        [else]
                            {SIGHTED_DWARVES_A}
                            #{INCIDENTAL_MUSIC "knalgan_theme.ogg"}
                        [/else]
                    [/if]
                )}
            [/event]
        )}
        {CLEAR_VARIABLE REPEAT_b}
    [/event]
#enddef

#define BUILD_SIDE6_KEEP NAME KEEP CASTLE X Y ADJACENT
    [delay]
        time=300
    [/delay]
    [sound]
        name=mace-miss.ogg
    [/sound]
    {MODIFY_TERRAIN {KEEP} {X} {Y}}
    [terrain]
        terrain={CASTLE}
        [filter_adjacent_location]
            x,y={X},{Y}
            adjacent={ADJACENT}
        [/filter_adjacent_location]
    [/terrain]
    [sound]
        name=mace.wav
    [/sound]
    [modify_unit]
        [filter]
            side=6
            canrecruit=yes
            x,y={X},{Y}
        [/filter]
        goto_x=0
        goto_y=0
    [/modify_unit]
    [micro_ai]
        side=6
        ai_type=messenger_escort
        ca_id=messenger_escort_side6_{NAME}
        action=delete
    [/micro_ai]
    [remove_event]
        id=turn_build_{NAME}_keep
    [/remove_event]
    [remove_event]
        id=moveto_build_{NAME}_keep
    [/remove_event]
    [remove_event]
        id=die_build_{NAME}_keep
    [/remove_event]
#enddef

##define UNDEAD_ATTACK
#side=7
#ai_type=wf_curse_guardian
#ca_id=wf_curse_guardian_undead
#ca_score=31000
#[filter]
#	race=undead
#[/filter]
#[filter_second]
#	{FILTER_FOR_CURSE undead_generator}
#[/filter_second]
##enddef

# ----- Undead -----------------------------------------------------------
#define UNDEAD_ARE_SIDE7
    # Undead, including random/curse units, necromancers, and lich calamities, are all side 7
    [side]
        side=7
        controller=ai
        team_name=undead,calamity_undead # Undead want souls, not creatures
        user_team_name=_"Undead"
        no_leader=yes
        shroud=no
        fog=no
        share_maps=no
        gold=0
        income={ENEMY_INCOME}
        #[ai]
        #	#aggression=0.8
        #	#caution=0.01			# no retreat
        #	#leader_value=1.0
        #	village_value=0.5
        #	# Make all enemies aggressive
        #	aggression=0.8
        #	caution=0.2
        #	#grouping=no
        #	#simple_targeting=yes
        #[/ai]
        {FLAG_VARIANT "undead"}
    [/side]

    [event]
        name=prestart

        {SIDE_AI_AGGRESSION 7 {ON_DIFFICULTY 0.8 0.8 0.9}}
        {SIDE_AI_CAUTION 7 {ON_DIFFICULTY 0.2 0.2 0.1}}
        {SIDE_AI_VILLAGE_VALUE 7 0.5}

        {SIDE_AI_GOAL_TARGET 7}
        {SIDE_AI_GOAL_PROTECT_UNIT 7}

        {SIMPLE_LEADER 7}

        #[goal]
        #	id=curse7
        #	name=target
        #	[criteria]
        #		{FILTER_FOR_CURSE undead_generator}
        #	[/criteria]
        #	value=10
        #[/goal]
        #[goal]
        #	name=target_location
        #	[criteria]
        #		[and]
        #			[filter_owner]
        #				side=1
        #			[/filter_owner]
        #			terrain=*^V*
        #		[/and]
        #	[/criteria]
        #	value=1
        #[/goal]

        # Curse ring micro AI. Disabled.
        #[micro_ai]
        #	action=add
        #	{UNDEAD_ATTACK}
        #[/micro_ai]
    [/event]
    # Undead are scared of fire -- won't burn anything

    [event]
        name=new_undead_raid
        id=new_undead_raid
        first_time_only=no

        {VARIABLE REPEAT_b 0}
        # Pick a direction opposite of the last raid for the season
        #{RANDOM_VAR rnd_dir 0,1,2,3}	# 0=east, 1=north, 2=west, 3=south
        [switch]
            variable=quota.rnd_dir
            [case]
                value=2
                {VARIABLE rnd_dir 3}
            [/case]
            [case]
                value=3
                {VARIABLE rnd_dir 2}
            [/case]
            [else]
                {RANDOM_VAR rnd_dir 2,3}	# west or south edge
            [/else]
        [/switch]
        {VARIABLE quota.rnd_dir $rnd_dir}

        [store_locations]
            variable=undead_places
            terrain=!,W*^*,*^Y*,*^V*,K*^*,C*^*
            {X_AND_Y_ARE_ON_THE_MAP}
            {NOT_FILTER}
            [and]	# appears near the signpost
                x=$map_signs[$rnd_dir].x
                y=$map_signs[$rnd_dir].y
                radius={BORDER}
            [/and]
            {NOT_INNER_MAP}
        [/store_locations]

        {RANDOM_VAR build_castle (yes,yes,yes,yes,yes,yes,yes,yes,yes,no)}
        {VARIABLE rnd_faction "Necromancers,Skeletons,Zombies,Custom"}
#ifhave ~add-ons/Wild_Frontiers/custom/umc_necro.cfg
        {VARIABLE rnd_faction "{WF_UMC_NECRO},$rnd_faction"}
#endif
        {RANDOM_VAR rnd_faction $rnd_faction}
        [if]
            {VARIABLE_CONDITIONAL wf_vars.season_str equals "winter"}
            [then]
                {VARIABLE build_castle no}
                {VARIABLE rnd_faction "Ghosts"}
            [/then]
        [/if]

        [switch]
            variable=rnd_faction
            [case]
                value=Necromancers
                [if]
                    {VARIABLE_CONDITIONAL wf_vars.season less_than 4}
                    [then]
                        # Level 2
                        {VARIABLE rnd_leader "Dark Sorcerer"}
                        # Level 1 recruits
                        {VARIABLE extra_recruit "Dark Adept,Ghost,Ghoul,Skeleton,Skeleton Archer,Soulless,Walking Corpse"}
                        # Level 1
                        {VARIABLE rnd_assistants "Dark Adept,Ghost,Ghoul,Skeleton,Skeleton Archer,Soulless"}
                    [/then]
                    [else]
                        # Level 3
                        {VARIABLE rnd_leader "Necromancer"}
                        # Level 2+1 recruits
                        #{VARIABLE extra_recruit "Shadow,Wraith,Necrophage,Deathblade,Revenant,Bone Shooter,Dark Adept,Ghost,Ghoul,Skeleton,Skeleton Archer,Soulless,Walking Corpse"}
                        # Level 1 recruits
                        {VARIABLE extra_recruit "Dark Adept,Ghost,Ghoul,Skeleton,Skeleton Archer,Soulless,Walking Corpse"}
                        # Level 2
                        {VARIABLE rnd_assistants "Shadow,Wraith,Necrophage,Deathblade,Revenant,Bone Shooter"}
                    [/else]
                [/if]
                # Level 1
                [set_variables]
                    name=extra_list
                    mode=replace
                    {VALUE2 type "Dark Adept" cost 16}
                    {VALUE2 type "Ghost" cost 19}
                    {VALUE2 type "Ghoul" cost 16}
                    {VALUE2 type "Skeleton Archer" cost 14}
                    {VALUE2 type "Skeleton" cost 15}
                    {VALUE2 type "Soulless" cost 13}
                    {VALUE2 type "Walking Corpse" cost 8}
                    {VALUE2 type "Walking Corpse" cost 8}	# walking corpses should appear slightly more often
                [/set_variables]
            [/case]
            [case]
                value=Skeletons
                [if]
                    {VARIABLE_CONDITIONAL wf_vars.season less_than 4}
                    [then]
                        # Level 2
                        {RANDOM_VAR rnd_leader "Revenant,Deathblade,Bone Shooter,Chocobone,Death Squire,Bone Knight"}
                        # Level 1 recruits
                        {VARIABLE extra_recruit "Skeleton,Skeleton Archer"}
                        # Level 1
                        {VARIABLE rnd_assistants "Skeleton,Skeleton Archer"}
                    [/then]
                    [else]
                        # Level 3
                        {RANDOM_VAR rnd_leader "Banebow,Death Knight,Draug"}
                        # Level 2+1 recruits
                        #{VARIABLE extra_recruit "Deathblade,Revenant,Bone Shooter,Skeleton,Skeleton Archer"}
                        # Level 1 recruits
                        {VARIABLE extra_recruit "Skeleton,Skeleton Archer"}
                        # Level 2
                        {VARIABLE rnd_assistants "Deathblade,Revenant,Bone Shooter"}
                    [/else]
                [/if]
                # Level 1
                [set_variables]
                    name=extra_list
                    mode=replace
                    {VALUE2 type "Skeleton Archer" cost 14}
                    {VALUE2 type "Skeleton" cost 15}
                    {VALUE2 type "Skeleton" cost 15}
                [/set_variables]
            [/case]
            [case]
                value=Zombies
                [if]
                    {VARIABLE_CONDITIONAL wf_vars.season less_than 4}
                    [then]
                        # Level 2
                        {VARIABLE rnd_leader "Necrophage"}
                        # Level 1 recruits
                        {VARIABLE extra_recruit "Ghoul,Soulless,Walking Corpse,Vampire Bat,Blood Bat"}
                        # Level 1
                        {VARIABLE rnd_assistants "Ghoul,Soulless,Walking Corpse,Vampire Bat,Blood Bat"}
                    [/then]
                    [else]
                        # Level 3
                        {VARIABLE rnd_leader "Ghast"}
                        # Level 2+1 recruits
                        #{VARIABLE extra_recruit "Necrophage,Ghoul,Soulless,Blood Bat,Dread Bat"}
                        # Level 1 recruits
                        {VARIABLE extra_recruit "Ghoul,Soulless,Walking Corpse,Vampire Bat,Blood Bat"}
                        # Level 2
                        {VARIABLE rnd_assistants "Necrophage,Soulless,Dread Bat"}
                    [/else]
                [/if]
                # Level 1
                [set_variables]
                    name=extra_list
                    mode=replace
                    # Double price!
                    {VALUE2 type "Ghoul" cost 32}
                    {VALUE2 type "Soulless" cost 26}
                    {VALUE2 type "Walking Corpse" cost 16}
                    {VALUE2 type "Walking Corpse" cost 16}	# walking corpses should appear slightly more often
                    {VALUE2 type "Vampire Bat" cost 26}
                    {VALUE2 type "Blood Bat" cost 44}
                [/set_variables]
            [/case]
            [case]
                value=Ghosts
                {VARIABLE build_castle no}
                {VARIABLE rnd_leader "Wraith"}
                {VARIABLE extra_recruit "Ghost,Soulless,Walking Corpse"}
                {VARIABLE rnd_assistants "Ghost,Ghost,Walking Corpse"}
                [set_variables]
                    name=extra_list
                    mode=replace
                    # Triple price!
                    {VALUE2 type "Ghost" cost 57}
                    # Double price!
                    {VALUE2 type "Ghost" cost 38}
                    {VALUE2 type "Walking Corpse" cost 16}
                    {VALUE2 type "Soulless" cost 26}
                [/set_variables]
            [/case]
#ifhave ~add-ons/Wild_Frontiers/custom/umc_necro.cfg
            {WF_UMC_NECRO_CASE}
#endif
            [else]
                #value=Custom
                # Level 2
                {RANDOM_VAR rnd_leader ("Revenant")}
                # Level 1 recruits
                {VARIABLE extra_recruit "Skeleton,Skeleton Archer,Soulless"}
                # Level 1
                {VARIABLE rnd_assistants "Skeleton,Skeleton Archer,Soulless"}
                # Level 1
                [set_variables]
                    name=extra_list
                    mode=replace
                    {VALUE2 type "Skeleton Archer" cost 14}
                    {VALUE2 type "Skeleton" cost 15}
                    {VALUE2 type "Skeleton" cost 15}
                    {VALUE2 type "Soulless" cost 13}
                [/set_variables]
            [/else]
        [/switch]

        [if]
            {VARIABLE_CONDITIONAL build_castle boolean_equals yes}
            [then]
                # undead castle spawning start {
                [switch]	# I know if/else would work, but I like switch statements better
                    variable=rnd_dir
                    [case]
                        value=2
                        {VARIABLE undead_role "west_undead_leader"}
                        {VARIABLE undead_adjacent_find "ne,se,s"}
                        {VARIABLE undead_adjacent_build "sw,nw,n"}
                    [/case]
                    [case]
                        value=3
                        {VARIABLE undead_role "south_undead_leader"}
                        {VARIABLE undead_adjacent_find "ne,n,nw"}
                        {VARIABLE undead_adjacent_build "sw,s,se"}
                    [/case]
                [/switch]

                # If there's already a leader, spawn a new one and release current leader
                [if]
                    [have_unit]
                        side=7
                        canrecruit=yes
                        role=$undead_role
                    [/have_unit]
                    [then]
                        #{WF_DEBUG "Tried to add a new $undead_role , but there's already one there -- Abandon keep. Create a new one"}
                        [modify_unit]
                            [filter]
                                side=7
                                role=$undead_role
                                canrecruit=yes
                            [/filter]
                            role=undead_leader
                            canrecruit=no
                            {IS_HERO}
                            [object]
                                [effect]
                                    apply_to=loyal
                                [/effect]
                            [/object]
                            goto_x=0
                            goto_y=0
                        [/modify_unit]
                    [/then]
                [/if]

                {RESET_GOLD 7}
                {COUNT_VILLAGES num_villages}
                {VARIABLE undead_gold "$(ceil($enemy.raid_mult * ($enemy.raid_base_gold+$enemy.raid_gold_mult*$num_villages)))"}
                {CLEAR_VARIABLE num_villages}
                [switch]
                    variable=rnd_faction
                    [case]
                        value=Zombies
                        {VARIABLE_OP undead_gold divide 2}
                        {VARIABLE_OP undead_gold round floor}
                    [/case]
                [/switch]
                [gold]
                    side=7
                    amount=$undead_gold
                [/gold]
                #{WF_DEBUG "Giving undead $undead_gold gold"}
                {CLEAR_VARIABLE undead_gold}

                {RANDOM_VAR rnd_u 0.."$($undead_places.length-1)"}

                # If not, find the nearest place to set up a keep
                {FIND_NEAREST_HEX undead_keep_spot $undead_places[$rnd_u].x $undead_places[$rnd_u].y (
                    {NOT_FILTER}
                    terrain={BUILDABLE_TERRAIN},Kte
                    [filter_adjacent_location]
                        terrain={BUILDABLE_TERRAIN},Cte
                        adjacent=$undead_adjacent_find
                        count=3
                    [/filter_adjacent_location]
                    {NOT_MAP_SIGNS}
                )}
                #{WF_DEBUG "$undead_keep_spot.x,$undead_keep_spot.y looks like a good place for an undead castle"}
                #{WF_DEBUG "Placing an undead leader $rnd_leader at $undead_places[$rnd_u].x $undead_places[$rnd_u].y"}
                [sound]	# warn the player who is paying attention (and has the sound on)
                    name="wail-long.wav"
                [/sound]

                # And place the leader himself
                [unit]
                    #goto_x=$undead_keep_spot.x
                    #goto_y=$undead_keep_spot.y
                    animate=yes
                    canrecruit=yes
                    extra_recruit=$extra_recruit
                    passable=yes
                    placement=map
                    random_traits=no
                    role=$undead_role
                    side=7
                    type=$rnd_leader
                    x=$undead_places[$rnd_u].x
                    y=$undead_places[$rnd_u].y
                    {IS_LEADER}
                [/unit]
                {VARIABLE_OP REPEAT_b add 1}

                # Add a few "assistants"
                {VARIABLE repeat_count $enemy.num_outlaws}
                {VARIABLE_OP repeat_count add 1}
                #{VARIABLE_OP repeat_count sub $wf_vars.prisoner_bonus}
                {WF_REPEAT $repeat_count (
                    {RANDOM_VAR rnd_type $rnd_assistants}
                    [unit]
                        animate=yes
                        passable=yes
                        placement=map
                        random_traits=yes
                        side=7
                        type=$rnd_type
                        x,y=$undead_places[$rnd_u].x,$undead_places[$rnd_u].y
                        {MOD_OBJECT_LOYAL_OVERLAY}
                    [/unit]
                    {VARIABLE_OP REPEAT_b add 1}
                )}
                {CLEAR_VARIABLE repeat_count}
                {CLEAR_VARIABLE rnd_type}

                [micro_ai]
                    side=7
                    ai_type=messenger_escort
                    ca_id=messenger_escort_side7_$undead_role|
                    action=delete
                [/micro_ai]
                [remove_event]
                    id=turn_build_undead_keep_$undead_role|
                [/remove_event]
                [remove_event]
                    id=moveto_build_undead_keep_$undead_role|
                [/remove_event]
                [remove_event]
                    id=die_build_undead_keep_$undead_role|
                [/remove_event]

                [modify_unit]
                    [filter]
                        side=7
                        canrecruit=yes
                        role=$undead_role
                    [/filter]
                    goto_x=$undead_keep_spot.x
                    goto_y=$undead_keep_spot.y
                [/modify_unit]
                [micro_ai]
                    side=7
                    ai_type=messenger_escort
                    ca_id=messenger_escort_side7_$undead_role|
                    action=add
                    [filter]
                        side=7
                        canrecruit=yes
                        role=$undead_role
                    [/filter]
                    [filter_second]
                        side=7
                        [not]
                            status=guardian
                        [/not]
                        [not]
                            status=roamer
                        [/not]
                    [/filter_second]
                    waypoint_x=$undead_keep_spot.x
                    waypoint_y=$undead_keep_spot.y
                [/micro_ai]

                # Release the messengers if the leader died before building a keep
                [event]
                    name=die
                    id=die_build_undead_keep_$undead_role|
                    first_time_only=yes
                    delayed_variable_substitution=no
                    [filter]
                        side=7
                        role=$undead_role
                        canrecruit=yes
                    [/filter]
                    [micro_ai]
                        side=7
                        ai_type=messenger_escort
                        ca_id=messenger_escort_side7_$undead_role|
                        action=delete
                    [/micro_ai]
                    [remove_event]
                        id=turn_build_undead_keep_$undead_role|
                    [/remove_event]
                    [remove_event]
                        id=moveto_build_undead_keep_$undead_role|
                    [/remove_event]
                [/event]
                # Build a castle when he gets there, or next turn if he's already there
                [event]
                    name=moveto
                    id=moveto_build_undead_keep_$undead_role|
                    first_time_only=yes
                    delayed_variable_substitution=no	# so I can clear variables
                    [filter]
                        side=7
                        role=$undead_role
                        canrecruit=yes
                        x=$undead_keep_spot.x
                        y=$undead_keep_spot.y
                    [/filter]
                    #{WF_DEBUG "event=moveto_build_undead_keep"}
                    {BUILD_UNDEAD_KEEP $undead_keep_spot.x $undead_keep_spot.y $undead_adjacent_build}
                [/event]
                [if]
                    [and]
                        {VARIABLE_CONDITIONAL undead_places[$rnd_u].x equals $undead_keep_spot.x}
                        {VARIABLE_CONDITIONAL undead_places[$rnd_u].y equals $undead_keep_spot.y}
                    [/and]
                    [then]
                        [event]
                            name=side 7 turn
                            id=turn_build_undead_keep_$undead_role|
                            first_time_only=yes
                            delayed_variable_substitution=no
                            [filter_condition]
                                [have_unit]
                                    side=7
                                    role=$undead_role
                                    canrecruit=yes
                                    x=$undead_keep_spot.x
                                    y=$undead_keep_spot.y
                                [/have_unit]
                            [/filter_condition]
                            #{WF_DEBUG "event=turn_build_undead_keep"}
                            {BUILD_UNDEAD_KEEP $undead_keep_spot.x $undead_keep_spot.y $undead_adjacent_build}
                        [/event]
                    [/then]
                [/if]
                {CLEAR_VARIABLE rnd_u}
                {CLEAR_VARIABLE undead_role,undead_keep_spot,undead_adjacent_find,undead_adjacent_build}
                # undead castle spawning end }
            [/then]
        [/if]

        [if]
            {VARIABLE_CONDITIONAL build_castle boolean_equals no}
            [then]
                # undead blob spawning start {
                {RANDOM_VAR rnd_i 0.."$($undead_places.length-1)"}
                #{WF_DEBUG "Spawning a $rnd_leader at $undead_places[$rnd_i].x, $undead_places[$rnd_i].y"}
                [sound]	# warn the player who is paying attention (and has the sound on)
                    name="wail-long.wav"
                [/sound]
                [unit]
                    animate=yes
                    passable=yes
                    placement=map
                    random_traits=yes
                    role=undead_leader
                    side=7
                    type=$rnd_leader
                    x=$undead_places[$rnd_i].x
                    y=$undead_places[$rnd_i].y
                    {IS_HERO}
                    {IS_LEADER}
                    {MOD_OBJECT_LOYAL}
                [/unit]
                {VARIABLE_OP REPEAT_b add 1}
                # Add a few "assistants"
                {VARIABLE repeat_count $enemy.num_outlaws}
                {VARIABLE_OP repeat_count add 1}
                #{VARIABLE_OP repeat_count sub $wf_vars.prisoner_bonus}
                {WF_REPEAT $repeat_count (
                    {RANDOM_VAR rnd_type $rnd_assistants}
                    [unit]
                        animate=yes
                        passable=yes
                        placement=map
                        random_traits=yes
                        side=7
                        type=$rnd_type
                        x,y=$undead_places[$rnd_i].x,$undead_places[$rnd_i].y
                        {MOD_OBJECT_LOYAL_OVERLAY}
                    [/unit]
                    {VARIABLE_OP REPEAT_b add 1}
                )}
                {CLEAR_VARIABLE repeat_count}
                {CLEAR_VARIABLE rnd_type}
                # Now he "recruits" his army
                {COUNT_VILLAGES num_villages}
                {VARIABLE undead_gold "$(ceil($enemy.raid_mult * ($enemy.raid_base_gold + $enemy.raid_gold_mult*$num_villages)))"}
                {CLEAR_VARIABLE num_villages}
                #{VARIABLE_OP undead_gold multiply 2}
                #{WF_DEBUG "Undead fake recruit gold set to $undead_gold"}
                [while]
                    {VARIABLE_CONDITIONAL undead_gold greater_than 0}	# will go *roughly* to zero
                    {VARIABLE_CONDITIONAL REPEAT_b less_than {BLOB_LIMIT}}
                    [do]
                        {RANDOM_VAR rnd_i2 0.."$($extra_list.length-1)"}
                        [unit]
                            animate=yes
                            passable=yes
                            placement=map
                            random_traits=yes
                            side=7
                            type=$extra_list[$rnd_i2].type
                            x,y=$undead_places[$rnd_i].x,$undead_places[$rnd_i].y
                            {MOD_OBJECT_LOYAL}
                        [/unit]
                        {VARIABLE_OP REPEAT_b add 1}
                        {VARIABLE_OP undead_gold sub $extra_list[$rnd_i2].cost}
                        {CLEAR_VARIABLE rnd_i2}
                    [/do]
                [/while]
                {CLEAR_VARIABLE rnd_i,undead_gold}
                # undead blob spawning end }
            [/then]
        [/if]

        {CLEAR_VARIABLE rnd_faction,rnd_leader,rnd_assistants,extra_recruit,extra_list}
        {CLEAR_VARIABLE rnd_dir}
        {CLEAR_VARIABLE undead_places}
        {CLEAR_VARIABLE build_castle}

        # Dialogue event put here to (almost, but not quite certainly) avoid
        # triggering on an undead-cursed relic

        {HIST_EVENT first_undead_sighting (
            {FAKE_SIGHTED undead (
                side=7
                [not]
                    role=curse
                [/not]
            )}
            [event]
                name=undead_sighted
                first_time_only=yes

                #id=undead_sighting
                #{ON_SIGHTING undead_sighting 1 side=7 (
                {DIALOGUE first_undead_sighting (
                    [if]
                        [have_unit]	# the hero sights
                            x,y=$x2,$y2
                            id=Hero
                        [/have_unit]
                        [then]
                            {SIGHTED_UNDEAD_A}
                        [/then]
                        [else]
                            {SIGHTED_UNDEAD_B}
                        [/else]
                    [/if]
                    {SIGHTED_UNDEAD_C}
                    #{INCIDENTAL_MUSIC "the_dangerous_symphony.ogg"}
                )}
                #)}
            [/event]
        )}
        {CLEAR_VARIABLE REPEAT_b}
    [/event]
#enddef

#define BUILD_UNDEAD_KEEP X Y ADJACENT
    [delay]
        time=300
    [/delay]
    [sound]
        name=cave-in.ogg
    [/sound]
    {MODIFY_TERRAIN Kte {X} {Y}}
    # It's possible this might screw things up if you build a structure
    # after the orcs are spawned, but it's a low-probability problem
    [terrain]
        terrain=Cte
        [filter_adjacent_location]
            x,y={X},{Y}
            adjacent={ADJACENT}
        [/filter_adjacent_location]
    [/terrain]
    [sound]
        name=rumble.ogg
    [/sound]
    [modify_unit]
        [filter]
            side=7
            canrecruit=yes
            x,y={X},{Y}
        [/filter]
        goto_x=0
        goto_y=0
    [/modify_unit]
    [micro_ai]
        side=7
        ai_type=messenger_escort
        ca_id=messenger_escort_side7_$undead_role|
        action=delete
    [/micro_ai]
    [remove_event]
        id=turn_build_undead_keep_$undead_role|
    [/remove_event]
    [remove_event]
        id=moveto_build_undead_keep_$undead_role|
    [/remove_event]
    [remove_event]
        id=die_build_undead_keep_$undead_role|
    [/remove_event]
#enddef

# ----- Calamity ---------------------------------------------------------
#define CALAMITY_IS_SIDE8
    # Calamity armies other than animals or undead are side 8
    [side]
        side=8
        controller=ai
        team_name=calamity
        user_team_name=_"Calamity"
        no_leader=yes
        shroud=no
        fog=no
        share_maps=no
        gold=0
        income={ENEMY_INCOME}
        #[ai]
        #	#aggression=0.8
        #	#caution=0.01			# no retreat
        #	#leader_value=1.0
        #	#village_value=0.5
        #	# Make all enemies aggressive
        #	aggression=0.8
        #	caution=0.2
        #	#grouping=no
        #	#simple_targeting=yes
        #[/ai]
        {FLAG_VARIANT6 "ragged"}
    [/side]

    [event]
        name=prestart

        {SIDE_AI_AGGRESSION 8 {ON_DIFFICULTY 0.8 0.8 0.9}}
        {SIDE_AI_CAUTION 8 {ON_DIFFICULTY 0.2 0.2 0.1}}

        {SIDE_AI_GOAL_TARGET 8}
        #{SIDE_AI_GOAL_TARGET_LOCATION 8}
        {SIDE_AI_GOAL_PROTECT_UNIT 8}
        {SIMPLE_LEADER 8}
        {VARIABLE quota.calamity ""}
    [/event]

    [event]
        name=moveto,burn_enemy_keep
        id=burn_enemy_keep
        first_time_only=no
        [filter]
            side=1,9
            x,y=$x1,$y1
            [filter_location]
                terrain=Ko,Koa,Ker,Kte,Khs,Kv,Kud
                x,y=$x1,$y1
            [/filter_location]
        [/filter]
        {SCROLL_TO $x1 $y1}
        [delay]
            time=300
        [/delay]
        [if]
            [have_location]
                terrain=Khs
                x,y=$x1,$y1
            [/have_location]
            [then]
                [terrain]
                    terrain=Ss
                    [and]
                        terrain=Chs
                        [filter_adjacent_location]
                            x,y=$x1,$y1
                            terrain=Khs
                        [/filter_adjacent_location]
                    [/and]
                [/terrain]
                {MODIFY_TERRAIN Ss $x1 $y1}
                [sound]
                    name=mud-glob-miss.ogg
                [/sound]
            [/then]
            [else]
                [terrain]
                    terrain=Rb
                    [and]
                        terrain=Co,Coa,Cer^Edt,Cte,Cv,Cud
                        [filter_adjacent_location]
                            x,y=$x1,$y1
                            terrain=Ko,Koa,Ker,Kte,Kv,Kud
                        [/filter_adjacent_location]
                    [/and]
                [/terrain]
                {MODIFY_TERRAIN Rb $x1 $y1}
                {FIRE_ANIMATION $x1 $y1}	# This places the "burning building" terrain at x,y
            [/else]
        [/if]
        {PLACE_IMAGE "scenery/rubble.png" $x1 $y1}
    [/event]
#enddef

#define HEALER_SUPPORT_KING
    side=9
    ai_type=healer_support
    ca_id=healer_support_king
    aggression=1.0
    injured_units_only=yes
    [filter]
        side=9
        [not]
            status=pilgrim
        [/not]
        [not]
            ability=frozen
        [/not]
        [not]
            ability=guard
        [/not]
        [not]
            ability=fallback
        [/not]
        [not]
            ability=coward
        [/not]
        [not]
            ability=tavern
        [/not]
    [/filter]
#enddef

#define ZONE_GUARDIAN_KING
    side=9
    ai_type=wf_zone_guardian
    ca_id=wf_zone_guardian_king
    # less than Retreat 40000
    ca_score=30000
    [filter]
        side=9
        [not]
            status=pilrgim
        [/not]
        [not]
            type=Caravan
        [/not]
        [not]
            ability=frozen
        [/not]
        [not]
            ability=guard
        [/not]
        [not]
            ability=fallback
        [/not]
        [not]
            ability=coward
        [/not]
        [not]
            ability=tavern
        [/not]
    [/filter]
    [filter_location]
        #x="$({BORDER})"-"$({MAP_WIDTH}-{BORDER})"
        #y="$({BORDER})"-"$({MAP_HEIGHT}-{BORDER})"
        [and]
            [filter]
                side=1,9
            [/filter]
            radius=6
        [/and]
    [/filter_location]
#enddef

# coward will not fallthru if the unit doesn't move.
#define COWARD_RETREAT
    side=9
    ai_type=coward
    ca_id=coward_retreat
    # Less than wf_goto 290000
    ca_score=250000
    [filter]
        ability=coward
    [/filter]
#enddef

#define GOTO_RETREAT_FILTER
    [filter]
        [and]
            ability=coward
            [or]
                ability=tavern
            [/or]
        [/and]
        [filter_location]
            terrain=!,*^V*,*^Yt*
        [/filter_location]
        formula="self.hitpoints < self.max_hitpoints"
    [/filter]
    [filter_location]
        {NOT_FILTER}
        terrain=*^V*,*^Yt*
        include_borders=no
    [/filter_location]
#enddef

#define GOTO_RETREAT
    side=9
    ai_type=wf_goto
    ca_id=goto_retreat
    ca_score=295000
    {GOTO_RETREAT_FILTER}
    avoid_enemies=1
    remove_movement=no
#enddef
#define GOTO_RETREAT_STRAIGHT
    side=9
    ai_type=goto
    ca_id=goto_retreat_straight
    ca_score=290000
    {GOTO_RETREAT_FILTER}
    use_straight_line=yes
#enddef

# goto fallsback to coward if and only if the tavern is destroyed.
# goto will not fallthru to coward if the tavern exists but the unit can't move further due to path block.
# use_straight_line=yes allows the units to cluster around the blocked target location
# use_straight_line=no queues the units in a long line.
#define GOTO_TAVERN_FILTER
    [filter]
        ability=tavern
        #[filter_location]
        #	terrain=!,*^Yt
        #[/filter_location]
    [/filter]
    [filter_location]
        terrain=*^Yt
    [/filter_location]
#enddef

#define GOTO_TAVERN
    side=9
    ai_type=wf_goto
    ca_id=goto_tavern
    ca_score=285000
    {GOTO_TAVERN_FILTER}
    avoid_enemies=1
    remove_movement=no
#enddef
#define GOTO_TAVERN_STRAIGHT
    side=9
    ai_type=goto
    ca_id=goto_tavern_straight
    ca_score=280000
    {GOTO_TAVERN_FILTER}
    use_straight_line=yes
#enddef

# ----- Friends ----------------------------------------------------------
#define FRIENDS_ARE_SIDE9
    # Friendly units, mostly merchants and possibly mercenaries
    [side]
        side=9
        controller=ai
        team_name=settlers,wild_animals
        user_team_name=_"Friends"
        no_leader=yes
        shroud=no
        fog=no
        share_maps=no
        gold=0
        income={ENEMY_INCOME}
        #[ai]
        #	#support_villages=no
        #	#leader_value=1.0
        #	#village_value=0.5
        #	#grouping=no
        #	#grouping=offensive
        #	#grouping=defensive
        #	#simple_targeting=no
        #	# aggression=1.0
        #	# caution=0.0
        #	# village_value=0.0
        #	# grouping=no
        #	# simple_targeting=yes
        #	# {AI_SIMPLE_ALWAYS_ASPECT combat_ignore_bad_movements yes}
        #	# {AI_SIMPLE_ALWAYS_ASPECT combat_ignore_bad_combat yes}
        #	# {AI_SIMPLE_ALWAYS_ASPECT aggression 1.0}
        #	# {AI_SIMPLE_ALWAYS_ASPECT caution 0}
        #[/ai]
        {FLAG_VARIANT "loyalist"}
    [/side]

    {MARKET_CARAVAN}
    {PILGRIM_INIT}

    [event]
        name=prestart

        {VARIABLE quota.market_siren no}
        # Setting for fallback
        # wesnoth/data/core/macros/ai_controller.cfg
        # Be more defensive settings
        {SIDE_AI_AGGRESSION 9 0.1}
        {SIDE_AI_CAUTION 9 1.0}
        [modify_ai]
            side=9
            action=add
            path=aspect[grouping].facet[]
            [facet]
                id=grouping9
                value=offensive # Keep offensive which is default
            [/facet]
        [/modify_ai]
        [modify_ai]
            side=9
            action=add
            path=aspect[leader_value].facet[]
            [facet]
                id=leader_value9
                value=0.0 # Goal below takes care of this
            [/facet]
        [/modify_ai]
        [modify_ai]
            side=9
            action=add
            path=goal[]
            [goal]
                id=target9
                name=target
                [criteria]
                    [filter_side]
                        [enemy_of]
                            side=9
                        [/enemy_of]
                    [/filter_side]
                [/criteria]
                value=1 # To keep them close to the enemy
            [/goal]
        [/modify_ai]
        [micro_ai]
            action=add
            {ZONE_GUARDIAN_KING}
            #station_x,station_y="$(floor({MAP_WIDTH}/2.0))","$(floor({MAP_HEIGHT}/2.0))"
        [/micro_ai]
        [micro_ai]
            action=add
            {HEALER_SUPPORT_KING}
        [/micro_ai]
        [micro_ai]
            action=add
            {COWARD_RETREAT}
            distance=6
            attack_if_trapped=no
        [/micro_ai]
        [micro_ai]
            action=add
            {GOTO_RETREAT}
        [/micro_ai]
        [micro_ai]
            action=add
            {GOTO_RETREAT_STRAIGHT}
        [/micro_ai]
        [micro_ai]
            action=add
            {GOTO_TAVERN}
        [/micro_ai]
        [micro_ai]
            action=add
            {GOTO_TAVERN_STRAIGHT}
        [/micro_ai]
        [if]
            {VARIABLE_CONDITIONAL wf_vars.attack_animals boolean_equals yes}
            [then]
                [modify_side]
                    side=9
                    team_name=settlers
                [/modify_side]
            [/then]
            [else]
                {VARIABLE wf_vars.attack_animals no}
            [/else]
        [/if]
    [/event]

    #{AI_CONTROLLER (WF) 1 9 ()}
    # Micro-AI tag has to be applied in an event tag
    [event]
        #name=side 9 turn
        name=disperse_side_9
        id=disperse_side_9
        first_time_only=no

        #action=change is equivalent to action=delete then action=add
        #[micro_ai]
        #	side=9
        #	ai_type=wf_zone_guardian
        #	ca_id=wf_zone_guardian_king
        #	action=delete
        #[/micro_ai]

        [micro_ai]
            action=add
            side=9
            ai_type=big_animals
            ca_id=big_animals_disperse
            ca_score=300000
            [filter]
                side=9
                [not]
                    status=pilgrim
                [/not]
                [not]
                    type=Caravan
                [/not]
                [not]
                    ability=frozen
                [/not]
            [/filter]
            [filter_location]
                include_borders=no
                terrain=!,*^Y*,*^V*,*^Wm
            [/filter_location]
            [filter_location_wander]
                include_borders=no
                terrain=!,*^Y*,*^V*,*^Wm
            [/filter_location_wander]
        [/micro_ai]

        [if]
            {VARIABLE_CONDITIONAL wf_vars.disperse_troops boolean_not_equals yes}
            [then]
                [micro_ai]
                    side=9
                    ai_type=big_animals
                    ca_id=big_animals_disperse
                    action=delete
                [/micro_ai]
            [/then]
        [/if]

        [if]
            [have_location]
                terrain=*^Yt
                [not]
                    [filter]
                        side=1
                    [/filter]
                [/not]
            [/have_location]
            {VARIABLE_CONDITIONAL wf_vars.tavern_closed boolean_not_equals yes}
            #{VARIABLE_CONDITIONAL wf_vars.disperse_troops boolean_not_equals yes}
            [then]
                [store_locations]
                    variable=meeting_loc
                    terrain=*^Yt
                [/store_locations]
                [micro_ai]
                    action=change
                    {ZONE_GUARDIAN_KING}
                    station_x,station_y=$meeting_loc.x,$meeting_loc.y
                [/micro_ai]
                {CLEAR_VARIABLE meeting_loc}
            [/then]
            [else]
                [micro_ai]
                    action=change
                    {ZONE_GUARDIAN_KING}
                    #station_x,station_y=
                [/micro_ai]
            [/else]
        [/if]
    [/event]

    [event]
        #name=side 9 turn refresh
        name=craven_side_9
        id=craven_side_9
        first_time_only=no

        [store_unit]
            variable=craven_units
            [filter]
                side=9
                ability=coward
                [filter_location]
                    terrain=*^V*
                [/filter_location]
                #formula="self.hitpoints = self.max_hitpoints"
            [/filter]
        [/store_unit]

        [foreach]
            array=craven_units
            [do]
                {BRAVE_UNIT $this_item.id $this_item.x $this_item.y}
            [/do]
        [/foreach]

        {CLEAR_VARIABLE craven_units}
        [if]
            [have_location]
                terrain=*^Yt
                count=0
            [/have_location]
            [then]
                [store_unit]
                    variable=craven_units
                    [filter]
                        side=9
                        ability=tavern
                    [/filter]
                [/store_unit]

                [foreach]
                    array=craven_units
                    [do]
                        {SOBER_UNIT $this_item.id $this_item.x $this_item.y}
                    [/do]
                [/foreach]

                {CLEAR_VARIABLE craven_units}
            [/then]
        [/if]
    [/event]

    [event]
        #name=side 9 turn end
        name=spawn_side_9
        id=spawn_side_9
        first_time_only=no

        {VARIABLE_OP relations.king add {ENEMY_STEP}}

        [if]
            [have_unit]
                side=9
                role=king_leader
            [/have_unit]
            #[or]
            #    # Penalty. No king troops when allied with outlaws.
            #    {VARIABLE_CONDITIONAL diplomacy.ally equals "outlaws"}
            #[/or]
            [or]
                [have_unit]
                    side=9
                    [not]
                        status=pilgrim
                    [/not]
                    [not]
                        type=Caravan
                    [/not]
                    count=15-99999
                [/have_unit]
            [/or]
            [or]
                {VARIABLE_CONDITIONAL wf_vars.expand_rank less_than 2}
            [/or]
            [or]
                {VARIABLE_CONDITIONAL wf_vars.tavern_closed boolean_equals yes}
            [/or]
            [then]
                {VARIABLE relations.king "$(ceil(-1*{ENEMY_STEP} * ({SEASON_LENGTH}/6.0)))"}	# reset relations for a day
            [/then]
        [/if]

        [if]
            {VARIABLE_CONDITIONAL proj_turns.king greater_than 0}
            [then]
                {VARIABLE_OP proj_turns.king sub 1}
            [/then]
            [else]
                # incase it's negative
                {VARIABLE proj_turns.king 0}
            [/else]
        [/if]

        {RANDOM_VAR random 1..100}
        [if]
            [and]
                {VARIABLE_CONDITIONAL random less_than $relations.king}
                {VARIABLE_CONDITIONAL wf_vars.tavern_closed boolean_not_equals yes}
                {HAVE_SIDE9_COUNT}
            [/and]
            [or]
                {VARIABLE_CONDITIONAL wf_vars.king_troops boolean_equals yes}
                {VARIABLE_CONDITIONAL proj_turns.king numerical_equals 0}
            [/or]
            [then]
                #{WF_DEBUG "Spawning Allies $diplomacy.ally n: $enemy.num_allies t: $turn_number r: $random < $relations.king"}
                {FIRE_EVENT new_ally_troops}
                [unhide_unit]
                [/unhide_unit]
            [/then]
        [/if]
        [if]
            {VARIABLE_CONDITIONAL proj_turns.king greater_than 0}
            [then]
                {VARIABLE wf_vars.king_troops yes}
            [/then]
            [else]
                {VARIABLE wf_vars.king_troops no}
            [/else]
        [/if]
        {CLEAR_VARIABLE random}
        {CLEAR_VARIABLE wf_vars.disperse_troops}
    [/event]

    [event]
        name=new_ally_troops
        first_time_only=no
        {VARIABLE REPEAT_b 0}
        {VARIABLE king_role "king_leader"}
        # 0=east, 1=north, 2=west, 3=south
        {VARIABLE rnd_dir 3}
        #Level 2
        {RANDOM_VAR rnd_type (Javelineer,Lieutenant,Red Mage,White Mage,Lancer,Shock Trooper,Knight,Duelist,Longbowman,Swordsman,Pikeman,Dragoon,Horseman Commander,Infantry Lieutenant)}
        [if]
            {VARIABLE_CONDITIONAL wf_vars.king_troops boolean_equals yes}
            {VARIABLE_CONDITIONAL proj_turns.king numerical_equals 0}
            [then]
                {VARIABLE king_role "ally_leader"}
                {RANDOM_VAR rnd_dir 0,1,2,3}	# 0=east, 1=north, 2=west, 3=south
                [if]
                    {VARIABLE_CONDITIONAL quota.allied_dir not_equals $null}
                    [then]
                        {VARIABLE rnd_dir $quota.allied_dir}
                    [/then]
                [/if]
                {CLEAR_VARIABLE quota.allied_dir}
                [switch]
                    variable=diplomacy.ally
                    [case]
                        value="loyalists"
                        #Level 3
                        {RANDOM_VAR rnd_type {LOYALISTS_LEVEL_3}}
                        #{VARIABLE rnd_dir 3}
                    [/case]
                    [case]
                        #Level 3
                        value="outlaws"
                        {RANDOM_VAR rnd_type {OUTLAWS_LEVEL_3}}
                        #{VARIABLE rnd_dir 2}
                    [/case]
                    [case]
                        #Level 3
                        value="dwarves"
                        {RANDOM_VAR rnd_type {DWARVES_LEVEL_3}}
                        #{VARIABLE rnd_dir 1}
                    [/case]
                    [case]
                        #Level 3
                        value="drakes"
                        {RANDOM_VAR rnd_type {DRAKES_LEVEL_3}}
                        #{VARIABLE rnd_dir 0}
                    [/case]
                    [case]
                        #Level 3
                        value="undead"
                        {RANDOM_VAR rnd_type {UNDEAD_LEVEL_3}}
                        #{VARIABLE rnd_dir 0}
                    [/case]
                    [case]
                        #Level 3
                        value="elves"
                        {RANDOM_VAR rnd_type {ELVES_LEVEL_3}}
                        #{VARIABLE rnd_dir 2}
                    [/case]
                    [case]
                        #Level 3
                        value="orcs"
                        {RANDOM_VAR rnd_type {ORCS_LEVEL_3}}
                        #{VARIABLE rnd_dir 1}
                    [/case]
                    [case]
                        #Level 3
                        value="dunefolk"
                        {RANDOM_VAR rnd_type {DUNEFOLK_LEVEL_3}}
                        #{VARIABLE rnd_dir 3}
                    [/case]
                    [else]
                        {VARIABLE diplomacy.ally "loyalists"}
                        #Level 2
                        {RANDOM_VAR rnd_type {LOYALISTS_LEVEL_2}}
                        #{VARIABLE rnd_dir 3}
                    [/else]
                [/switch]
            [/then]
        [/if]

        {FIND_NEAREST_HEX king_start $map_signs[$rnd_dir].x $map_signs[$rnd_dir].y (
            {NOT_FILTER}
            terrain=!,W*^*,*^Y*,*^V*,K*^*,C*^*
        )}
        #{WF_DEBUG "Placing some allies $diplomacy.ally near $king_start.x,$king_start.y"}
        [sound]	# warn the player who is paying attention (and has the sound on)
            name="fanfare-short.wav"
        [/sound]
        [if]
            {VARIABLE_CONDITIONAL king_role equals "king_leader"}
            [then]
                [unit]
                    animate=yes
                    passable=yes
                    placement=map
                    random_traits=yes
                    role=$king_role
                    side=9
                    type=$rnd_type
                    x=$king_start.x
                    y=$king_start.y
                    {IS_HERO}
                    {IS_LEADER}
                    {MOD_OBJECT_LOYAL}
                [/unit]
                {VARIABLE_OP REPEAT_b add 1}
            [/then]
            [else]
                [unit]
                    animate=yes
                    passable=yes
                    placement=map
                    random_traits=yes
                    role=$king_role
                    side=9
                    type=$rnd_type
                    x=$king_start.x
                    y=$king_start.y
                    #{IS_HERO}
                    [modifications]
                        [object]
                            [effect]
                                apply_to=loyal
                            [/effect]
                            [effect]
                                apply_to=overlay
                                add="misc/leader-expendable.png"
                            [/effect]
                        [/object]
                    [/modifications]
                [/unit]
                {VARIABLE_OP REPEAT_b add 1}
            [/else]
        [/if]
        [fire_event]
            name=side9_post_advance
            [primary_unit]
                id=$last_unit_id
            [/primary_unit]
        [/fire_event]
        {CLEAR_VARIABLE rnd_type}
        {VARIABLE repeat_count 1}
        {VARIABLE_OP repeat_count add $enemy.num_allies}
        {WF_REPEAT $repeat_count {NEW_RANDOM_KING ({MOD_OBJECT_LOYAL_OVERLAY})}}
        {VARIABLE repeat_count 0}
        {VARIABLE_OP repeat_count add $wf_vars.extra_guardian}
        {WF_REPEAT $repeat_count {NEW_RANDOM_KING ({MOD_OBJECT_LOYAL})}}
        {CLEAR_VARIABLE repeat_count}

        #[if]
        #	{VARIABLE_CONDITIONAL wf_vars.king_troops boolean_equals yes}
        #	{VARIABLE_CONDITIONAL proj_turns.king numerical_equals 0}
        #[then]
        #	{REPEAT 3 {NEW_RANDOM_KING}}
        #[/then]
        #[/if]

        {VARIABLE relations.king "$(ceil(-1*{ENEMY_STEP} * ({SEASON_LENGTH}/6.0)))"}	# reset relations for a day

        {HIST_EVENT first_king_sighting (
            {FAKE_SIGHTED king (
                side=9
                role=king_leader
            )}
            [event]
                name=king_sighted
                first_time_only=yes

                {DIALOGUE first_king_sighting (
                    {SCROLL_TO $x1 $y1}
                    {SIGHTED_KING_A}
                )}
            [/event]
        )}
        {CLEAR_VARIABLE king_start,king_role,rnd_dir}
        {CLEAR_VARIABLE REPEAT_b}
    [/event]

    [event]
        #name=side 9 turn
        name=walkable_castle
        id=walkable_castle
        first_time_only=no
        [terrain]
            [and]
                terrain=*^Qov
            [/and]
            terrain=^
            layer=overlay
        [/terrain]
    [/event]

    [event]
        name=post advance,side9_post_advance
        id=side9_post_advance
        first_time_only=no

        [filter]
            side=9
            [not]
                ability=swift
            [/not]
            [filter_wml]
                advances_to=""
            [/filter_wml]
        [/filter]
        {VARIABLE unit_has_item no}
        [foreach]
            array=unit.modifications.object
            [do]
                [if]
                    {VARIABLE_CONDITIONAL this_item.id equals "Ring of Swiftness"}
                    [then]
                        {VARIABLE unit_has_item yes}
                    [/then]
                [/if]
            [/do]
        [/foreach]
        [if]
            {VARIABLE_CONDITIONAL unit_has_item boolean_equals no}
            [then]
                # https://github.com/wesnoth/wesnoth/issues/5298
                #[modify_unit]
                #    [filter]
                #        id=$unit.id
                #    [/filter]
                [object]
                    name="Ring of Swiftness"
                    id="Ring of Swiftness"
                    image=items/ring-gold.png
                    description=_"This ring grants +2 movement points."
                    # Always set to no!!! Take only once means once per side per season!!
                    take_only_once=no
                    duration=forever
                    silent=yes
                    [effect]
                        apply_to=new_ability
                        [abilities]
                            [dummy]
                                id=swift
                                name=_"swift"
                                female_name= _ "female^swift"
                                description=_"This unit's movement is increased by +2 points."
                            [/dummy]
                        [/abilities]
                    [/effect]
                    [effect]
                        apply_to=movement
                        increase=2
                    [/effect]
                [/object]
                #[/modify_unit]
            [/then]
        [/if]
        {CLEAR_VARIABLE unit_has_item}
    [/event]
#enddef

#define NEW_RANDOM_KING LOYAL_OVERLAY
    #Level 1
    {RANDOM_VAR rnd_type {LOYALISTS_ALLY_LEVEL_1}}
    [if]
        {VARIABLE_CONDITIONAL wf_vars.king_troops boolean_equals yes}
        {VARIABLE_CONDITIONAL proj_turns.king numerical_equals 0}
        [then]
            #Level 2
            {RANDOM_VAR rnd_type {LOYALISTS_LEVEL_2}}
            [switch]
                variable=diplomacy.ally
                [case]
                    value="loyalists"
                    #Level 2
                    {RANDOM_VAR rnd_type {LOYALISTS_LEVEL_2}}
                [/case]
                [case]
                    value="outlaws"
                    #Level 2
                    {RANDOM_VAR rnd_type {OUTLAWS_LEVEL_2}}
                [/case]
                [case]
                    value="dwarves"
                    #Level 2
                    {RANDOM_VAR rnd_type {DWARVES_LEVEL_2}}
                [/case]
                [case]
                    value="drakes"
                    #Level 2
                    {RANDOM_VAR rnd_type {DRAKES_LEVEL_2}}
                [/case]
                [case]
                    value="undead"
                    #Level 2
                    {RANDOM_VAR rnd_type {UNDEAD_LEVEL_2}}
                [/case]
                [case]
                    value="elves"
                    #Level 2
                    {RANDOM_VAR rnd_type {ELVES_LEVEL_2}}
                [/case]
                [case]
                    value="orcs"
                    #Level 2
                    {RANDOM_VAR rnd_type {ORCS_LEVEL_2}}
                [/case]
                [case]
                    value="dunefolk"
                    #Level 2
                    {RANDOM_VAR rnd_type {DUNEFOLK_LEVEL_2}}
                [/case]
                [else]
                    #Level 1
                    {RANDOM_VAR rnd_type {LOYALISTS_ALLY_LEVEL_1}}
                [/else]
            [/switch]
        [/then]
    [/if]
    [unit]
        animate=yes
        passable=yes
        placement=map
        random_traits=yes
        side=9
        type=$rnd_type
        x=$king_start.x
        y=$king_start.y
        {LOYAL_OVERLAY}
    [/unit]
    {VARIABLE_OP REPEAT_b add 1}
    [fire_event]
        name=side9_post_advance
        [primary_unit]
            id=$last_unit_id
        [/primary_unit]
    [/fire_event]
    {CLEAR_VARIABLE rnd_type}
#enddef

# ----- Outlaws Raiding ----------------------------------------------------------
#define NEW_OUTLAWS_RAIDS JUMP LIMIT
    [event]
        name=prestart
        {VARIABLE quota.outlaws {LIMIT}}
        {VARIABLE_OP quota.outlaws add $wf_vars.year}
    [/event]

    [event]
        #name=side 3 turn end
        name=spawn_side_3
        id=spawn_side_3
        first_time_only=no
        {VARIABLE_OP relations.outlaws add {ENEMY_STEP}}
        {RANDOM_VAR random 1..100}
        [if]
            {VARIABLE_CONDITIONAL random less_than $relations.outlaws}
            {HAVE_SIDE3_COUNT}
            [then]
                [if]
                    {VARIABLE_CONDITIONAL quota.outlaws greater_than 0}
                    [then]
                        #{WF_DEBUG "Spawning new outlaws q: $quota.outlaws n: $enemy.num_outlaws t: $turn_number r: $random < $relations.outlaws"}
                        {FIRE_EVENT new_outlaws_raid}
                        [unhide_unit]
                        [/unhide_unit]
                    [/then]
                [/if]

                {VARIABLE_OP relations.outlaws sub {JUMP}}
                {WF_JITTER relations.outlaws NOISE="0..3"}
                {VARIABLE_OP quota.outlaws sub 1}
            [/then]
        [/if]
        {CLEAR_VARIABLE random}
        [if]
            {VARIABLE_CONDITIONAL quota.outlaws less_than_equal_to 0}
            [then]
                {VARIABLE quota.outlaws 0}
            [/then]
        [/if]
    [/event]

    [event]
        name=new_outlaws_raid
        id=new_outlaws_raid
        first_time_only=no

        {VARIABLE REPEAT_b 0}
        # --------- Start of year 1 Side 3 always bandits ---------
        {RANDOM_VAR rnd_outlaw ("cotf,custom_cotf")}
        {NEW_OUTLAW_LEADER 3}
        {COUNT_VILLAGES num_villages}
        [set_variable]
            name=scale_outlaws
            ipart="$($num_villages/{ON_DIFFICULTY 40.0 30.0 20.0})"
        [/set_variable]
        {CLEAR_VARIABLE num_villages}
        [if]
            {VARIABLE_CONDITIONAL wf_vars.season_str equals "winter"}
            [then]
                {VARIABLE scale_outlaws 0}
            [/then]
        [/if]
        {VARIABLE repeat_count $enemy.num_outlaws}
        {WF_REPEAT $repeat_count {NEW_RANDOM_OUTLAW 3 ({MOD_OBJECT_LOYAL_OVERLAY})}}
        {VARIABLE repeat_count 0}
        {VARIABLE_OP repeat_count add $scale_outlaws}
        {WF_REPEAT $repeat_count {NEW_RANDOM_OUTLAW 3 ({MOD_OBJECT_LOYAL})}}
        {CLEAR_VARIABLE repeat_count}
        {CLEAR_VARIABLE scale_outlaws}
        {CLEAR_VARIABLE outlaw_places}
        {CLEAR_VARIABLE rnd_i}
        {CLEAR_VARIABLE rnd_outlaw}
        {CLEAR_VARIABLE rnd_leader}
        {CLEAR_VARIABLE rnd_recruit}
        {REMOVE_AUTO_ADVANCE_CRONIES 3}
        {CLEAR_VARIABLE REPEAT_b}
    [/event]
#enddef

#define NEW_BANDITS_RAIDS JUMP LIMIT
    [event]
        name=prestart
        {VARIABLE quota.bandits {LIMIT}}
        {VARIABLE_OP quota.bandits add $wf_vars.year}
    [/event]

    [event]
        #name=side 4 turn end
        name=spawn_side_4
        id=spawn_side_4
        first_time_only=no
        {VARIABLE_OP relations.bandits add {ENEMY_STEP}}
        {RANDOM_VAR random 1..100}
        [if]
            {VARIABLE_CONDITIONAL random less_than $relations.bandits}
            {HAVE_SIDE4_COUNT}
            [then]
                [if]
                    {VARIABLE_CONDITIONAL quota.bandits greater_than 0}
                    [then]
                        #{WF_DEBUG "Spawning new bandits q: $quota.bandits n: $enemy.num_outlaws t: $turn_number r: $random < $relations.bandits"}
                        {FIRE_EVENT new_bandits_raid}
                        [unhide_unit]
                        [/unhide_unit]
                    [/then]
                [/if]
                {VARIABLE_OP relations.bandits sub {JUMP}}
                {WF_JITTER relations.bandits NOISE="0..3"}
                {VARIABLE_OP quota.bandits sub 1}
            [/then]
        [/if]
        {CLEAR_VARIABLE random}
        [if]
            {VARIABLE_CONDITIONAL quota.bandits less_than_equal_to 0}
            [then]
                {VARIABLE quota.bandits 0}
            [/then]
        [/if]
    [/event]

    [event]
        name=new_bandits_raid
        id=new_bandits_raid
        first_time_only=no

        {VARIABLE REPEAT_b 0}
        [if]
            {VARIABLE_CONDITIONAL relations.bandit_factions equals ""}
            [then]
                #{VARIABLE relations.bandit_factions "cotf,drakes,knalgans,loyalists,rebels,northerners,undead,custom,custom_drakes,custom_dwarves,custom_elves,custom_orcs,custom_trolls,custom_undead,custom_wolves,custom_ogres,custom_zombies,custom_loyalists,custom_cotf"}
                {VARIABLE relations.bandit_factions "cotf,custom,custom_drakes,custom_dwarves,custom_elves,custom_orcs,custom_trolls,custom_undead,custom_wolves,custom_ogres,custom_zombies,custom_loyalists,custom_cotf"}
#ifhave ~add-ons/Wild_Frontiers/custom/umc_bandit.cfg
                {VARIABLE relations.bandit_factions "{WF_UMC_BANDIT},$relations.bandit_factions"}
#endif
            [/then]
        [/if]
        {WF_RAND_CHOICE $relations.bandit_factions}
        {VARIABLE rnd_outlaw $random_choice}
        {CLEAR_VARIABLE random_choice}
        {WF_RAND_JOIN relations.bandit_factions}
        {CLEAR_VARIABLE random_choice_arr}

        {NEW_OUTLAW_LEADER 4}
        {COUNT_VILLAGES num_villages}
        [set_variable]
            name=scale_outlaws
            ipart="$($num_villages/{ON_DIFFICULTY 40.0 30.0 20.0})"
        [/set_variable]
        {CLEAR_VARIABLE num_villages}
        [if]
            {VARIABLE_CONDITIONAL wf_vars.season_str equals "winter"}
            [then]
                {VARIABLE scale_outlaws 0}
            [/then]
        [/if]
        {VARIABLE repeat_count $enemy.num_outlaws}
        {WF_REPEAT $repeat_count {NEW_RANDOM_OUTLAW 4 ({MOD_OBJECT_LOYAL_OVERLAY})}}
        {VARIABLE repeat_count 0}
        {VARIABLE_OP repeat_count add $scale_outlaws}
        {WF_REPEAT $repeat_count {NEW_RANDOM_OUTLAW 4 ({MOD_OBJECT_LOYAL})}}
        {CLEAR_VARIABLE repeat_count}
        {CLEAR_VARIABLE scale_outlaws}
        {CLEAR_VARIABLE outlaw_places}
        {CLEAR_VARIABLE rnd_i}
        {CLEAR_VARIABLE rnd_outlaw}
        {CLEAR_VARIABLE rnd_leader}
        {CLEAR_VARIABLE rnd_recruit}
        {AUTO_ADV_SIDE 4}
        {CLEAR_VARIABLE REPEAT_b}
    [/event]
#enddef

# ----- Raiding ----------------------------------------------------------
#define NEW_ORC_AND_UNDEAD_RAIDS JUMP LIMIT
    [event]
        #name=side 5 turn end
        name=spawn_side_5
        id=spawn_side_5
        first_time_only=no
        {VARIABLE_OP relations.orc_raids add {ENEMY_STEP}}
        {RANDOM_VAR random 1..100}
        [if]
            {VARIABLE_CONDITIONAL random less_than $relations.orc_raids}
            {HAVE_SIDE5_COUNT}
            [then]
                [if]
                    {VARIABLE_CONDITIONAL quota.orc_raids greater_than 0}
                    [then]
                        # relative quantities of orc/undead set frequencies
                        {RANDOM_VAR enemy_choice $quota.orc_enemy_choice}
                        [switch]	# switch so I can add other options easily
                            variable=enemy_choice
                            [case]
                                value="orc"
                                #{WF_DEBUG "Spawning orc raid q: $quota.orc_raids n: $enemy.num_outlaws t: $turn_number r: $random < $relations.orc_raids"}
                                # Raids for the season locked on orc or undead
                                {VARIABLE quota.orc_enemy_choice {ON_DIFFICULTY ("orc,skip,skip") ("orc") ("orc")}}

                                {VARIABLE quota.undead_enemy_choice "skip"}
                                {VARIABLE relations.undead_raids 0}
                                {VARIABLE quota.undead_raids 0}
                                #{REMOVE_EVENT new_undead_raid}
                                {REMOVE_EVENT spawn_side_7}

                                {FIRE_EVENT new_orc_raid}
                                [unhide_unit]
                                [/unhide_unit]
                            [/case]
                            [case]
                                value="skip"
                                #{WF_DEBUG "Skipping orc raid q: $quota.orc_raids n: $enemy.num_outlaws t: $turn_number r: $random < $relations.orc_raids"}
                            [/case]
                        [/switch]
                    [/then]
                [/if]
                {VARIABLE_OP relations.orc_raids sub {JUMP}}
                {WF_JITTER relations.orc_raids NOISE="-6..0"}
                {VARIABLE_OP quota.orc_raids sub 1}
                #{WF_DEBUG "orc raid new relation q: $quota.orc_raids r: $relations.orc_raids"}
            [/then]
        [/if]
        {CLEAR_VARIABLE enemy_choice}
        {CLEAR_VARIABLE random}
        [if]
            {VARIABLE_CONDITIONAL quota.orc_raids less_than_equal_to 0}
            [then]
                {VARIABLE relations.orc_raids 0}
                {VARIABLE quota.orc_raids 0}
                #{REMOVE_EVENT new_orc_raid}
                {REMOVE_EVENT spawn_side_5}
            [/then]
        [/if]
    [/event]

    [event]
        #name=side 7 turn end
        name=spawn_side_7
        id=spawn_side_7
        first_time_only=no
        {VARIABLE_OP relations.undead_raids add {ENEMY_STEP}}
        {RANDOM_VAR random 1..100}
        [if]
            {VARIABLE_CONDITIONAL random less_than $relations.undead_raids}
            {HAVE_SIDE7_COUNT}
            [then]
                [if]
                    {VARIABLE_CONDITIONAL quota.undead_raids greater_than 0}
                    [then]
                        # relative quantities of orc/undead set frequencies
                        {RANDOM_VAR enemy_choice $quota.undead_enemy_choice}
                        [switch]	# switch so I can add other options easily
                            variable=enemy_choice
                            [case]
                                value="undead"
                                #{WF_DEBUG "Spawning undead raid q: $quota.undead_raids n: $enemy.num_outlaws t: $turn_number r: $random < $relations.undead_raids"}
                                # Raids for the season locked on orc or undead
                                {VARIABLE quota.undead_enemy_choice {ON_DIFFICULTY ("undead,skip,skip") ("undead") ("undead")}}

                                {VARIABLE quota.orc_enemy_choice "skip"}
                                {VARIABLE relations.orc_raids 0}
                                {VARIABLE quota.orc_raids 0}
                                #{REMOVE_EVENT new_orc_raid}
                                {REMOVE_EVENT spawn_side_5}

                                {FIRE_EVENT new_undead_raid}
                                [unhide_unit]
                                [/unhide_unit]
                            [/case]
                            [case]
                                value="skip"
                                #{WF_DEBUG "Skipping undead raid q: $quota.undead_raids n: $enemy.num_outlaws t: $turn_number r: $random < $relations.undead_raids"}
                            [/case]
                        [/switch]
                    [/then]
                [/if]
                {VARIABLE_OP relations.undead_raids sub {JUMP}}
                {WF_JITTER relations.undead_raids NOISE="-6..0"}
                {VARIABLE_OP quota.undead_raids sub 1}
                #{WF_DEBUG "undead raid new relation q: $quota.undead_raids r: $relations.undead_raids"}
            [/then]
        [/if]
        {CLEAR_VARIABLE enemy_choice}
        {CLEAR_VARIABLE random}
        [if]
            {VARIABLE_CONDITIONAL quota.undead_raids less_than_equal_to 0}
            [then]
                {VARIABLE relations.undead_raids 0}
                {VARIABLE quota.undead_raids 0}
                #{REMOVE_EVENT new_undead_raid}
                {REMOVE_EVENT spawn_side_7}
            [/then]
        [/if]
    [/event]

    [event]
        name=prestart
        {VARIABLE quota.orc_raids {LIMIT}}
        {VARIABLE quota.undead_raids {LIMIT}}
        {VARIABLE_OP quota.orc_raids add $wf_vars.year}
        {VARIABLE_OP quota.undead_raids add $wf_vars.year}

        #{RANDOM_VAR rnd_dir 0,1,2,3}	# 0=east, 1=north, 2=west, 3=south
        {VARIABLE quota.rnd_dir -1}

        # Reset raids to start counting after turn 4
        # Other methods were unsatisfactory
        {VARIABLE relations.orc_raids "$(ceil( ({SEASON_LENGTH}/9.0) * {ENEMY_STEP} * -1 ))"}
        {VARIABLE relations.undead_raids "$(ceil( ({SEASON_LENGTH}/9.0) * {ENEMY_STEP} * -1 ))"}

        [if]
            {VARIABLE_CONDITIONAL wf_vars.season_str equals "winter"}
            [then]
                #Winter
                {VARIABLE quota.orc_enemy_choice "skip"}
                {VARIABLE quota.orc_raids 0}
                {VARIABLE relations.orc_raids 0}
                #{REMOVE_EVENT new_orc_raid}
                {REMOVE_EVENT spawn_side_5}

                #Ghost raid in winter
                {VARIABLE quota.undead_raids {LIMIT}}
                {VARIABLE quota.undead_enemy_choice {ON_DIFFICULTY ("undead,skip") ("undead") ("undead")}}
                [if]
                    {VARIABLE_CONDITIONAL wf_vars.season less_than 4}
                    [then]
                        {VARIABLE quota.undead_enemy_choice "skip"}
                        {VARIABLE quota.undead_raids 0}
                        {VARIABLE relations.undead_raids 0}
                        #{REMOVE_EVENT new_undead_raid}
                        {REMOVE_EVENT spawn_side_7}
                    [/then]
                [/if]
            [/then]
        [/if]

        [if]
            {VARIABLE_CONDITIONAL wf_vars.season_str equals "spring"}
            [then]
                #Spring
                {VARIABLE quota.orc_enemy_choice {ON_DIFFICULTY ("orc,skip,skip") ("orc") ("orc")}}
                {VARIABLE quota.undead_enemy_choice "undead,skip,skip,skip,skip,skip,skip,skip,skip,skip"}
            [/then]
        [/if]

        [if]
            {VARIABLE_CONDITIONAL wf_vars.season_str equals "summer"}
            [then]
                #Summer
                {VARIABLE quota.orc_enemy_choice {ON_DIFFICULTY ("orc,orc,orc,skip") ("orc") ("orc")}}
                {VARIABLE quota.undead_enemy_choice "undead,skip,skip,skip,skip,skip,skip,skip,skip,skip"}
                [if]
                    {VARIABLE_CONDITIONAL wf_vars.season less_than 4}
                    [then]
                        #{VARIABLE quota.orc_enemy_choice {ON_DIFFICULTY ("orc,skip") ("orc,skip") ("orc")}}
                        {VARIABLE quota.undead_enemy_choice "skip"}
                        {VARIABLE relations.undead_raids 0}
                        {VARIABLE quota.undead_raids 0}
                        #{REMOVE_EVENT new_undead_raid}
                        {REMOVE_EVENT spawn_side_7}
                    [/then]
                [/if]
            [/then]
        [/if]

        [if]
            {VARIABLE_CONDITIONAL wf_vars.season_str equals "autumn"}
            [then]
                #Autumn
                {VARIABLE quota.orc_enemy_choice "orc,skip,skip,skip,skip,skip,skip,skip,skip,skip"}
                {VARIABLE quota.undead_enemy_choice {ON_DIFFICULTY ("undead,undead,undead,skip") ("undead") ("undead")}}
                [if]
                    {VARIABLE_CONDITIONAL wf_vars.season less_than 4}
                    [then]
                        #{VARIABLE quota.undead_enemy_choice {ON_DIFFICULTY ("undead,skip") ("undead,skip") ("undead")}}

                        {VARIABLE quota.orc_enemy_choice "skip"}
                        {VARIABLE relations.orc_raids 0}
                        {VARIABLE quota.orc_raids 0}
                        #{REMOVE_EVENT new_orc_raid}
                        {REMOVE_EVENT spawn_side_5}
                    [/then]
                [/if]
            [/then]
        [/if]
    [/event]
#enddef

# ----- Burnination ------------------------------------------------------
#define WILL_BURN_BUILDINGS
    [event]
        #name=side 2 turn,side 3 turn,side 6 turn
        name=petrify_lighthouse
        id=petrify_lighthouse
        first_time_only=no

        # Make lighthouses invulnerable to side 2,3,6
        [modify_unit]
            [filter]
                side=1
                type=WF_Lighthouse
            [/filter]
            [effect]
                apply_to=status
                #add=invulnerable
                add=petrified
            [/effect]
        [/modify_unit]
    [/event]

    [event]
        #name=side 2 turn end,side 3 turn end,side 6 turn end
        name=unpetrify_lighthouse
        id=unpetrify_lighthouse
        first_time_only=no

        # Make lighthouses vulnerable to other sides
        [modify_unit]
            [filter]
                side=1
                type=WF_Lighthouse
            [/filter]
            [effect]
                apply_to=status
                #remove=invulnerable
                remove=petrified
            [/effect]
        [/modify_unit]
    [/event]

    [event]
        name=uncover_woses
        first_time_only=no
        [if]
            [have_unit]
                side=1
                ability=wose_sense
                search_recall_list=no
            [/have_unit]
            [then]
                [store_unit]
                    [filter]
                        [not]
                            side=1
                        [/not]
                        [not]
                            side=9
                        [/not]
                        race=wose
                        [not]
                            status=uncovered
                        [/not]
                    [/filter]
                    variable=uncovered_woses
                    mode=append
                [/store_unit]
                [foreach]
                    array=uncovered_woses
                    [do]
                        [modify_unit]
                            [filter]
                                id=$this_item.id
                            [/filter]
                            [effect]
                                apply_to=status
                                add=uncovered
                            [/effect]
                        [/modify_unit]
                    [/do]
                [/foreach]
            [/then]
        [/if]
    [/event]
    [event]
        name=cover_woses
        first_time_only=no

        [foreach]
            array=uncovered_woses
            [do]
                [modify_unit]
                    [filter]
                        id=$this_item.id
                    [/filter]
                    [effect]
                        apply_to=status
                        remove=uncovered
                    [/effect]
                [/modify_unit]
            [/do]
        [/foreach]
        {CLEAR_VARIABLE uncovered_woses}
    [/event]

    [event]
        name=moveto,burn_buildings
        id=burn_buildings
        first_time_only=no
        [filter]
            side=4,5,7,8
            x,y=$x1,$y1
            [and]
                race=human,orc,troll,goblin,drake,dwarf,lizard,wolf,gryphon,ogre
            [/and]

            # Not sure how to switch on village terrain, so I'll handle
            # that event separately
            [filter_location]
                terrain=!,Cer^Edt,!,*^Wm,*^Yf,*^Yfo,*^Yb,*^Ybo,*^Ys,*^Yso,*^Yu,*^Yuo,*^Yt,*^Yto,*^Ya,*^Yao,*^Yws,*^Yga,*^Yge,*^Ygx,*^Ygy,*^Ymb,*^Ymc,*^Ymd,*^Yk,Ce,Cea,Cer,Ket,*^Ebn
                x,y=$x1,$y1
            [/filter_location]
        [/filter]
        [store_locations]	# This has base and overlay in it
            variable=burn_location_full
            x,y=$x1,$y1
        [/store_locations]
        # This is kind of an ugly hack, but I'm not sure how to make it cleaner
        [set_variables]
            name=burn_location
            mode=replace
            [split]
                list=$burn_location_full.terrain
                key=layer
                separator="^"
            [/split]
        [/set_variables]
        [switch]	# switch on base terrain
            variable=burn_location[0].layer
            [case]	# Wooden encampments
                value=Ce,Cea,Cer
                #[if]
                #    {VARIABLE_CONDITIONAL burn_location_full.terrain not_equals "Cer^Edt"}
                #    [then]
                {WF_CALL_FUNCTION "fort" do,x,y="burn",$x1,$y1}
                #    [/then]
                #[/if]
            [/case]
            [case]	# Wooden keeps
                value=Ket
                {WF_CALL_FUNCTION "wooden keep" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Master Wooden keep
                value=Ke,Kea
                {WF_CALL_FUNCTION "wooden keep" do,x,y="burn",$x1,$y1}
                {BURN_GAME_OVER}
                [endlevel]
                    result=defeat
                [/endlevel]
            [/case]
        [/switch]
        [switch]	# switch on overlay terrain
            # I'd like to make this more building type-agnostic, but that's difficult
            variable=burn_location[1].layer
            [case]	# Armorer
                value=Ya,Yao
                {WF_CALL_FUNCTION "armorer" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Blacksmith
                value=Yf,Yfo
                {WF_CALL_FUNCTION "blacksmith" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Bowyer
                value=Yb,Ybo
                {WF_CALL_FUNCTION "bowyer" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Library
                value=Yu,Yuo
                {WF_CALL_FUNCTION "library" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Stables
                value=Ys,Yso
                {WF_CALL_FUNCTION "stables" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Tavern
                value=Yt,Yto
                {WF_CALL_FUNCTION "tavern" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Windmill
                value=Wm
                {WF_CALL_FUNCTION "windmill" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Well
                value=Yws
                {WF_CALL_FUNCTION "well" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Sacrifical Altar
                value=Yga
                {WF_CALL_FUNCTION "altar" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Entrance Tunnel
                value=Yge
                {WF_CALL_FUNCTION "tunnel entrance" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Exit Tunnel
                value=Ygx
                {WF_CALL_FUNCTION "tunnel exit" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Farm yield
                value=Ygy
                {WF_CALL_FUNCTION "yield" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Mushroom farm
                value=Ymb,Ymc,Ymd
                {WF_CALL_FUNCTION "mushroom farm" do,x,y="burn",$x1,$y1}
            [/case]
            [case]	# Brazier
                value=Ebn
                {WF_CALL_FUNCTION "brazier" do,x,y="burn",$x1,$y1}
            [/case]
        [/switch]
        {CLEAR_VARIABLE burn_location_full}
        {CLEAR_VARIABLE burn_location}
    [/event]
    [event]
        name=moveto,burn_lighthouse
        id=burn_lighthouse
        first_time_only=no
        [filter]
            side=4,5,7,8
            x,y=$x1,$y1
            [and]
                race=human,orc,troll,goblin,drake,dwarf,lizard,wolf,gryphon,ogre
            [/and]
            [filter_adjacent]
                side=1
                type=WF_Lighthouse
            [/filter_adjacent]
        [/filter]
        [store_unit]
            [filter]
                side=1
                type=WF_Lighthouse
                [filter_adjacent]
                    side=4,5,7,8
                    x,y=$x1,$y1
                [/filter_adjacent]
            [/filter]
            variable=lighthouse_store
        [/store_unit]
        [foreach]
            array=lighthouse_store
            [do]
                {WF_CALL_FUNCTION "lighthouse" do,x,y="burn",$this_item.x,$this_item.y}
            [/do]
        [/foreach]
        {CLEAR_VARIABLE lighthouse_store}
    [/event]
#enddef

#define WILL_BURN_FARMS
    [event]
        name=moveto,burn_farms
        id=burn_farms
        first_time_only=no
        [filter]
            side=4,5,7,8
            x,y=$x1,$y1
            [and]
                race=human,orc,troll,goblin,drake,dwarf,lizard,wolf,gryphon,ogre
            [/and]
            [filter_location]
#ifdef EASY
                #Do not burn winter farm Vha
                terrain=*^Vh,*^Vm,*^Vhs,*^Vhh,*^Vhha,*^Vhr,*^Vhhr
#else
                terrain=*^Vh,*^Vm,*^Vhs,*^Vhh,*^Vhha,*^Vhr,*^Vhhr,*^Vha
#endif
                x,y=$x1,$y1
                #[not]
                #    # Will not burn if side has a leader and captures village
                #    [filter_owner]
                #        [allied_with]
                #            #side=$side_number
                #            side=$this_unit.side
                #        [/allied_with]
                #    [/filter_owner]
                #[/not]
            [/filter_location]
        [/filter]

        #[switch]
        #    variable=unit.side
        #    [case]
        #        value=4,7
        #        {VARIABLE burn_prob 75}
        #    [/case]
        #    [else]
        #        {VARIABLE burn_prob 100}
        #    [/else]
        #[/switch]
        {VARIABLE burn_prob 100}

        [if]
            [have_location]
                x,y=$x1,$y1
                # Lower prob if side has a leader and they capture this village
                [filter_owner]
                    [allied_with]
                        side=$unit.side
                    [/allied_with]
                [/filter_owner]
            [/have_location]
            [then]
                {VARIABLE burn_prob 75}
            [/then]
        [/if]

        {RANDOM_VAR burn_chance 1..100}
        #{WF_DEBUG "Burn farm side $unit.side if $burn_chance <= $burn_prob"}
        [if]
            {VARIABLE_CONDITIONAL burn_chance less_than_equal_to $burn_prob}
            [then]
                [if]
                    [have_location]
                        x,y=$x1,$y1
                        terrain=*^Vh,*^Vha,*^Vhr
                    [/have_location]
                    [then]
                        [village_unit]
                            x,y=$x1,$y1
                            count=1
                            types=WF_Peasant,WF_Woodsman,WF_Ruffian
                            side=1
                            [then]
                                [message]
                                    role=village_unit
                                    message=_"No!! My farm!"
                                [/message]
                                [modify_unit]
                                    [filter]
                                        role=village_unit
                                    [/filter]
                                    role=
                                [/modify_unit]
                                [message]
                                    x,y=$x1,$y1
                                    message=_"Watch it burn!"
                                [/message]
                                # Do unit advance stuff. In case it survives.
                                [fire_event]
                                    name=allow_peasant_advance
                                [/fire_event]
                                [fire_event]
                                    name=disallow_peasant_advance
                                [/fire_event]

                                [fire_event]
                                    name=allow_woodsman_advance
                                [/fire_event]
                                [fire_event]
                                    name=disallow_woodsman_advance
                                [/fire_event]

                                [fire_event]
                                    name=allow_ruffian_advance
                                [/fire_event]
                                [fire_event]
                                    name=disallow_ruffian_advance
                                [/fire_event]
                            [/then]
                        [/village_unit]
                        {WF_CALL_FUNCTION "farm" do,x,y="burn",$x1,$y1}
                    [/then]
                [/if]
                [if]
                    [have_location]
                        x,y=$x1,$y1
                        terrain=*^Vm
                    [/have_location]
                    [then]
                        {WF_CALL_FUNCTION "water village" do,x,y="burn",$x1,$y1}
                    [/then]
                [/if]
                [if]
                    [have_location]
                        x,y=$x1,$y1
                        terrain=*^Vhs
                    [/have_location]
                    [then]
                        {WF_CALL_FUNCTION "swamp village" do,x,y="burn",$x1,$y1}
                    [/then]
                [/if]
                [if]
                    [have_location]
                        x,y=$x1,$y1
                        terrain=*^Vhh,*^Vhha,*^Vhhr
                    [/have_location]
                    [then]
                        {WF_CALL_FUNCTION "hill village" do,x,y="burn",$x1,$y1}
                    [/then]
                [/if]
            [/then]
        [/if]
        {CLEAR_VARIABLE burn_chance}
        {CLEAR_VARIABLE burn_prob}
    [/event]
#enddef

#define RESET_RELATIONS
    [if]
        {VARIABLE_CONDITIONAL relations.outlaws less_than 2}
        [then]
            {VARIABLE relations.outlaws 2}
        [/then]
        #[else]
        #    {VARIABLE relations.outlaws 10}
        #[/else]
    [/if]
    [if]
        {VARIABLE_CONDITIONAL relations.bandits less_than 2}
        [then]
            {VARIABLE relations.bandits 2}
        [/then]
        #[else]
        #    {VARIABLE relations.bandits 10}
        #[/else]
    [/if]
#enddef

#define WINTER_RELATIONS
    # Outlaws are desparate -- more of them, starting soon to give them
    # time to plod through the snow
    #{VARIABLE_OP enemy.num_outlaws add 2}
    #[if]
    #    {VARIABLE_CONDITIONAL relations.outlaws less_than "$(1*{ENEMY_STEP}*{SEASON_LENGTH})"}
    #    [then]
    #        {VARIABLE relations.outlaws "$(1*{ENEMY_STEP}*{SEASON_LENGTH})"}
    #    [/then]
    #[/if]
    #[if]
    #    {VARIABLE_CONDITIONAL relations.bandits less_than "$(1*{ENEMY_STEP}*{SEASON_LENGTH})"}
    #    [then]
    #        {VARIABLE relations.bandits "$(1*{ENEMY_STEP}*{SEASON_LENGTH})"}
    #    [/then]
    #[/if]
    {RESET_RELATIONS}
#enddef

#define SPRING_RELATIONS
    # Even though I will "thin" them in event=start below, there are still
    # a fair number of outlaws on the map. No need to add more for a few turns
    #[if]
    #    {VARIABLE_CONDITIONAL relations.outlaws greater_than "$(ceil(-1*{ENEMY_STEP} * ({SEASON_LENGTH}/6.0)))"}
    #    [then]
    #        {VARIABLE relations.outlaws "$(ceil(-1*{ENEMY_STEP} * ({SEASON_LENGTH}/6.0)))"}
    #    [/then]
    #[/if]
    #[if]
    #    {VARIABLE_CONDITIONAL relations.bandits greater_than "$(ceil(-1*{ENEMY_STEP} * ({SEASON_LENGTH}/4.0)))"}
    #    [then]
    #        {VARIABLE relations.bandits "$(ceil(-1*{ENEMY_STEP} * ({SEASON_LENGTH}/4.0)))"}
    #    [/then]
    #[/if]
    {RESET_RELATIONS}
#enddef

#define SUMMER_RELATIONS
    {RESET_RELATIONS}
#enddef

#define AUTUMN_RELATIONS
    {RESET_RELATIONS}
#enddef

#define SIDE_THINNING
    [set_variable]	# has to be done this way to use macro definition of outlaw_thinning
        name=outlaws_to_kill
        {OUTLAW_THINNING}
    [/set_variable]
    {VARIABLE_OP outlaws_to_kill multiply $outlaw_store.length}
    {VARIABLE_OP outlaws_to_kill round ceil}
    [if]
        {VARIABLE_CONDITIONAL outlaws_to_kill greater_than $outlaw_store.length}
        [then]
            {VARIABLE outlaws_to_kill $outlaw_store.length}
        [/then]
    [/if]
    {VARIABLE i 0}
    [while]
        {VARIABLE_CONDITIONAL i less_than $outlaws_to_kill}
        [do]
            {RANDOM_VAR death 0.."$($outlaw_store.length-1)"}
            [kill]
                x=$outlaw_store[$death].x
                y=$outlaw_store[$death].y
                animate=yes
                fire_event=no
            [/kill]
            {CLEAR_VARIABLE outlaw_store[$death]}
            {VARIABLE_OP i add 1}
        [/do]
    [/while]
    {CLEAR_VARIABLE i}
    {CLEAR_VARIABLE death}
    {CLEAR_VARIABLE outlaws_to_kill}
    {CLEAR_VARIABLE outlaw_store}
#enddef

#define WF_SNOW_PLOW
    [event]
        name=exit_hex
        first_time_only=no
        [filter]
            type=Caravan
            x,y=$x1,$y1
            [filter_location]
                terrain=Aa,Aa^E*
                x,y=$x1,$y1
            [/filter_location]
        [/filter]
        [terrain]
            terrain=Rb
            layer=base
            [and]
                terrain=Aa,Aa^E*
                x,y=$x1,$y1
                [filter_adjacent_location]
                    terrain=*^Vh,*^Vha,*^Vhr
                    count=0
                [/filter_adjacent_location]
            [/and]
        [/terrain]
        [terrain]
            terrain=Rb^Gvs
            [and]
                terrain=Aa,Aa^E*
                x,y=$x1,$y1
                [filter_adjacent_location]
                    terrain=*^Vh,*^Vha,*^Vhr
                [/filter_adjacent_location]
            [/and]
        [/terrain]
    [/event]
#enddef

#define STOP_ENEMY_SPAWN
    {VARIABLE quota.animals 0} # Side 2
    {VARIABLE quota.animal_guardian 0} # Side 2
    {VARIABLE quota.animal_roamer 0} # Side 2
    {VARIABLE quota.outlaws 0} # Side 3
    {VARIABLE quota.bandits 0} # Side 4
    {VARIABLE quota.orc_raids 0} # Side 5
    {VARIABLE quota.elves 0} # Side 6
    {VARIABLE quota.dwarves 0} # Side 6
    {VARIABLE quota.undead_raids 0} # Side 7

    #{REMOVE_EVENT new_random_animal} # Side 2
    #{REMOVE_EVENT new_animal_guardian} # Side 2
    #{REMOVE_EVENT new_outlaws_raid} # Side 3
    #{REMOVE_EVENT new_bandits_raid} # Side 4
    #{REMOVE_EVENT new_orc_raid} # Side 5
    #{REMOVE_EVENT new_elves_raid} # Side 6
    #{REMOVE_EVENT new_dwarves_raid} # Side 6
    #{REMOVE_EVENT new_undead_raid} # Side 7

    {REMOVE_EVENT new_animal_roamer}
    {REMOVE_EVENT curse_of_undead} # Side 7 cursed ring
    {REMOVE_EVENT calamity_lich} # Side 8
    {REMOVE_EVENT calamity_gryphons} # Side 8
    {REMOVE_EVENT calamity_loyalists} # Side 8
    {REMOVE_EVENT calamity_saurians} # Side 8
    {REMOVE_EVENT calamity_yetis} # Side 8
    {REMOVE_EVENT calamity_drakes} # Side 8
    {REMOVE_EVENT calamity_dwarves} # Side 8
    {REMOVE_EVENT calamity_elves} # Side 8
    {REMOVE_EVENT calamity_orcs} # Side 8
#enddef

# #define PUSHBACK_ENEMY_SPAWN
#     {VARIABLE quota.animals 0} # Side 2
#     #{VARIABLE quota.animal_guardian 0} # Side 2
#
#     #{REMOVE_EVENT new_random_animal} # Side 2
#     #{REMOVE_EVENT new_animal_guardian} # Side 2
#
#     {REMOVE_EVENT curse_of_undead} # Side 7 cursed ring
#
#     {REMOVE_EVENT calamity_lich} # Side 8
#     {REMOVE_EVENT calamity_gryphons} # Side 8
#     {REMOVE_EVENT calamity_loyalists} # Side 8
#     {REMOVE_EVENT calamity_saurians} # Side 8
#     {REMOVE_EVENT calamity_yetis} # Side 8
#     {REMOVE_EVENT calamity_drakes} # Side 8
#     {REMOVE_EVENT calamity_dwarves} # Side 8
#     {REMOVE_EVENT calamity_elves} # Side 8
#     {REMOVE_EVENT calamity_orcs} # Side 8
#
#     {VARIABLE relations.trees {ON_DIFFICULTY -40 -30 -20}}
#     {VARIABLE relations.hills {ON_DIFFICULTY -40 -30 -20}}
#     {VARIABLE relations.outlaws "$(ceil( ({SEASON_LENGTH}/3.0) * {ENEMY_STEP} * -1 ))"}
#     {VARIABLE relations.bandits "$(ceil( ({SEASON_LENGTH}/3.0) * {ENEMY_STEP} * -1 ))"}
#     {VARIABLE relations.orc_raids "$(ceil( ({SEASON_LENGTH}/3.0) * {ENEMY_STEP} * -1 ))"}
#     {VARIABLE relations.undead_raids "$(ceil( ({SEASON_LENGTH}/3.0) * {ENEMY_STEP} * -1 ))"}
# #enddef

#define STOP_ENEMY_RECRUIT
    # Orcs don't retreat at end of autumn
    [modify_unit]
        [filter]
            side=5
            canrecruit=yes
        [/filter]
        role=orc_leader
    [/modify_unit]
    [modify_unit]
        [filter]
            side=7
            canrecruit=yes
        [/filter]
        role=undead_leader
    [/modify_unit]
    [modify_unit]
        [filter]
            side=5,6,7,8
            canrecruit=yes
        [/filter]
        canrecruit=no
        {IS_HERO}
        [object]
            [effect]
                apply_to=loyal
            [/effect]
        [/object]
        goto_x=0
        goto_y=0
    [/modify_unit]
#enddef
