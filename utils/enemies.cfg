# This file includes macros related to the appearance of various enemy groups

# The rates at which the probability of outlaw/orc occurrences rise
# Higher = more predictable
#define ENEMY_STEP
5#enddef

# All scenarios have the same enemy sides, so I've defined them as macros
# for convenience.  Each side macro also calls the events that
# place new enemies

# ----- Animals ----------------------------------------------------------
#define ANIMALS_ARE_SIDE2 LEADER_VALUE
	[side]
	# Creates the animals as side 2.  Leader value must be supplied -- animals
	# will be more aggressive during the winter.  New animals spawn semi-randomly.
		side=2
		controller=ai
		team_name=wild_animals,animals_and_elves,animals_and_undead
		user_team_name=_"Wild animals"
		no_leader=yes
		canrecruit=no
		shroud=yes
		fog=yes
		[ai]	# make the AI treat each unit as independently as possible
			ai_algorithm=ai_default_rca_1_14
			#{MODIFY_AI_DELETE_CANDIDATE_ACTION 2 main_loop retreat_injured}
			aggression=0.25
			attack_depth=1	# IGNORED, IS THERE AN EQUIVALENT?
			caution=0.25
			leader_value={LEADER_VALUE}	# allows me to make animals attack your city only in the winter
			grouping=no
			village_value=5
			simple_targeting=yes
			[goal]	# not sure if this works with simple targeting
				name=target
				value=1
				[criteria]
					{FILTER_FOR_CURSE "feral"}
				[/criteria]
			[/goal]
		[/ai]
		#{MICRO_AI_LURKERS} # HACK FOR 1.11.6, REMOVE IN FUTURE
	[/side]
	
	# Micro-AI tag has to be applied in an event tag
	[event]
		name=prestart
		[micro_ai]
			action=add
            side=2
            ai_type=lurkers
            [filter]
                type=Wolf
            [/filter]
            [filter_location]
                terrain=*^F*
            [/filter_location]
			stationary=yes
        [/micro_ai]
	[/event]
	
	
	[event]
	# A semi-random chance for a new animal to spawn on each turn. Animals spawn
	# at the end of their side turn to prevent an animal appearing out of nowhere
	# and attacking.  Animals tend toward equilibrium -- if you've killed a bunch, 
	# it's more likely that more will spawn. 
		name=side 2 turn end
		first_time_only=no
		[store_unit]
			variable=animal_list
			[filter]
				side=2
			[/filter]
		[/store_unit]
		{RANDOM_VAR chance 1..100}
		{VARIABLE threshold "$($animal_list.length*75.0/$enemy.num_animals)"}
		[if]
			{VARIABLE_CONDITIONAL chance greater_than $threshold}
			[then]
				#{DEBUG "Spawning a new random animal"}
				{NEW_RANDOM_ANIMAL}
			[/then]
		[/if]
		{CLEAR_VARIABLE chance}
		{CLEAR_VARIABLE threshold}
		{CLEAR_VARIABLE animal_list}
	[/event]	
#enddef

#define NEW_RANDOM_ANIMAL
# Creates a new animal of (weighted) random type and places it at a 
# random location on the map.  
	# boars at all levels (copy from Borstep)
	# level0: vamp bat, giant rat, falcon
	# level1: blood bat, wolf, elder falcon, young ogre
	# level2: great wolf, ogre, dread bat, bear (need to make), gryphon
	# level3: direwolf, grizzly bear? (need to make)
	{RANDOM_VAR rnd_level 1..100}
	{DIFFICULTY_VAR multiplier 0.9 1.0 1.1}
	{VARIABLE_OP rnd_level multiply $multiplier|}
	
	[if]
		{VARIABLE_CONDITIONAL rnd_level less_than_equal_to 40}
		[then]	# generate a level 0 animal
			{RANDOM_VAR rnd_type "Vampire Bat,Giant Rat"}
		[/then]
	[/if]
	[if]
		[and]
			{VARIABLE_CONDITIONAL rnd_level greater_than 40}
			{VARIABLE_CONDITIONAL rnd_level less_than_equal_to 85}
		[/and]
		[then]	# generate a level 1 animal, prefer wolves
			{RANDOM_VAR rnd_type "Wolf,Wolf,Wolf"}
			# taking out blood bats because they suck
		[/then]
	[/if]
	[if]
		[and]
			{VARIABLE_CONDITIONAL rnd_level greater_than 85}
			{VARIABLE_CONDITIONAL rnd_level less_than_equal_to 95}
		[/and]
		[then]	# generate a level 2 animal, prefer wolves
			{RANDOM_VAR rnd_type "Great Wolf,Great Wolf,Great Wolf,Water Serpent,Water Serpent"}
			# Removed Gryphons and Dread Bats -- they are %^#@!&* annoying
		[/then]
	[/if]
	[if]
		{VARIABLE_CONDITIONAL rnd_level greater_than 95}
		[then]	# generate a level 3 animal, rare
			{RANDOM_VAR rnd_type "Direwolf,Direwolf,Giant Spider"}
		[/then]
	[/if]
	
	[if]
		{VARIABLE_CONDITIONAL rnd_type equals "Water Serpent"}
		[then]
			{VARIABLE allowed_terrains "W*,S*"}
		[/then]
		[else]
			{VARIABLE allowed_terrains "*^F*,H*,M*,S*"}
		[/else]
	[/if]
	[store_locations]
		variable=wild_places
		{X_AND_Y_ARE_ON_THE_MAP}
		terrain=$allowed_terrains
		[not]
			[filter]
			[/filter]
		[/not]
	[/store_locations]	
	{RANDOM_VAR rnd_i 1..$wild_places.length}
	{VARIABLE_OP rnd_i sub 1}
	
	[unit]
		side=2
		type=$rnd_type
		random_traits=yes
		x=$wild_places[$rnd_i].x
		y=$wild_places[$rnd_i].y
	[/unit]

	{CLEAR_VARIABLE rnd_level,multiplier,rnd_type,rnd_i,allowed_terrains,wild_places}
#enddef

# ----- Outlaws ----------------------------------------------------------
#define NICE_OUTLAWS_ARE_SIDE3 JUMP
	[side]
	# Creates outlaws as side 3, with a supplied JUMP (smaller means more 
	# frequent appearances of these outlaws).
	# This side is "nice", in that they will not burn down your villages,
	# just your blacksmiths etc. and your encampments.
		side=3
		controller=ai
		team_name=outlaws
		user_team_name=_"Outlaws"
		no_leader=yes
		shroud=yes
		fog=yes
		share_maps=no
		gold=0
		income=0
		[ai]
			ai_algorithm=ai_default_rca_1_14
			#{MODIFY_AI_DELETE_CANDIDATE_ACTION 3 main_loop retreat_injured}
			aggression=0.2
			leader_aggression=-0.5
			caution=0.2			# If caution is high, they never attack at all
			leader_value=3.0	# 
			grouping=defensive
			village_value=5
			leader_ignores_keep=yes	# Can't recruit, so no point
			[avoid]				# Stay away from the orc leaders, mkay?
							# Stay away from "wizard towers", just for flavor
				terrain=Co,Coa,Ko,Koa,Chr,Cwr
			[/avoid]
			[goal]				# focus on the player
				name=target
				[criteria]
					side=1
				[/criteria]
				value=3
			[/goal]
			[goal]				# not the animals or orcs
				name=target
				[criteria]
					side=2,5
				[/criteria]
				value=-100
			[/goal]
			[goal]				# Aim at the town -- villages and castles
				name=target_location
				[criteria]
					[and]
						[filter_owner]
							side=1
						[/filter_owner]
						terrain=*^V*
					[/and]
					[or]
						terrain=*^Y*
					[/or]
				[/criteria]
				value=5
			[/goal]
			#[goal]				# Don't leave the "leader" out to dry
			#	name=protect_unit
			#	[criteria]
			#		role=outlaw_leader
			#		side=3
			#	[/criteria]
			#	protect_radius=5
			#	value=5
			#[/goal]
		[/ai]
		{FLAG_VARIANT "ragged"}
	[/side]
	
	{WILL_BURN_BUILDINGS 3}
	{WILL_BURN_FARMS 3 25}		# burn some farms, but not all
	
	[event]
		name=side 3 turn end
		first_time_only=no	
		{VARIABLE_OP relations.outlaws_nice add {ENEMY_STEP}}
		{RANDOM_VAR random 1..100}
		[if]
			{VARIABLE_CONDITIONAL random less_than $relations.outlaws_nice}
			[then]
				{DEBUG "Spawning new *nice* outlaws"}
				{NEW_OUTLAW_LEADER 3}
				{REPEAT $enemy.num_outlaws {NEW_RANDOM_OUTLAW 3}}
				{VARIABLE_OP relations.outlaws_nice sub "$({JUMP}*{ENEMY_STEP})"}
				[modify_unit]	# this ensures later outlaws not placed with old leader
					[filter]
						side=3
						canrecruit=yes
					[/filter]
					role=outlaw_leader
				[/modify_unit]
			[/then]
		[/if]
		{CLEAR_VARIABLE random}
	[/event]
#enddef

#define MEAN_OUTLAWS_ARE_SIDE4 JUMP
	# Creates outlaws as side 4.
	# This side is "mean", in that they will burn down your villages as well as
	# your blacksmiths etc. and your encampments.
	[side]
		side=4
		controller=ai
		team_name=outlaws
		user_team_name=_"Outlaws"
		no_leader=yes
		shroud=yes
		fog=yes
		share_maps=no
		gold=0
		income=0
		[ai]
			ai_algorithm=ai_default_rca_1_14
			#{MODIFY_AI_DELETE_CANDIDATE_ACTION 4 main_loop retreat_injured}
			aggression=0.5
			leader_aggression=-0.5
			caution=-1
			leader_value=3.0
			village_value=5
			leader_ignores_keep=yes	# Can't recruit, so no point
			[avoid]				# Stay away from the orc leaders, mkay?
							# Stay away from "wizard towers", just for flavor
				terrain=Co,Coa,Ko,Koa,Chr,Cwr
			[/avoid]
			[goal]				# focus on the player
				name=target
				[criteria]
					side=1
				[/criteria]
				value=3
			[/goal]
			[goal]				# not the animals or orcs
				name=target
				[criteria]
					side=2,5
				[/criteria]
				value=-100
			[/goal]
			[goal]				# Mean outlaws also aim at blacksmiths, etc. MWAHAHAHAHAHA
				name=target_location
				[criteria]
					[and]
						[filter_owner]
							side=1
						[/filter_owner]
						terrain=*^V*
					[/and]
					[or]
						terrain=*^Y*,Ce,Cea
					[/or]
				[/criteria]
				value=100
			[/goal]
			[goal]				# Don't leave the "leader" out to dry
				name=protect_unit
				[criteria]
					role=outlaw_leader
					side=4
				[/criteria]
				protect_radius=1
				value=5
			[/goal]
		[/ai]
		{FLAG_VARIANT "undead"}	# helps to distinguish them as not nice, arguably
	[/side]
	
	{WILL_BURN_BUILDINGS 4}
	{WILL_BURN_FARMS 4 75}		# burn most farms
	
	[event]
		name=side 4 turn end
		first_time_only=no	
		{VARIABLE_OP relations.outlaws_mean add {ENEMY_STEP}}
		{RANDOM_VAR random 1..100}
		[if]
			{VARIABLE_CONDITIONAL random less_than $relations.outlaws_mean}
			[then]
				{DEBUG "Spawning new *mean* outlaws"}
				{NEW_OUTLAW_LEADER 4}
				{REPEAT $enemy.num_outlaws {NEW_RANDOM_OUTLAW 4}}
				{VARIABLE_OP relations.outlaws_mean sub "$({JUMP}*{ENEMY_STEP})"}
				[modify_unit]	# this ensures later outlaws not placed with old leader
					[filter]
						side=4
						canrecruit=yes
					[/filter]
					role=outlaw_leader
				[/modify_unit]
			[/then]
		[/if]
		{CLEAR_VARIABLE random,rnd_i,outlaw_places}
	[/event]
#enddef


#define NEW_OUTLAW_LEADER SIDE
	# Leader is a level-3 unit starting in the first winter
	[if]
		{VARIABLE_CONDITIONAL season less_than 2}
		[then]
			{RANDOM_VAR rnd_type ("Outlaw,Bandit,Trapper")}
		[/then]
		[else]
			# Skipping fugitive, as I want the outlaws to go on the offense
			{RANDOM_VAR rnd_type ("Highwayman,Ranger,Huntsman")}
		[/else]
	[/if]
	[store_locations]
		variable=outlaw_places
		terrain=!,W*,*^Y*,*^V*
		{X_AND_Y_ARE_ON_THE_MAP}
		[and]	# appears somewhere near the map edges, not near buildings
			# left-hand map edge
			x=1-{BORDER}
			y=1-{MAP_HEIGHT}
			[or]	# right-hand map edge
				x="$({MAP_WIDTH}-{BORDER})"-{MAP_WIDTH}
				y=1-{MAP_HEIGHT}
			[/or]
			[or]	# top map edge
				x=1-{MAP_WIDTH}
				y=1-{BORDER}
			[/or]
			[or]	# bottom map edge
				x=1-{MAP_WIDTH}
				y="$({MAP_HEIGHT}-{BORDER})"-{MAP_HEIGHT}
			[/or]
		[/and]
		[not]	# avoid buildings, villages, and orc castles
			terrain=*^Y*,*^V*,Co,Ko		# Don't need to avoid in winter -- no orcs
			radius=2
		[/not]
	[/store_locations]
	{RANDOM_VAR rnd_i 1..$outlaw_places.length}
	{VARIABLE_OP rnd_i sub 1}
	
	[unit]
		side={SIDE}
		type=$rnd_type
		x=$outlaw_places[$rnd_i].x
		y=$outlaw_places[$rnd_i].y
		canrecruit=yes
		placement=map
		animate=yes
		role=new_outlaw_leader
	[/unit]
	{CLEAR_VARIABLE rnd_type}
#enddef

#define NEW_RANDOM_OUTLAW SIDE
	# In the few seasons outlaws are weak (level 0-1), later they can have level 2 units as well
	[if]
		{VARIABLE_CONDITIONAL season less_than 3}
		[then]
			{RANDOM_VAR rnd_type "Woodsman,Poacher,Thief,Ruffian,Thug,Footpad"}
		[/then]
		[else]
			{RANDOM_VAR rnd_type "Woodsman,Poacher,Trapper,Thief,Rogue,Ruffian,Thug,Bandit,Footpad,Outlaw"}
		[/else]
	[/if]
	[unit]
		side={SIDE}
		type=$rnd_type
		canrecruit=no
		random_traits=yes
		generate_name=yes
		x=$outlaw_places[$rnd_i].x
		y=$outlaw_places[$rnd_i].y
		animate=yes
	[/unit]
	
	{CLEAR_VARIABLE rnd_type}
#enddef


# ----- ORCS (and trolls) ------------------------------------------------
#define ORCS_ARE_SIDE5
	# Creates orcs as side 5. Orc leaders from the east and north are given 
	# those roles to identify them. 
	# Orcs will happily will burn down basically everything, all the time.
	# No wolf riders right now as there are already wolves around, but I may change
	# my mind later
	[side]
		side=5
		controller=ai
		team_name=orcs
		user_team_name=_"Orcs"
		recruit=Orcish Archer,Orcish Assassin,Orcish Grunt,Troll Whelp,Goblin Spearman
		no_leader=yes
		shroud=yes
		fog=yes
		share_maps=no
		gold=0			# no initial gold -- given when a leader shows up
		income=-2		# income set later, -2 to counteract default income
		[ai]
			ai_algorithm=ai_default_rca_1_14
			#{MODIFY_AI_DELETE_CANDIDATE_ACTION 5 main_loop retreat_injured}
			aggression=0.6
			caution=0.2
			leader_value=3.0
			village_value=2
			[goal]		# Orcs aim at castles, blacksmiths, etc. MWAHAHAHAHAHA
				name=target_location
				[criteria]
					terrain=*^Y*,Ce,Cea
				[/criteria]
				value=10
			[/goal]
			[goal]		# Don't leave the leader out to dry
				name=protect_unit
				[criteria]
					side=5
					canrecruit=yes
				[/criteria]
				protect_radius=10
				value=100
			[/goal]
		[/ai]
		{FLAG_VARIANT "long"}	# not that this ever gets used, since they burn stuff down
	[/side]
	
	# If there are orc leaders present at the beginning of the season, set their income
	# Can't be prestart-ed because the orcs haven't been unstored yet
	[event]
		name=start
		[if]
			[have_unit]
				side=5
				canrecruit=yes
			[/have_unit]
			[then]
				[modify_side]
					side=5
					income="$($enemy.raid_base_income + $enemy.raid_income_mult * $season)"
				[/modify_side]
			[/then]
		[/if]
	[/event]
	
	# If an orc leader is killed, and none are left, set income to zero
	[event]
		name=die
		first_time_only=no
		[filter]
			side=5
			canrecruit=yes
		[/filter]
		[if]
			[not]
				[have_unit]
					side=5
					canrecruit=yes
				[/have_unit]
			[/not]
			[then]
				[modify_side]
					side=5
					income=-2
				[/modify_side]
			[/then]
		[/if]
	[/event]	
	
	[event]
		name=die
		first_time_only=no # Who wants to go orc-hunting?!
		[filter]
			side=5
			canrecruit=yes
		[/filter]
		[filter_second]	# You don't get gold if an outlaw does the dirty work
			side=1
		[/filter_second]
		[message]
			speaker=second_unit
			message=_"These scum must have ransacked a lot of villages to have this much gold."
		[/message]
		[message]
			speaker=second_unit
			message=_"Still, I do not think the rightful owners have much use for it anymore."
		[/message]
		{NARRATOR_SAYS _"You receive {ORC_REWARD} gold pieces"}
		{REFUND_GOLD {ORC_REWARD}}	# not actually a refund, but it's easier this way
	[/event]
	
	# All orc units don't have upkeep -- this makes sure that the
	# leaders can defend themselves when attacked by outlaws, animals, or you
	# by recruiting new units since they should always have positive gold.
	[event]
		name=recruit
		first_time_only=no
		[filter]
			side=5
		[/filter]
		[modify_unit]
			[filter]
				x,y=$x1,$y1
			[/filter]
			upkeep=free
		[/modify_unit]
	[/event]
		
	{WILL_BURN_BUILDINGS 5}
	{WILL_BURN_FARMS 5 100}
	
	# This event is fired for the appearance of new orc leaders
	# It could have been included in the new_raid macro(s), but for 
	# consistency with necros, it's made a fire-able event
	[event]
		name=new_orc_raid
		first_time_only=no
		# The income-setting *should* be redundant if there's already an orc leader, but whatever
		[modify_side]
			side=5
			income="$($enemy.raid_base_income + $enemy.raid_income_mult * $season)"
		[/modify_side]
		# The gold is not redundant
		{COUNT_VILLAGES num_villages}
		{VARIABLE orc_gold "$($enemy.raid_base_gold+$enemy.raid_gold_mult*$num_villages)"}
		[gold]
			side=5
			amount=$orc_gold
		[/gold]
		{CLEAR_VARIABLE orc_gold}
		{CLEAR_VARIABLE num_villages}
	
		# Pick a direction
		{RANDOM_VAR rnd_dir 0,1}	# 0=east, 1=north, used in map_signs
		[switch]	# I know if/else would work, but I like switch statements better
			variable=rnd_dir
			[case]
				value=0
				{VARIABLE orc_role "east_orc_leader"}
			[/case]
			[case]
				value=1
				{VARIABLE orc_role "north_orc_leader"}
			[/case]
		[/switch]
		
		# Give gold bonus if there's already a leader, otherwise create a new leader
		[if]
			[have_unit]
				role=$orc_role
			[/have_unit]
			[then]
				{DEBUG "Tried to add a new orc leader, but there's already one there -- just giving him a bit of extra gold"}
				[gold]
					side=5		# don't overdo it here, side already given gold
					amount=25	# This just accounts for no new leader
				[/gold]
			[/then]
			[else]
				{RANDOM_VAR rnd_type ("Orcish Slurbow,Orcish Warlord")}
				# This *should* always succeed as the signpost is on plains, although a 
				# really devious player could divert a stream here or something.  I should
				# fix this eventually, although it's rather low priority.
				[store_locations]
					variable=orc_places
					terrain=!,W*,*^Y*,*^V*
					{X_AND_Y_ARE_ON_THE_MAP}
					[and]	# appears near the signpost
						x=$map_signs[$rnd_dir].x
						y=$map_signs[$rnd_dir].y
						radius=3	# this is kind of arbitrary
					[/and]
				[/store_locations]
				{RANDOM_VAR rnd_o 1..$orc_places.length}
				{VARIABLE_OP rnd_o sub 1}

				# Check if there's already an orc castle nearby (so they don't try to move to yours)
				[if]
					[have_location]
						[and]
							x=$orc_places[$rnd_o].x
							y=$orc_places[$rnd_o].y
							radius=12	# somewhat arbitrary measure of "nearby"
						[/and]
						terrain=Ko*
						[filter_adjacent_location]
							terrain=Co*
							count=2-6	# Can't be too damaged
						[/filter_adjacent_location]
					[/have_location]
					[then]
						{DEBUG "Already have an orc castle"}
						[store_locations]	
							variable=orc_keep_spot
							terrain=Ko*	# in the unlikely event that there's
							{X_AND_Y_ARE_ON_THE_MAP}
							[and]		# multiple keeps, this will just use the first one
								x=$orc_places[$rnd_o].x
								y=$orc_places[$rnd_o].y
								radius=12	# somewhat arbitrary measure of "nearby"
							[/and]
						[/store_locations]
					[/then]
					[else]
						# If not, find the nearest place to set up a keep
						{FIND_NEAREST_HEX orc_keep_spot $orc_places[$rnd_o].x $orc_places[$rnd_o].y (
							terrain={BUILDABLE_TERRAIN}
							[filter_adjacent_location]
								terrain={BUILDABLE_TERRAIN}
								adjacent=sw,s,se
								count=3
							[/filter_adjacent_location] )}
						{DEBUG "$orc_keep_spot.x,$orc_keep_spot.y looks like a good place for an orc castle"}
					[/else]
				[/if]
				{DEBUG "Placing an orc leader at $orc_places[$rnd_o].x $orc_places[$rnd_o].y"}
				# And place the leader himself	
				[unit]
					side=5
					type=$rnd_type
					x=$orc_places[$rnd_o].x
					y=$orc_places[$rnd_o].y
					canrecruit=yes
					role=$orc_role
					placement=map
					animate=yes
					goto_x=$orc_keep_spot.x
					goto_y=$orc_keep_spot.y
				[/unit]
				{CLEAR_VARIABLE rnd_type}
				# This event makes sure the orc leader can't get distracted on his way to the keep
				[event]
					name=side 5 turn
					delayed_variable_substitution=no
					id=guide_orc_leader
					[modify_unit]
						[filter]
							side=5
							role=$orc_role
						[/filter]
						goto_x=$orc_keep_spot.x
						goto_y=$orc_keep_spot.y
					[/modify_unit]
				[/event]
				# Build a castle when he gets there, or next turn if he's already there
				[if]
					[and]
						{VARIABLE_CONDITIONAL orc_places[$rnd_o].x equals $orc_keep_spot.x}
						{VARIABLE_CONDITIONAL orc_places[$rnd_o].y equals $orc_keep_spot.y}
					[/and]
					[then]
						[event]
							name=side 5 turn
							first_time_only=yes
							delayed_variable_substitution=no
							{BUILD_ORC_KEEP $orc_keep_spot.x $orc_keep_spot.y}
						[/event]
						# orc leader no longer needs to be guided to castle
						[modify_unit]
							[filter]
								side=5
								role=$orc_role
							[/filter]
							goto_x=0
							goto_y=0
						[/modify_unit]
						[event]	
							id=guide_orc_leader
							remove=yes
						[/event]
						{CLEAR_VARIABLE orc_role}
					[/then]
					[else]					
						[event]
							name=moveto
							first_time_only=yes
							delayed_variable_substitution=no	# so I can clear variables
							[filter]
								side=5
								canrecruit=yes
								x=$orc_keep_spot.x
								y=$orc_keep_spot.y
							[/filter]
							{BUILD_ORC_KEEP $orc_keep_spot.x $orc_keep_spot.y}
						[/event]
					[/else]
				[/if]
				{CLEAR_VARIABLE rnd_o}
				{CLEAR_VARIABLE orc_keep_spot}
				{CLEAR_VARIABLE orc_places}
			[/else]
		[/if]
		# Now supply his hench-orcs
		[switch]
			variable=rnd_dir
			[case]
				value=0	# East
				{ORC_LEADER_SWITCH north_orc_leader no}	# make sure new units don't go north
				{REPEAT 3 {NEW_RANDOM_ORC}}
				{ORC_LEADER_SWITCH north_orc_leader yes}
			[/case]
			[case]
				value=1	# North
				{ORC_LEADER_SWITCH east_orc_leader no}	# make sure new units don't go east
				{REPEAT 3 {NEW_RANDOM_ORC}}
				{ORC_LEADER_SWITCH east_orc_leader yes}
			[/case]
		[/switch]
		[sound]	# warn the player who is paying attention (and has the sound on)
			name="ambient/wardrums.ogg"
		[/sound]
		{CLEAR_VARIABLE rnd_dir,orc_role}
	[/event]
	
#enddef

#define ORC_LEADER_SWITCH ROLE YES_NO
	[modify_unit]
		[filter]
			role={ROLE}
		[/filter]
		canrecruit={YES_NO}
	[/modify_unit]
#enddef

#define BUILD_ORC_KEEP X Y
	[if]
		[have_location]	# If you don't have this location, it's already a keep
			x=$orc_keep_spot.x
			y=$orc_keep_spot.y
			terrain={BUILDABLE_TERRAIN}
		[/have_location]
		[then]
			{MODIFY_TERRAIN Ko {X} {Y}}
			# It's possible this might screw things up if you build a structure
			# after the orcs are spawned, but it's a low-probability problem
			[terrain]
				terrain=Co
				[filter_adjacent_location]
					x,y={X},{Y}
					adjacent=ne,n,nw
				[/filter_adjacent_location]
			[/terrain]
		[/then]
	[/if]
#enddef

#define NEW_RANDOM_ORC
	# Orc sidekicks are always level 2 -- it's the gold their side has that
	# varies from season to season
	{RANDOM_VAR rnd_type "Orcish Crossbowman,Orcish Slayer,Orcish Warrior,Troll,Troll Rocklobber"}
	[unit]
		side=5
		type=$rnd_type
		canrecruit=no
		placement=leader
		animate=yes
		[modifications]
			{TRAIT_LOYAL}
		[/modifications]
        overlays="misc/loyal-icon.png"
	[/unit]
	
	{CLEAR_VARIABLE rnd_type}
#enddef	


# ----- Elves ------------------------------------------------------------
#define ELVES_ARE_SIDE6
	# Elves appear if you cut down too many forests
	[side]
		side=6
		controller=ai
		team_name=animals_and_elves,outlaws	# Elves like animals, tolerate outlaws
		user_team_name=_"Elves"
		recruit= 
		no_leader=yes
		shroud=no
		fog=no
		share_maps=no
		gold=0
		income=0
		[ai]
			ai_algorithm=ai_default_rca_1_14
			#{MODIFY_AI_DELETE_CANDIDATE_ACTION 6 main_loop retreat_injured}
			aggression=0.6
			caution=0			# no retreat
			leader_value=5.0	
			village_value=1
			[goal]				# Aim at hero, because he ordered the forest-chopping
				name=target
				[criteria]
					id=Hero
				[/criteria]
				value=10
			[/goal]
		[/ai]
		{FLAG_VARIANT "wood-elvish"}
	[/side]
	# Elves don't burn buildings, because they worry the fire would spread to the forest
	
	[event]
		name=side 6 turn end
		first_time_only=no
		{RANDOM_VAR random 1..100}
		[if]
			{VARIABLE_CONDITIONAL random less_than $relations.elves}
			[then]
				{RANDOM_VAR rnd_type ("Elvish Ranger","Elvish Marksman","Elvish Captain", "Elvish Hero", "Elvish Rider","Elvish Druid", "Elvish Sorceress")}
				# Find a forest near the western signpost
				{FIND_NEAREST_HEX elf_start $map_signs[2].x $map_signs[2].y terrain=*^F*}
				{DEBUG "Placing some elves near $elf_start.x,$elf_start.y"}
				[unit]
					side=6
					type=$rnd_type
					role=elf_leader
					x=$elf_start.x
					y=$elf_start.y
					canrecruit=yes
					placement=map
					animate=yes
				[/unit]
				{VARIABLE_OP relations.elves multiply 2}
				{REPEAT $relations.elves {NEW_RANDOM_ELF}}
				{VARIABLE relations.elves 0}	# reset relations
				[modify_unit]	# this ensures later elves (unlikely) not placed with old leader
					[filter]
						side=6
						canrecruit=yes
					[/filter]
					canrecruit=no
				[/modify_unit]
				[event]
					name=sighted
					first_time_only=yes
					[filter]
						side=6
					[/filter]
					[filter_second]
						side=1
					[/filter_second]
					[message]
						role=elf_leader
						message=_"Human!  We have heard the cries of the trees, and we will not stand idle while you wantonly destroy the forests.  You shall soon feel the wrath of the elves!"
					[/message]
					{HERO_SAYS _"We are well within lands given to humans by the Treaty, elf!  You have no cause to wish us harm."}
					[message]
						role=elf_leader
						message=_"The Treaty does not give you the right to make war upon trunks and branches.  Leave now or you shall find yourself full of arrows."
					[/message]
					{ADVISOR_SAYS _"This is likely a splinter group, milord, not any part of the elvish army.  That will not make their blades any less sharp, however."}
					{INCIDENTAL_MUSIC "elvish-theme.ogg"}
				[/event]
			[/then]
		[/if]
		{CLEAR_VARIABLE elf_start,random}
	[/event]
#enddef

#define NEW_RANDOM_ELF
	# Elves spawn at level 1, stronger has too much potential for randomized doom
	{RANDOM_VAR rnd_type "Elvish Fighter,Elvish Archer,Elvish Shaman,Elvish Scout"}
	[unit]
		side=6
		type=$rnd_type
		canrecruit=no
		placement=leader
		animate=yes
	[/unit]
	{CLEAR_VARIABLE rnd_type}
#enddef


# ----- Undead -----------------------------------------------------------
#define UNDEAD_ARE_SIDE7
	# Undead, including random/curse units, necromancers, and lich calamities, are all side 7
	[side]
		side=7
		controller=ai
		team_name=animals_and_undead	# Undead want souls, not creatures
		user_team_name=_"Undead"
		recruit= 				# No recruit -- liches raise random enemies from the ground
		no_leader=yes
		shroud=no
		fog=yes
		share_maps=no
		gold=0
		income=0
		[ai]
			ai_algorithm=ai_default_rca_1_14
			#{MODIFY_AI_DELETE_CANDIDATE_ACTION 7 main_loop retreat_injured}
			aggression=1.0
			caution=0			# no retreat
			leader_value=1.0	
			village_value=1
			[goal]
				name=target
				[criteria]
					{FILTER_FOR_CURSE "undead_generator"}
				[/criteria]
				value=10
			[/goal]
			[goal]
				name=target_location
				[criteria]
					[and]
						[filter_owner]
							side=1
						[/filter_owner]
						terrain=*^V*
					[/and]
				[/criteria]
				value=1
			[/goal]
			[avoid]			# Avoid the lich holing up in an orc castle
				terrain=Co,Coa,Ko,Koa
				radius=2
			[/avoid]
		[/ai]
		{FLAG_VARIANT "undead"}
	[/side]
	# Undead are scared of fire -- won't burn anything
	
	[event]
		name=new_undead_raid
		first_time_only=no
		{RANDOM_VAR rnd_dir 2,3}	# west or south edge
		[store_locations]
			variable=undead_places
			{X_AND_Y_ARE_ON_THE_MAP}
			terrain=!,W*,*^Y*,*^V*	
			[and]	# appears near the signpost
				x=$map_signs[$rnd_dir].x
				y=$map_signs[$rnd_dir].y
				radius=3	# this is kind of arbitrary
			[/and]
		[/store_locations]
		{RANDOM_VAR rnd_i 0.."$($undead_places.length-1)"}
		[if]
			{VARIABLE_CONDITIONAL season less_than 4}
			[then]
				{VARIABLE necro_type ("Dark Sorcerer")}
			[/then]
			[else]
				{VARIABLE necro_type ("Necromancer")}
			[/else]
		[/if]
		{DEBUG "Spawning a $necro_type at $undead_places[$rnd_i].x, $undead_places[$rnd_i].y"}
		[unit]
			side=7
			type=$necro_type
			x=$undead_places[$rnd_i].x
			y=$undead_places[$rnd_i].y
			generate_name=yes
			random_traits=yes
			canrecruit=no
			placement=map
			animate=yes
			role=necromancer	# not currently used for anything
			[modifications]		# no upkeep reasons to do this, just to indicate that these are "special" units
				{TRAIT_LOYAL}
			[/modifications]
			overlays="misc/loyal-icon.png"
		[/unit]
		# Add a few "assistants"
		{REPEAT 3 (
			{RANDOM_VAR rnd_type "Shadow","Wraith","Necrophage","Deathblade","Revenant","Bone Shooter"}
			[unit]
				side=7
				type=$rnd_type
				canrecruit=no
				x,y=$undead_places[$rnd_i].x,$undead_places[$rnd_i].y
				animate=yes
				[modifications]		# no upkeep reasons to do this, just to indicate that these are "special" units
					{TRAIT_LOYAL}
				[/modifications]
				overlays="misc/loyal-icon.png"
			[/unit] )}
		{CLEAR_VARIABLE rnd_type}
		# Now he "recruits" his army
		{COUNT_VILLAGES num_villages}
		[set_variable]
			name=undead_gold
			# A bit larger than orc raid gold because they don't get income
			ipart="$(1.25*($enemy.raid_base_gold + $enemy.raid_gold_mult*$num_villages))"
		[/set_variable]
		[set_variables]
			name=undead_list
			mode=replace
			{VALUE2 type "Dark Adept" cost 16}
			{VALUE2 type "Ghost" cost 20}
			{VALUE2 type "Ghoul" cost 16}
			{VALUE2 type "Skeleton" cost 15}
			{VALUE2 type "Skeleton Archer" cost 14}
			{VALUE2 type "Walking Corpse" cost 8}	# walking corpses should appear slightly more often
			{VALUE2 type "Walking Corpse" cost 8}
			{VALUE2 type "Soulless" cost 13}
		[/set_variables]
		[while]
			{VARIABLE_CONDITIONAL undead_gold greater_than 10}	# will go *roughly* to zero
			[do]
				{RANDOM_VAR rnd_i2 0.."$($undead_list.length-1)"}
				[unit]
					side=7
					type=$undead_list[$rnd_i2].type
					x,y=$undead_places[$rnd_i].x,$undead_places[$rnd_i].y
					generate_name=yes
					random_traits=yes
					random_gender=yes
					upkeep=free	# no real point to do this, but why not
					animate=yes
				[/unit]
				{VARIABLE_OP undead_gold sub $undead_list[$rnd_i2].cost}
			[/do]
		[/while]
		{CLEAR_VARIABLE undead_places,rnd_i,rnd_i2,necro_type,num_villages,rnd_dir,undead_list,undead_gold}
		
		# Dialogue event put here to (almost, but not quite certainly) avoid
		# triggering on an undead-cursed relic
		{ON_SIGHTING undead_sighting 1 side=7 (
			{DIALOGUE first_undead_sighting (
				[if]
					[have_unit]	# the hero sights 
						x,y=$x1,$y1
						id=Hero
					[/have_unit]
					[then]
						{HERO_SAYS _"Undead!  What are they doing here?"}
					[/then]
					[else]
						{ADVISOR_SAYS _"Undead, milord!"}
						{HERO_SAYS _"What are they doing here?"}
					[/else]
				[/if]
				{ADVISOR_SAYS _"Any mage caught practicing necromancy is exiled from Wesnoth, milord.  Some must wander the northlands, likely with their undead spawn."}
				{HERO_SAYS _"I have no wish to serve in some criminal's war host.  Raise your blades, men, and send these unnatural creatures back to their graves!"}
				{CYNIC_SAYS {ASIDE _"Maces might be of more use, here."}}
				{TUTORIAL undead_sighting _"Groups of undead, lead by a necromancer, attack in groups typically larger than outlaws but a bit smaller than orcs.  If you have built the appropriate buildings to recruit mages or heavy infantry, you should likely recruit a few of those units.  If you only have spearmen, sticking to good defensive terrain and fighting only during the day become even more important than usual."}
				{INCIDENTAL_MUSIC "the_dangerous_symphony.ogg"} 
			)}
		)}
	[/event]

#enddef


# ----- Calamity ---------------------------------------------------------
#define CALAMITY_IS_SIDE8
	# Calamity armies other than animals or undead are side 8
	[side]
		side=8
		controller=ai
		team_name=calamity	# Calamity has no friends
		user_team_name=_"Calamity"
		recruit= 				# No recruit
		no_leader=yes
		shroud=no
		fog=yes
		share_maps=no
		gold=0
		income=0
		[ai]
			ai_algorithm=ai_default_rca_1_14
			#{MODIFY_AI_DELETE_CANDIDATE_ACTION 8 main_loop retreat_injured}
			aggression=1.0
			caution=0			# no retreat
			leader_value=1.0
			village_value=1
		[/ai]
		{FLAG_VARIANT "ragged"}
	[/side]
	
	{WILL_BURN_BUILDINGS 8}
	
	# ----- Lich raises dead -----
	[event]
		name=new turn
		first_time_only=no
		[if]
			[have_unit]
				side=7	# undead, not calamity
				role=lich
			[/have_unit]
			[then]
				# Raise dead randomly somewhere on the map
				{DEBUG "Lich is raising a random unit somewhere"}
				[store_locations]
					variable=undead_places
					{X_AND_Y_ARE_ON_THE_MAP}
					terrain=!,W*,*^Y*,*^V*
				[/store_locations]
				{RANDOM_VAR rnd_i 0.."$($undead_places.length-1)"}
				# Type list has some doubled units so they appear more often
				{RANDOM_VAR undead_type ("Dark Adept","Ghost","Ghoul","Skeleton","Skeleton","Skeleton Archer","Skeleton Archer","Walking Corpse","Walking Corpse","Soulless","Shadow","Wraith","Necrophage","Deathblade","Revenant","Bone Shooter")}
				
				{GENERIC_UNIT 7 $undead_type $undead_places[$rnd_i].x $undead_places[$rnd_i].y}
				{CLEAR_VARIABLE rnd_i,undead_places,undead_type}
			[/then]
		[/if]
	[/event]
#enddef


# ----- Friends ----------------------------------------------------------
#define FRIENDS_ARE_SIDE9
	# Friendly units, mostly merchants and possibly mercenaries
	[side]
		side=9
		controller=ai
		team_name=settlers
		user_team_name=_"Friends"
		recruit= 				# No recruit
		no_leader=yes
		shroud=yes
		fog=yes
		share_maps=no
		gold=0
		income=0
		[ai]
			ai_algorithm=ai_default_rca_1_14
			#{MODIFY_AI_DELETE_CANDIDATE_ACTION 9 main_loop retreat_injured}
			aggression=-100
			caution=100			# no retreat
			leader_value=0.0
			village_value=0
		[/ai]
		{FLAG_VARIANT "loyalist"}
	[/side]
#enddef

# ----- Raiding ----------------------------------------------------------
#define NEW_ORC_AND_UNDEAD_RAIDS JUMP
	[event]
		name=new turn
		first_time_only=no	
		{VARIABLE_OP relations.raids add {ENEMY_STEP}}
		{RANDOM_VAR random 1..100}
		[if]
			{VARIABLE_CONDITIONAL random less_than $relations.raids}
			[then]
				# relative quantities of orc/undead set frequencies
				{RANDOM_VAR enemy_choice ("orc","orc","orc","undead")}	
				[switch]	# switch so I can add other options easily
					variable=enemy_choice
					[case]
						value="orc"
						{FIRE_EVENT new_orc_raid}
					[/case]
					[case]
						value="undead"
						{FIRE_EVENT new_undead_raid}
					[/case]
				[/switch]
				{VARIABLE_OP relations.raids sub "$({JUMP}*{ENEMY_STEP})"}
			[/then]
		[/if]
		{CLEAR_VARIABLE enemy_choice}
		{CLEAR_VARIABLE random}
	[/event]
#enddef

#define NEW_ORC_RAIDS JUMP
	[event]
		name=new turn
		first_time_only=no	
		{VARIABLE_OP relations.raids add {ENEMY_STEP}}
		{RANDOM_VAR random 1..100}
		[if]
			{VARIABLE_CONDITIONAL random less_than $relations.raids}
			[then]
				{FIRE_EVENT new_orc_raid}
				{VARIABLE_OP relations.raids sub "$({JUMP}*{ENEMY_STEP})"}
			[/then]
		[/if]
		{CLEAR_VARIABLE random}
	[/event]
#enddef

#define NEW_UNDEAD_RAIDS JUMP
	[event]
		name=new turn
		first_time_only=no	
		{VARIABLE_OP relations.raids add {ENEMY_STEP}}
		{RANDOM_VAR random 1..100}
		[if]
			{VARIABLE_CONDITIONAL random less_than $relations.raids}
			[then]
				{FIRE_EVENT new_undead_raid}
				{VARIABLE_OP relations.raids sub "$({JUMP}*{ENEMY_STEP})"}
			[/then]
		[/if]
		{CLEAR_VARIABLE random}
	[/event]
#enddef

# ----- Burnination ------------------------------------------------------
#define WILL_BURN_BUILDINGS SIDE
	[event]
		name=moveto
		first_time_only=no
		[filter]
			side={SIDE}
			# Not sure how to switch on village terrain, so I'll handle
			# that event separately
			[filter_location]	
				terrain=*^Yf,*^Yfo,*^Yb,*^Ybo,*^Ys,*^Yso,*^Yl,*^Ylo,*^Ya,*^Yao,*^Yk,Ce,Cea
			[/filter_location]
		[/filter]
		[store_locations]	# This has base and overlay in it
			variable=burn_location_full
			x,y=$x1,$y1
		[/store_locations]
		# This is kind of an ugly hack, but I'm not sure how to make it cleaner
		[set_variables]
			name=burn_location
			mode=replace
			[split]
				list=$burn_location_full.terrain
				key=layer
				separator="^"
			[/split]
		[/set_variables]
		[switch]	# switch on base terrain
			variable=burn_location[0].layer
			[case]	# Wooden encampments
				value=Ce,Cea
				{CALL_FUNCTION "fort" do,x,y="burn",$x1,$y1}
			[/case]
			[case]	# Wooden keep
				value=Ke,Kea
				{CALL_FUNCTION "fort" do,x,y="burn",$x1,$y1}
				{NARRATOR_SAYS _"As the flames lick through gaps in your keep walls, anxious villagers rush into the streets.  The sight of the town center being reduced to ashes and the clang of swords sends them to their homes to grab food and supplies before rushing as far from the battle as possible.
				
Once in the wilderness, they become easy prey for the wolves..."}
				[endlevel]
					result=defeat
				[/endlevel]				
			[/case]
		[/switch]
		[switch]	# switch on overlay terrain
			# I'd like to make this more building type-agnostic, but that's difficult
			variable=burn_location[1].layer
			[case]	# Armorer
				value=Ya,Yao
				{CALL_FUNCTION "armorer" do,x,y="burn",$x1,$y1}
			[/case]
			[case]	# Blacksmith
				value=Yf,Yfo
				{CALL_FUNCTION "blacksmith" do,x,y="burn",$x1,$y1}
			[/case]
			[case]	# Bowyer
				value=Yb,Ybo
				{CALL_FUNCTION "bowyer" do,x,y="burn",$x1,$y1}
			[/case]
			[case]	# Library
				value=Yl,Ylo
				{CALL_FUNCTION "library" do,x,y="burn",$x1,$y1}
			[/case]
			[case]	# Stables
				value=Ys,Yso
				{CALL_FUNCTION "stables" do,x,y="burn",$x1,$y1}
			[/case]
		[/switch]
		{CLEAR_VARIABLE burn_location_full}
		{CLEAR_VARIABLE burn_location}
	[/event]

#enddef

#define WILL_BURN_FARMS SIDE PROBABILITY
	[event]
		name=capture
		first_time_only=no
		[filter]
			side={SIDE}
		[/filter]
		{RANDOM_VAR burn_chance 1..100}
		[if]
			{VARIABLE_CONDITIONAL burn_chance less_than_equal_to {PROBABILITY}}
			[then]
				{CALL_FUNCTION "farm" do,x,y="burn",$x1,$y1}
			[/then]
		[/if]
		{CLEAR_VARIABLE burn_chance}
	[/event]
#enddef
